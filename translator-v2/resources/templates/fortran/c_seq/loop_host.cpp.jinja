{%- macro variant_str() -%}
    {%- if lh is direct -%}
Direct
    {%- else -%}
Indirect
    {%- endif -%}
{%- endmacro -%}

{%- macro arg_dim(arg) -%}
    {%- if (arg is gbl or arg is info) and arg.dim is not none -%}
{{arg.dim}}
    {%- elif arg is dat and lh.dat(arg).dim is not none -%}
{{lh.dat(arg).dim}}
    {%- else -%}
arg{{arg.id}}.dim
    {%- endif -%}
{%- endmacro -%}

{%- macro map_idx(arg) -%}
    {%- if arg is runtime_map_idx %}
arg{{arg.id}}.idx - 1
    {%- else -%}
{{arg.map_idx}} - 1
    {%- endif -%}
{%- endmacro -%}

{% macro map_lookup(arg) -%}
map{{arg.map_id}}[{{map_idx(arg)}}]
{%- endmacro %}

{%- macro arg_to_pointer(arg) %}
    {%- if arg is idx and arg is indirect -%}
idx{{arg.id}}
    {%- elif arg is idx -%}
idx
    {%- else -%}
{{arg_to_pointer2(arg)}}
    {%- endif -%}
{%- endmacro -%}

{%- macro arg_to_pointer2(arg) %}
    {%- if arg is opt and arg is scalar(lh) %}
arg{{arg.id}}.opt ? ({{arg_to_pointer3(arg)}})[0] : zero_{{lh.dat(arg).typ.c()}}
    {%- elif arg is scalar(lh) %}
({{arg_to_pointer3(arg)}})[0]
    {%- else -%}
{{arg_to_pointer3(arg)}}
    {%- endif -%}
{%- endmacro -%}

{%- macro arg_to_pointer3(arg) %}
    {%- if arg is gbl or arg is info %}
        {%- set cast = arg.typ.c() -%}
    {%- else -%}
        {%- set cast = lh.dat(arg).typ.c() -%}
    {%- endif -%}

    {%- if arg is direct -%}
        {%- set offset = " + n" -%}
    {%- elif arg is indirect -%}
        {%- set offset = " + %s" % (map_lookup(arg)) -%}
    {%- endif -%}

    {%- if arg is dat %}
        {%- set offset = "%s * %s" % (offset, arg_dim(arg)) %}
    {%- endif -%}

    {%- if lh is indirect and arg is gbl and arg is not read %}
gbl{{arg.id}}_temp
    {%- elif lh is indirect and arg is info %}
info{{arg.id}}_temp
    {%- else -%}
({{cast}} *)arg{{arg.id}}.data{{offset}}
    {%- endif -%}
{%- endmacro -%}

#include "hydra_const_list_c_seq.h"

#include <op_f2c_prelude.h>
#include <op_lib_cpp.h>
#include <op_timing2.h>

#include <cstdint>
#include <cmath>
#include <cstdio>

namespace f2c = op::f2c;

namespace op2_m_{{lh.name}}{{variant}} {

{{kernel_func}}}


extern "C" void op2_k_{{lh.name}}{{variant}}_c(
    op_set set,
{% for arg in lh.args %}
    op_arg arg{{arg.id}}{{"," if not loop.last}}
{% endfor %}
) {
    int n_args = {{lh.args|length}};
    op_arg args[{{lh.args|length}}];

{% for arg in lh.args %}
    args[{{loop.index0}}] = arg{{arg.id}};
{% endfor %}

    op_timing2_enter_kernel("{{lh.name}}", "c_seq", "{{variant_str()}}");

    op_timing2_enter("MPI Exchanges");
    int n_exec = op_mpi_halo_exchanges(set, n_args, args);

    op_timing2_next("Computation");

{% for arg in lh.args|gbl|reject("read") if lh is indirect %}
    {{arg.typ.c()}} gbl{{arg.id}}_temp[{{arg_dim(arg)}}];
{% endfor %}
{% for arg in lh.args|info if lh is indirect %}
    {{arg.typ.c()}} info{{arg.id}}_temp[{{arg_dim(arg)}}];
{% endfor %}

{% for arg in lh.args|gbl|reject("read") if lh is indirect %}
    memcpy(gbl{{arg.id}}_temp, arg{{arg.id}}.data, {{arg_dim(arg)}} * sizeof({{arg.typ.c()}}));
{% endfor %}
{% for arg in lh.args|info if lh is indirect %}
    memcpy(info{{arg.id}}_temp, arg{{arg.id}}.data, {{arg_dim(arg)}} * sizeof({{arg.typ.c()}}));
{% endfor %}

    int zero_int = 0;
    bool zero_bool = 0;
    float zero_float = 0;
    double zero_double = 0;

    for (int n = 0; n < n_exec; ++n) {
{% if lh is indirect %}
        if (n == set->core_size) {
            op_timing2_next("MPI Wait");
            op_mpi_wait_all(n_args, args);
            op_timing2_next("Computation");
        }

    {% for map in lh.maps %}
        int *map{{map.id}} = arg{{map.arg_id}}.map_data + n * arg{{map.arg_id}}.map->dim;
    {% endfor %}
{% endif %}

{% if lh.args|idx|direct|length > 0 %}
        int idx = n + 1;
{% endif %}
{% for arg in lh.args|idx|indirect %}
        int idx{{arg.id}} = {{map_lookup(arg)}} + 1;
{% endfor %}

        op2_m_{{lh.name}}{{variant}}::{{lh.kernel}}(
{% for arg in lh.args %}
            {{arg_to_pointer(arg)}}{{"," if not loop.last}}
{% endfor %}
        );

{% if lh is indirect %}
        if (n == set->size - 1) {
    {% for arg in lh.args|gbl|reject("read") %}
            memcpy(arg{{arg.id}}.data, gbl{{arg.id}}_temp, {{arg_dim(arg)}} * sizeof({{arg.typ.c()}}));
    {% endfor %}
    {% for arg in lh.args|info %}
            memcpy(arg{{arg.id}}.data, info{{arg.id}}_temp, {{arg_dim(arg)}} * sizeof({{arg.typ.c()}}));
    {% endfor %}
        }
{% endif %}
    }

{% if lh is indirect %}
    if (n_exec < set->size) {
    {% for arg in lh.args|gbl|reject("read") %}
        memcpy(arg{{arg.id}}.data, gbl{{arg.id}}_temp, {{arg_dim(arg)}} * sizeof({{arg.typ.c()}}));
    {% endfor %}
    {% for arg in lh.args|info %}
        memcpy(arg{{arg.id}}.data, info{{arg.id}}_temp, {{arg_dim(arg)}} * sizeof({{arg.typ.c()}}));
    {% endfor %}
    }
{% endif %}

    op_timing2_next("MPI Wait");
    if (n_exec == 0 || n_exec == set->core_size)
        op_mpi_wait_all(n_args, args);

{% if lh.args|gbl|reduction|length > 0 %}
    op_timing2_next("MPI Reduce");

    {% for arg in lh.args|gbl|reduction %}
    op_mpi_reduce(&arg{{arg.id}}, ({{arg.typ.c()}} *)arg{{arg.id}}.data);
    {% endfor %}
{% endif %}
    op_timing2_exit();

    op_mpi_set_dirtybit(n_args, args);
    op_timing2_exit();
}
