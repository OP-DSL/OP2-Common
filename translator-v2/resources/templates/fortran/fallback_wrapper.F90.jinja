module op2_m_{{lh.name}}

    use iso_c_binding

    use op2_fortran_declarations
    use op2_fortran_rt_support

    use op2_m_{{lh.name}}_fallback
    use op2_m_{{lh.name}}_main

    implicit none

    private
    public :: op2_k_{{lh.name}}

contains

subroutine op2_k_{{lh.name}}( &
    name, &
    set, &
{% for arg in lh.args %}
    arg{{arg.id}}{{"," if not loop.last}} &
{% endfor %}
)
    character(kind=c_char, len=*) :: name
    type(op_set) :: set

{% for arg in lh.args %}
    type(op_arg) :: arg{{arg.id}}
{% endfor %}

    if (op_check_whitelist("{{lh.name}}")) then
        call op2_k_{{lh.name}}_main( &
            name, &
            set, &
{% for arg in lh.args %}
            arg{{arg.id}}{{"," if not loop.last}} &
{% endfor %}
        )
    else
        call op2_k_{{lh.name}}_fallback( &
            name, &
            set, &
{% for arg in lh.args %}
            arg{{arg.id}}{{"," if not loop.last}} &
{% endfor %}
        )
    end if
end subroutine

end module
