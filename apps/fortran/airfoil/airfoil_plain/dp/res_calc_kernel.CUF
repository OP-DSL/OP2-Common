!
! auto-generated by op2.py
!

MODULE RES_CALC_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! res_calcvariable declarations


TYPE ( c_ptr )  :: planRet_res_calc


CONTAINS

attributes (host) &
#include "res_calc.inc"
attributes (device) &
SUBROUTINE res_calc_gpu(x1,x2,q1,q2,adt1,adt2,res1,res2)
  IMPLICIT NONE
  REAL(kind=8)  :: x1(2)
  REAL(kind=8)  :: x2(2)
  REAL(kind=8), INTENT(IN) :: q1(4)
  REAL(kind=8), INTENT(IN) :: q2(4)
  REAL(kind=8), INTENT(IN) :: adt1
  REAL(kind=8), INTENT(IN) :: adt2
  REAL(kind=8) :: res1(4)
  REAL(kind=8) :: res2(4)
  REAL(kind=8) :: dx,dy,mu,ri,p1,vol1,p2,vol2,f

  dx = x1(1) - x2(1)
  dy = x1(2) - x2(2)
  ri = 1.0 / q1(1)
  p1 = 0.4 * (q1(4) - 0.5 * ri * (q1(2) * q1(2) + q1(3) * q1(3)))
  vol1 = ri * (q1(2) * dy - q1(3) * dx)
  ri = 1.0 / q2(1)
  p2 = 0.4 * (q2(4) - 0.5 * ri * (q2(2) * q2(2) + q2(3) * q2(3)))
  vol2 = ri * (q2(2) * dy - q2(3) * dx)
  mu = 0.5 * (adt1 + adt2) * 0.05
  f = 0.5 * (vol1 * q1(1) + vol2 * q2(1)) + mu * (q1(1) - q2(1))
  res1(1) = res1(1) + f
  res2(1) = res2(1) - f
  f = 0.5 * (vol1 * q1(2) + p1 * dy + vol2 * q2(2) + p2 * dy) + mu * (q1(2) - q2(2))
  res1(2) = res1(2) + f
  res2(2) = res2(2) - f
  f = 0.5 * (vol1 * q1(3) - p1 * dx + vol2 * q2(3) - p2 * dx) + mu * (q1(3) - q2(3))
  res1(3) = res1(3) + f
  res2(3) = res2(3) - f
  f = 0.5 * (vol1 * (q1(4) + p1) + vol2 * (q2(4) + p2)) + mu * (q1(4) - q2(4))
  res1(4) = res1(4) + f
  res2(4) = res2(4) - f
END SUBROUTINE



! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_res_calc( &
  & opDat1Deviceres_calc, &
  & opDat3Deviceres_calc, &
  & opDat5Deviceres_calc, &
  & opDat7Deviceres_calc, &
  & opDat1Map, &
  & opDat3Map, &
  & ind_maps7, &
  & mappingArray7, &
  & mappingArray8, &
  & ind_sizes, &
  & ind_offs, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Deviceres_calc(*)
  real(8), DEVICE :: opDat3Deviceres_calc(*)
  real(8), DEVICE :: opDat5Deviceres_calc(*)
  real(8), DEVICE :: opDat7Deviceres_calc(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat1Map(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat3Map(*)

  INTEGER(kind=4) map1idx, map2idx, map3idx, map4idx

  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: ind_maps7

  INTEGER(kind=2), DIMENSION(0:*), DEVICE :: mappingArray7
  INTEGER(kind=2), DIMENSION(0:*), DEVICE :: mappingArray8

  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: ind_sizes
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: ind_offs
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE, INTENT(IN) :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize

  INTEGER(kind=4) :: opDat7SharedMap
  real(8), DIMENSION(0:4-1) :: opDat7Local
  INTEGER(kind=4) :: opDat8SharedMap
  real(8), DIMENSION(0:4-1) :: opDat8Local

  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedFloat8

  INTEGER(kind=4), SHARED :: ind_maps7offset
  INTEGER(kind=4), SHARED :: ind_maps7size
  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i3
  INTEGER(kind=4) :: opDat7nBytes
  INTEGER(kind=4), SHARED :: opDat7RoundUp
  INTEGER(kind=4) moduloResult
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2


  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)
    ind_maps7offset = ind_offs (0 + blockID * 1)
    ind_maps7size   = ind_sizes(0 + blockID * 1)
    opDat7RoundUp = ind_maps7size * (4)
    opDat7RoundUp = opDat7RoundUp + MOD(opDat7RoundUp,2)

  END IF

  CALL syncthreads()

  opDat7nBytes = 0


  i1 = threadIdx%x - 1
  DO WHILE (i1 < ind_maps7size )
    DO i2 = 0, 4 - 1, 1
      sharedFloat8(opDat7nBytes + i2 + i1 * (4)) = 0
    END DO
    i1 = i1 + blockDim%x
  END DO


  CALL syncthreads()

  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    colour2 = -1
    IF (i1 < numberOfActiveThreads) THEN
      i3 = i1
      map1idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 0)
      map2idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 1)
      map3idx = opDat3Map(1 + i3 + threadBlockOffset + setSize * 0)
      map4idx = opDat3Map(1 + i3 + threadBlockOffset + setSize * 1)
      DO i2 = 0, 4 - 1, 1
        opDat7Local(i2) = 0
      END DO
      DO i2 = 0, 4 - 1, 1
        opDat8Local(i2) = 0
      END DO

! kernel call
      CALL res_calc_gpu( &
      & opDat1Deviceres_calc(1 + map1idx * (2):     map1idx * (2) + 2), &
      & opDat1Deviceres_calc(1 + map2idx * (2):     map2idx * (2) + 2), &
      & opDat3Deviceres_calc(1 + map3idx * (4):     map3idx * (4) + 4), &
      & opDat3Deviceres_calc(1 + map4idx * (4):     map4idx * (4) + 4), &
      & opDat5Deviceres_calc(1 + map3idx), &
      & opDat5Deviceres_calc(1 + map4idx), &
      & opDat7Local, &
      & opDat8Local &
      & )

      colour2 = pthrcol(i1 + threadBlockOffset)
    END IF

    IF (colour2 .GE. 0) THEN
      opDat7SharedMap = mappingArray7(i1 + threadBlockOffset)
      opDat8SharedMap = mappingArray8(i1 + threadBlockOffset)
    END IF

    DO colour1 = 0, numOfColours - 1, 1
      IF (colour2 .EQ. colour1) THEN
        opDat7Local(0) = opDat7Local(0)+ sharedFloat8(opDat7nBytes + (0 + opDat7SharedMap * (4)))
        opDat7Local(1) = opDat7Local(1)+ sharedFloat8(opDat7nBytes + (1 + opDat7SharedMap * (4)))
        opDat7Local(2) = opDat7Local(2)+ sharedFloat8(opDat7nBytes + (2 + opDat7SharedMap * (4)))
        opDat7Local(3) = opDat7Local(3)+ sharedFloat8(opDat7nBytes + (3 + opDat7SharedMap * (4)))
        sharedFloat8(opDat7nBytes + (0 + opDat7SharedMap * (4))) = opDat7Local(0)
        sharedFloat8(opDat7nBytes + (1 + opDat7SharedMap * (4))) = opDat7Local(1)
        sharedFloat8(opDat7nBytes + (2 + opDat7SharedMap * (4))) = opDat7Local(2)
        sharedFloat8(opDat7nBytes + (3 + opDat7SharedMap * (4))) = opDat7Local(3)

        opDat8Local(0) = opDat8Local(0)+ sharedFloat8(opDat7nBytes + (0 + opDat8SharedMap * (4)))
        opDat8Local(1) = opDat8Local(1)+ sharedFloat8(opDat7nBytes + (1 + opDat8SharedMap * (4)))
        opDat8Local(2) = opDat8Local(2)+ sharedFloat8(opDat7nBytes + (2 + opDat8SharedMap * (4)))
        opDat8Local(3) = opDat8Local(3)+ sharedFloat8(opDat7nBytes + (3 + opDat8SharedMap * (4)))
        sharedFloat8(opDat7nBytes + (0 + opDat8SharedMap * (4))) = opDat8Local(0)
        sharedFloat8(opDat7nBytes + (1 + opDat8SharedMap * (4))) = opDat8Local(1)
        sharedFloat8(opDat7nBytes + (2 + opDat8SharedMap * (4))) = opDat8Local(2)
        sharedFloat8(opDat7nBytes + (3 + opDat8SharedMap * (4))) = opDat8Local(3)

      END IF
      CALL syncthreads()
    END DO
    i1 = i1 + blockDim%x
  END DO

  i1 = threadIdx%x - 1
  DO WHILE (i1 < ind_maps7size * (4) )
    moduloResult = mod(i1,4)
    opDat7Deviceres_calc(moduloResult + ind_maps7 &
    & (ind_maps7offset + i1 / (4)) * (4) + 1) = &
    & opDat7Deviceres_calc(moduloResult + ind_maps7 &
    & (ind_maps7offset + i1 / (4)) * (4) + 1) + &
    & sharedFloat8(opDat7nBytes + i1)
    i1 = i1 + blockDim%x
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE res_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8

  IF (getHybridGPU().EQ.1) THEN
    CALL res_calc_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE res_calc_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8

  TYPE ( op_arg ) , DIMENSION(8) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, POINTER :: opDat1Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap1Deviceres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat3Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap3Deviceres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat5Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap5Deviceres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat7Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap7Deviceres_calc

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opMap1Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opMap3Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opMap5Cardinality
  INTEGER(kind=4) :: opDat7Cardinality
  INTEGER(kind=4) :: opMap7Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_res_calc

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:8) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:8) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:8) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:8) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size
  INTEGER(kind=4) :: mappingArray3Size
  INTEGER(kind=4) :: mappingArray5Size
  INTEGER(kind=4) :: mappingArray7Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4), DEVICE, POINTER, DIMENSION(:) :: ind_maps7

  INTEGER(kind=2), DEVICE, POINTER, DIMENSION(:) :: mappingArray7
  INTEGER(kind=2), DEVICE, POINTER, DIMENSION(:) :: mappingArray8
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: ind_offs
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: ind_sizes
  INTEGER(kind=4), POINTER, DIMENSION(:) :: pnindirect
  INTEGER(kind=4), POINTER, DIMENSION(:) :: nsharedCol
  TYPE ( c_ptr ), POINTER, DIMENSION(:) :: mappingArray
  TYPE ( c_ptr ), POINTER, DIMENSION(:) :: ind_maps
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10

  INTEGER(kind=4), SAVE :: calledTimes=0
  INTEGER(kind=4) :: istat

  numberOfOpDats = 8

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8

  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & 0.0_8, 0.00000_4,0.00000_4, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 1
  indirectionDescriptorArray(4) = 1
  indirectionDescriptorArray(5) = 2
  indirectionDescriptorArray(6) = 2
  indirectionDescriptorArray(7) = 3
  indirectionDescriptorArray(8) = 3

  numberOfIndirectOpDats = 4

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_res_calc = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,1)

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opMap1Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg1)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opMap3Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg3)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opMap5Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg5)
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
  opMap7Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg7)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceres_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg1%map_data_d,opMap1Deviceres_calc,(/opMap1Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Deviceres_calc,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg3%map_data_d,opMap3Deviceres_calc,(/opMap3Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Deviceres_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg5%map_data_d,opMap5Deviceres_calc,(/opMap5Cardinality/))
  CALL c_f_pointer(opArg7%data_d,opDat7Deviceres_calc,(/opDat7Cardinality/))
  CALL c_f_pointer(opArg7%map_data_d,opMap7Deviceres_calc,(/opMap7Cardinality/))

  CALL c_f_pointer(planRet_res_calc,actualPlan_res_calc)
  CALL c_f_pointer(actualPlan_res_calc%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%blkmap_d,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%offset_d,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%nelems_d,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_res_calc%thrcol,pthrcol,(/pthrcolSize/))
  CALL c_f_pointer(actualPlan_res_calc%nsharedCol,nsharedCol,(/actualPlan_res_calc%ncolors_core/))
  CALL c_f_pointer(actualPlan_res_calc%nindirect,pnindirect,(/actualPlan_res_calc%ninds_staged/))
  CALL c_f_pointer(actualPlan_res_calc%ind_maps,ind_maps,(/actualPlan_res_calc%ninds_staged/))
  CALL c_f_pointer(actualPlan_res_calc%maps,mappingArray,(/numberOfOpDats/))
  CALL c_f_pointer(actualPlan_res_calc%ind_sizes,ind_sizes,(/actualPlan_res_calc%nblocks * actualPlan_res_calc%ninds_staged/))
  CALL c_f_pointer(actualPlan_res_calc%ind_offs,ind_offs,(/actualPlan_res_calc%nblocks * actualPlan_res_calc%ninds_staged/))

  CALL c_f_pointer(ind_maps(1),ind_maps7,(/pnindirect(1)/))
  CALL c_f_pointer(mappingArray(7),mappingArray7,(/set%setPtr%size/))
  CALL c_f_pointer(mappingArray(8),mappingArray8,(/set%setPtr%size/))



  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_res_calc%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_res_calc%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = MAX(reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock, nsharedCol(1+i2))

    CALL op_cuda_res_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & opDat1Deviceres_calc, &
    & opDat3Deviceres_calc, &
    & opDat5Deviceres_calc, &
    & opDat7Deviceres_calc, &
    & opMap1Deviceres_calc, &
    & opMap3Deviceres_calc, &
    & ind_maps7, &
    & mappingArray7, &
    & mappingArray8, &
    & ind_sizes, &
    & ind_offs, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol, &
    & set%setPtr%size+set%setPtr%exec_size, blockOffset)

    blockOffset = blockOffset + blocksPerGrid
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, actualPlan_res_calc%transfer,actualPlan_res_calc%transfer2, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE

END MODULE
