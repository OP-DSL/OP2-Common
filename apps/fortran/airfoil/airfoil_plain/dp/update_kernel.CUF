!
! auto-generated by op2.py on 2013-08-21 13:15
!

MODULE UPDATE_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! updatevariable declarations

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: reductionArrayDevice5update



CONTAINS

! Multidimensional reduction cuda kernel
  attributes (device) SUBROUTINE ReductionFloat8Mdim(reductionResult,inputValue,reductionOperation,dim)
  REAL(kind=8), DIMENSION(:), DEVICE :: reductionResult
  REAL(kind=8), DIMENSION(:) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  INTEGER(kind=4), VALUE :: dim
  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedDouble8
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: d
  INTEGER(kind=4) :: threadID
  threadID = threadIdx%x - 1
  i1 = ishft(blockDim%x,-1)
  CALL syncthreads()
  sharedDouble8(threadID*dim:threadID*dim+dim-1) = inputValue(1:dim)
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      DO i2 = 0, dim - 1, 1
        sharedDouble8(threadID*dim + i2) = sharedDouble8(threadID*dim + i2) + sharedDouble8((threadID + i1)*dim + i2)
      END DO
    END IF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    reductionResult(1:dim) = reductionResult(1:dim) + sharedDouble8(0:dim-1)
  END IF
  CALL syncthreads()
  END SUBROUTINE

attributes (host) &
#include "update.inc"
attributes (device) &
#include "update.inc2"


! CUDA kernel function
  attributes (global) SUBROUTINE op_cuda_update( &
    & opDat1Deviceupdate, &
    & opDat2Deviceupdate, &
    & opDat3Deviceupdate, &
    & opDat4Deviceupdate, &
    & reductionArrayDevice5,   &
    & setSize)

    IMPLICIT NONE

! local variables
    real(8), DEVICE, INTENT(IN) :: opDat1Deviceupdate(*)
    real(8), DEVICE :: opDat2Deviceupdate(*)
    real(8), DEVICE :: opDat3Deviceupdate(*)
    real(8), DEVICE, INTENT(IN) :: opDat4Deviceupdate(*)

    real(8), DIMENSION(:), DEVICE :: reductionArrayDevice5
    real(8), DIMENSION(0:2-1) :: opGblDat5Deviceupdate

    INTEGER(kind=4), VALUE :: setSize
    INTEGER(kind=4) :: i1

    opGblDat5Deviceupdate = 0

    DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

      CALL update_gpu( &
      & opDat1Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat2Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat3Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat4Deviceupdate(i1 + 1), &
      & opGblDat5Deviceupdate &
      & )
    END DO

    CALL ReductionFloat8Mdim(reductionArrayDevice5((blockIdx%x - 1)*(2) + 1:),opGblDat5Deviceupdate,0,2)

  END SUBROUTINE

  attributes (host) SUBROUTINE update_host( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )

    IMPLICIT NONE
    character(len=6), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set

    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2
    TYPE ( op_arg ) , INTENT(IN) :: opArg3
    TYPE ( op_arg ) , INTENT(IN) :: opArg4
    TYPE ( op_arg ) , INTENT(IN) :: opArg5

    IF (getHybridGPU()) THEN
      CALL update_host_gpu( userSubroutine, set, &
      & opArg1, &
      & opArg2, &
      & opArg3, &
      & opArg4, &
      & opArg5 )
    ELSE
      CALL update_host_cpu( userSubroutine, set, &
      & opArg1, &
      & opArg2, &
      & opArg3, &
      & opArg4, &
      & opArg5 )
    END IF
  END SUBROUTINE


! Stub for GPU execution

  attributes (host) SUBROUTINE update_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )

    IMPLICIT NONE
    character(len=6), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set

    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2
    TYPE ( op_arg ) , INTENT(IN) :: opArg3
    TYPE ( op_arg ) , INTENT(IN) :: opArg4
    TYPE ( op_arg ) , INTENT(IN) :: opArg5

    TYPE ( op_arg ) , DIMENSION(5) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming


    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceupdate
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Deviceupdate
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Deviceupdate
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Deviceupdate

    INTEGER(kind=4) :: opDat1Cardinality
    INTEGER(kind=4) :: opDat2Cardinality
    INTEGER(kind=4) :: opDat3Cardinality
    INTEGER(kind=4) :: opDat4Cardinality
    INTEGER(kind=4) :: opDat5Cardinality

    INTEGER(kind=4) :: blocksPerGrid
    INTEGER(kind=4) :: threadsPerBlock
    INTEGER(kind=4) :: dynamicSharedMemorySize
    INTEGER(kind=4) :: threadSynchRet
    INTEGER(kind=4), SAVE :: calledTimes
    INTEGER(kind=4) :: i1
    INTEGER(kind=4) :: i2
    INTEGER(kind=4) :: i10
    INTEGER(kind=4) :: i20
    REAL(kind=4) :: dataTransfer

    INTEGER(kind=4) :: istat
    real(8), DIMENSION(:), POINTER :: opDat5Host
    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost5
    INTEGER(kind=4) :: reductionCardinality5

    numberOfOpDats = 5

    opArgArray(1) = opArg1
    opArgArray(2) = opArg2
    opArgArray(3) = opArg3
    opArgArray(4) = opArg4
    opArgArray(5) = opArg5

    returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
    & 0.d0, 0.00000,0.00000, 0)
    call date_and_time(values=timeArrayStart)
    startTime = 1.00000 * timeArrayStart(8) + &
    & 1000.00 * timeArrayStart(7) + &
    & 60000 * timeArrayStart(6) + &
    & 3600000 * timeArrayStart(5)

    n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


    blocksPerGrid = 200
    threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim


    CALL c_f_pointer(opArg1%data_d,opDat1Deviceupdate,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data_d,opDat2Deviceupdate,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data_d,opDat3Deviceupdate,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data_d,opDat4Deviceupdate,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Host,(/opDat5Cardinality/))

    reductionCardinality5 = blocksPerGrid * 1
    allocate( reductionArrayHost5(reductionCardinality5* (2)) )
    IF (.not. allocated(reductionArrayDevice5update)) THEN
      allocate( reductionArrayDevice5update(reductionCardinality5* (2)) )
    END IF

    DO i10 = 0, reductionCardinality5 - 1, 1
      reductionArrayHost5(i10 * (2) + 1 : i10 * (2) + (2)) = 0.0
    END DO

    reductionArrayDevice5update = reductionArrayHost5

    CALL op_cuda_update <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
    & opDat1Deviceupdate, &
    & opDat2Deviceupdate, &
    & opDat3Deviceupdate, &
    & opDat4Deviceupdate, &
    reductionArrayDevice5update, &
    set%setPtr%size)

    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF


    CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

    reductionArrayHost5 = reductionArrayDevice5update

    DO i10 = 0, reductionCardinality5 - 1, 1
      opDat5Host(1:2) = opDat5Host(1:2) + reductionArrayHost5(i10 * (2) + 1 : i10 * (2) + (2))
    END DO

    deallocate( reductionArrayHost5 )
    CALL op_mpi_reduce_double(opArg5,opArg5%data)

    istat = cudaDeviceSynchronize()
    call date_and_time(values=timeArrayEnd)
    endTime = 1.00000 * timeArrayEnd(8) + &
    1000 * timeArrayEnd(7) + &
    60000 * timeArrayEnd(6) + &
    3600000 * timeArrayEnd(5)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
    dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2) * 2.d0
    dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
    dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4)
    dataTransfer = dataTransfer + opArg5%size * 2.d0
    returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
    & (endTime-startTime) / 1000.00, dataTransfer, 0.00000, 1)
    calledTimes = calledTimes + 1
  END SUBROUTINE


! Stub for CPU execution

  SUBROUTINE op_wrap_update( &
    & opDat1Local, &
    & opDat2Local, &
    & opDat3Local, &
    & opDat4Local, &
    & opDat5Local, &
    & bottom,top)
    real(8) opDat1Local(4,*)
    real(8) opDat2Local(4,*)
    real(8) opDat3Local(4,*)
    real(8) opDat4Local(1,*)
    real(8) opDat5Local(2)
    INTEGER(kind=4) bottom,top,i1

    DO i1 = bottom, top - 1, 1
! kernel call
    CALL update( &
      & opDat1Local(1,i1+1), &
      & opDat2Local(1,i1+1), &
      & opDat3Local(1,i1+1), &
      & opDat4Local(1,i1+1), &
      & opDat5Local(1) &
      & )
    END DO
  END SUBROUTINE
  SUBROUTINE update_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )

    IMPLICIT NONE
    character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
    type ( op_set ) , INTENT(IN) :: set

    type ( op_arg ) , INTENT(IN) :: opArg1
    type ( op_arg ) , INTENT(IN) :: opArg2
    type ( op_arg ) , INTENT(IN) :: opArg3
    type ( op_arg ) , INTENT(IN) :: opArg4
    type ( op_arg ) , INTENT(IN) :: opArg5

    type ( op_arg ) , DIMENSION(5) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    type ( op_set_core ) , POINTER :: opSetCore

    real(8), POINTER, DIMENSION(:) :: opDat1Local
    INTEGER(kind=4) :: opDat1Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat2Local
    INTEGER(kind=4) :: opDat2Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat3Local
    INTEGER(kind=4) :: opDat3Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat4Local
    INTEGER(kind=4) :: opDat4Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat5Local
    INTEGER(kind=4) :: threadID
    INTEGER(kind=4) :: numberOfThreads
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming
    INTEGER(kind=4) :: sliceStart
    INTEGER(kind=4) :: sliceEnd
    REAL(kind=4) :: dataTransfer

    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost5

    INTEGER(kind=4) :: i1,i2,n

    numberOfOpDats = 5

    opArgArray(1) = opArg1
    opArgArray(2) = opArg2
    opArgArray(3) = opArg3
    opArgArray(4) = opArg4
    opArgArray(5) = opArg5

    returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
    & 0.d0, 0.00000,0.00000, 0)
    call date_and_time(values=timeArrayStart)
    startTime = 1.00000 * timeArrayStart(8) + &
    & 1000.00 * timeArrayStart(7) + &
    & 60000 * timeArrayStart(6) + &
    & 3600000 * timeArrayStart(5)

    n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

      opSetCore => set%setPtr

      opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
      opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
      opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
      opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
      CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
      CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
      CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
      CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
      CALL c_f_pointer(opArg5%data,opDat5Local, (/opArg5%dim/))

      allocate( reductionArrayHost5(numberOfThreads * ((2-1)/64+1)*64) )
      DO i1 = 1, numberOfThreads+1 - 1, 1
        DO i2 = 1, 2+1 - 1, 1
          reductionArrayHost5((i1 - 1) * ((2-1)/64+1)*64 + i2) = 0
        END DO
      END DO

      !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
      DO i1 = 0, numberOfThreads - 1, 1
        sliceStart = opSetCore%size * i1 / numberOfThreads
        sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
        threadID = omp_get_thread_num()
! kernel call
        CALL op_wrap_update( &
        & opDat1Local, &
        & opDat2Local, &
        & opDat3Local, &
        & opDat4Local, &
        & reductionArrayHost5(threadID * ((2-1)/64+1)*64 + 1), &
        & sliceStart, sliceEnd)
      END DO
      !$OMP END PARALLEL DO
      IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

      DO i1 = 1, numberOfThreads+1 - 1, 1
        DO i2 = 1, 2+1 - 1, 1
          opDat5Local(i2) = opDat5Local(i2) + reductionArrayHost5((i1 - 1) * ((2-1)/64+1)*64 + i2)
        END DO
      END DO

      deallocate( reductionArrayHost5 )

      CALL op_mpi_reduce_double(opArg5,opArg5%data)

      call date_and_time(values=timeArrayEnd)
      endTime = 1.00000 * timeArrayEnd(8) + &
      1000 * timeArrayEnd(7) + &
      60000 * timeArrayEnd(6) + &
      3600000 * timeArrayEnd(5)

      dataTransfer = 0.0
      dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
      dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2) * 2.d0
      dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
      dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4)
      dataTransfer = dataTransfer + opArg5%size * 2.d0
      returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
      & (endTime-startTime) / 1000.00, dataTransfer, 0.00000, 1)
    END SUBROUTINE
    END MODULE
