!
! auto-generated by op2.py
!

MODULE BRES_CALC_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! bres_calcvariable declarations


TYPE ( c_ptr )  :: planRet_bres_calc


CONTAINS

attributes (host) &
#include "bres_calc.inc"
attributes (device) &
SUBROUTINE bres_calc_gpu(x1,x2,q1,adt1,res1,bound)
  IMPLICIT NONE
  REAL(kind=8) :: x1(2)
  REAL(kind=8) :: x2(2)
  REAL(kind=8) :: q1(4)
  REAL(kind=8) :: adt1
  REAL(kind=8) :: res1(4)
  INTEGER(kind=4) :: bound
  REAL(kind=8) :: dx,dy,mu,ri,p1,vol1,p2,vol2,f

  dx = x1(1) - x2(1)
  dy = x1(2) - x2(2)
  ri = 1.0 / q1(1)
  p1 = gm1_OP2 * (q1(4) - 0.5 * ri * (q1(2) * q1(2) + q1(3) * q1(3)))

  IF (bound .EQ. 1) THEN
    res1(2) = res1(2) + p1 * dy
    res1(3) = res1(3) + -(p1 * dx)
  ELSE
    vol1 = ri * (q1(2) * dy - q1(3) * dx)
    ri = 1.0 / qinf_OP2(1)
    p2 = gm1_OP2 * (qinf_OP2(4) - 0.5 * ri * (qinf_OP2(2) * qinf_OP2(2) + qinf_OP2(3) * qinf_OP2(3)))
    vol2 = ri * (qinf_OP2(2) * dy - qinf_OP2(3) * dx)
    mu = adt1 * eps_OP2
    f = 0.5 * (vol1 * q1(1) + vol2 * qinf_OP2(1)) + mu * (q1(1) - qinf_OP2(1))
    res1(1) = res1(1) + f
    f = 0.5 * (vol1 * q1(2) + p1 * dy + vol2 * qinf_OP2(2) + p2 * dy) + mu * (q1(2) - qinf_OP2(2))
    res1(2) = res1(2) + f
    f = 0.5 * (vol1 * q1(3) - p1 * dx + vol2 * qinf_OP2(3) - p2 * dx) + mu * (q1(3) - qinf_OP2(3))
    res1(3) = res1(3) + f
    f = 0.5 * (vol1 * (q1(4) + p1) + vol2 * (qinf_OP2(4) + p2)) + mu * (q1(4) - qinf_OP2(4))
    res1(4) = res1(4) + f
  END IF
END SUBROUTINE



! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_bres_calc( &
  & opDat1Devicebres_calc, &
  & opDat3Devicebres_calc, &
  & opDat4Devicebres_calc, &
  & opDat5Devicebres_calc, &
  & opDat1Map, &
  & opDat3Map, &
  & opDat6Devicebres_calc, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Devicebres_calc(*)
  real(8), DEVICE :: opDat3Devicebres_calc(*)
  real(8), DEVICE :: opDat4Devicebres_calc(*)
  real(8), DEVICE :: opDat5Devicebres_calc(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat1Map(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat3Map(*)
  integer(4), DEVICE, INTENT(IN) :: opDat6Devicebres_calc(*)

  INTEGER(kind=4) map1idx, map2idx, map3idx

  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE, INTENT(IN) :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize

  real(8), DIMENSION(0:4-1) :: opDat5Local

  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i3
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2


  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)

  END IF

  CALL syncthreads()


  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    colour2 = -1
    IF (i1 < numberOfActiveThreads) THEN
      i3 = i1
      map1idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 0)
      map2idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 1)
      map3idx = opDat3Map(1 + i3 + threadBlockOffset + setSize * 0)
      DO i2 = 0, 4 - 1, 1
        opDat5Local(i2) = 0
      END DO

! kernel call
      CALL bres_calc_gpu( &
      & opDat1Devicebres_calc(1 + map1idx * (2):     map1idx * (2) + 2), &
      & opDat1Devicebres_calc(1 + map2idx * (2):     map2idx * (2) + 2), &
      & opDat3Devicebres_calc(1 + map3idx * (4):     map3idx * (4) + 4), &
      & opDat4Devicebres_calc(1 + map3idx), &
      & opDat5Local, &
      & opDat6Devicebres_calc((i3 + threadBlockOffset) * (1) +1) &
      & )

      colour2 = pthrcol(i1 + threadBlockOffset)
    END IF
    DO colour1 = 0, numOfColours - 1, 1
      IF (colour2 .EQ. colour1) THEN
        DO i2 = 0, 4 - 1, 1
          opDat5Devicebres_calc(1 + i2 + map3idx* (4)) = &
          & opDat5Devicebres_calc(1 + i2 + map3idx * (4)) + opDat5Local(i2)
        END DO

      END IF
      IF (colour1 .NE. numOfColours-1) THEN
        CALL syncthreads()
      END IF
    END DO
    i1 = i1 + blockDim%x
  END DO



END SUBROUTINE

attributes (host) SUBROUTINE bres_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6

  IF (getHybridGPU().EQ.1) THEN
    CALL bres_calc_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE bres_calc_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6

  TYPE ( op_arg ) , DIMENSION(6) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, POINTER :: opDat1Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap1Devicebres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat3Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap3Devicebres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat4Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap4Devicebres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat5Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap5Devicebres_calc
  integer(4), DIMENSION(:), DEVICE, POINTER :: opDat6Devicebres_calc

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opMap1Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opMap3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opMap4Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opMap5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_bres_calc

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:6) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:6) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:6) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:6) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size
  INTEGER(kind=4) :: mappingArray3Size
  INTEGER(kind=4) :: mappingArray4Size
  INTEGER(kind=4) :: mappingArray5Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10

  INTEGER(kind=4), SAVE :: calledTimes=0
  INTEGER(kind=4) :: istat

  numberOfOpDats = 6

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6

  returnSetKernelTiming = setKernelTime(3 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000_4,0.00000_4, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 1
  indirectionDescriptorArray(4) = 2
  indirectionDescriptorArray(5) = 3
  indirectionDescriptorArray(6) = -1

  numberOfIndirectOpDats = 4

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_bres_calc = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,2)

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opMap1Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg1)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opMap3Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opMap4Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opMap5Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)


  CALL c_f_pointer(opArg1%data_d,opDat1Devicebres_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg1%map_data_d,opMap1Devicebres_calc,(/opMap1Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Devicebres_calc,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg3%map_data_d,opMap3Devicebres_calc,(/opMap3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicebres_calc,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg4%map_data_d,opMap4Devicebres_calc,(/opMap4Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Devicebres_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg5%map_data_d,opMap5Devicebres_calc,(/opMap5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Devicebres_calc,(/opDat6Cardinality/))

  CALL c_f_pointer(planRet_bres_calc,actualPlan_bres_calc)
  CALL c_f_pointer(actualPlan_bres_calc%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%blkmap_d,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%offset_d,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%nelems_d,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_bres_calc%thrcol,pthrcol,(/pthrcolSize/))


  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_bres_calc%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_bres_calc%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_bres_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & opDat1Devicebres_calc, &
    & opDat3Devicebres_calc, &
    & opDat4Devicebres_calc, &
    & opDat5Devicebres_calc, &
    & opMap1Devicebres_calc, &
    & opMap3Devicebres_calc, &
    & opDat6Devicebres_calc, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol, &
    & set%setPtr%size+set%setPtr%exec_size, blockOffset)

    blockOffset = blockOffset + blocksPerGrid
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(3 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, actualPlan_bres_calc%transfer,actualPlan_bres_calc%transfer2, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE

END MODULE
