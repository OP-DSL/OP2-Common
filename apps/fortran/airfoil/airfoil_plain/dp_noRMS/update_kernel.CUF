!
! auto-generated by op2.py
!

MODULE UPDATE_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! updatevariable declarations




CONTAINS

attributes (host) &
#include "update.inc"
attributes (device) &
SUBROUTINE update_gpu(qold,q,res,adt)
  IMPLICIT NONE
  REAL(kind=8), INTENT(IN) :: qold(4)
  REAL(kind=8) :: q(4)
  REAL(kind=8) :: res(4)
  REAL(kind=8) :: del(4)
  REAL(kind=8), INTENT(IN) :: adt
  REAL(kind=8) :: adti
  INTEGER(kind=4) :: i
  adti = 1.0 / adt

  DO i = 1, 4
    del(i) = adti * res(i)
    q(i) = qold(i) - del(i)
    res(i) = 0.0
  END DO
END SUBROUTINE



! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_update( &
  & opDat1Deviceupdate, &
  & opDat2Deviceupdate, &
  & opDat3Deviceupdate, &
  & opDat4Deviceupdate, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE, INTENT(IN) :: opDat1Deviceupdate(*)
  real(8), DEVICE :: opDat2Deviceupdate(*)
  real(8), DEVICE :: opDat3Deviceupdate(*)
  real(8), DEVICE, INTENT(IN) :: opDat4Deviceupdate(*)


  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL update_gpu( &
    & opDat1Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
    & opDat2Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
    & opDat3Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
    & opDat4Deviceupdate(i1 + 1) &
    & )
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE update_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4

  IF (getHybridGPU().EQ.1) THEN
    CALL update_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE update_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4

  TYPE ( op_arg ) , DIMENSION(4) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, POINTER :: opDat1Deviceupdate
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat2Deviceupdate
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat3Deviceupdate
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat4Deviceupdate

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20
  REAL(kind=4) :: dataTransfer

  INTEGER(kind=4), SAVE :: calledTimes=0
  INTEGER(kind=4) :: istat

  numberOfOpDats = 4

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4

  returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
  & 0.0_8, 0.00000_4,0.00000_4, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


  blocksPerGrid = 600
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceupdate,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Deviceupdate,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Deviceupdate,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Deviceupdate,(/opDat4Cardinality/))


  CALL op_cuda_update <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & opDat1Deviceupdate, &
  & opDat2Deviceupdate, &
  & opDat3Deviceupdate, &
  & opDat4Deviceupdate, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  dataTransfer = 0.0
  dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
  dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
  dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
  dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4)
  returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, dataTransfer, 0.00000_4, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE

END MODULE
