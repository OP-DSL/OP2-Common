!
! auto-generated by op2.py
!

MODULE RES_CALC_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! res_calcvariable declarations


TYPE ( c_ptr )  :: planRet_res_calc

#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

attributes (host) &
#include "res_calc.inc"
attributes (device) &
SUBROUTINE res_calc_gpu(x1,x2,q1,q2,adt1,adt2,res1,res2)
  IMPLICIT NONE
  REAL(kind=8)  :: x1(2)
  REAL(kind=8)  :: x2(2)
  REAL(kind=8), INTENT(IN) :: q1(4)
  REAL(kind=8), INTENT(IN) :: q2(4)
  REAL(kind=8), INTENT(IN) :: adt1
  REAL(kind=8), INTENT(IN) :: adt2
  REAL(kind=8) :: res1(4)
  REAL(kind=8) :: res2(4)
  REAL(kind=8) :: dx,dy,mu,ri,p1,vol1,p2,vol2,f

  dx = x1(1) - x2(1)
  dy = x1(2) - x2(2)
  ri = 1.0 / q1(1)
  p1 = 0.4 * (q1(4) - 0.5 * ri * (q1(2) * q1(2) + q1(3) * q1(3)))
  vol1 = ri * (q1(2) * dy - q1(3) * dx)
  ri = 1.0 / q2(1)
  p2 = 0.4 * (q2(4) - 0.5 * ri * (q2(2) * q2(2) + q2(3) * q2(3)))
  vol2 = ri * (q2(2) * dy - q2(3) * dx)
  mu = 0.5 * (adt1 + adt2) * 0.05
  f = 0.5 * (vol1 * q1(1) + vol2 * q2(1)) + mu * (q1(1) - q2(1))
  res1(1) = res1(1) + f
  res2(1) = res2(1) - f
  f = 0.5 * (vol1 * q1(2) + p1 * dy + vol2 * q2(2) + p2 * dy) + mu * (q1(2) - q2(2))
  res1(2) = res1(2) + f
  res2(2) = res2(2) - f
  f = 0.5 * (vol1 * q1(3) - p1 * dx + vol2 * q2(3) - p2 * dx) + mu * (q1(3) - q2(3))
  res1(3) = res1(3) + f
  res2(3) = res2(3) - f
  f = 0.5 * (vol1 * (q1(4) + p1) + vol2 * (q2(4) + p2)) + mu * (q1(4) - q2(4))
  res1(4) = res1(4) + f
  res2(4) = res2(4) - f
END SUBROUTINE



! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_res_calc( &
  & opDat1Deviceres_calc, &
  & opDat3Deviceres_calc, &
  & opDat5Deviceres_calc, &
  & opDat7Deviceres_calc, &
  & opDat1Map, &
  & opDat3Map, &
  & start, end, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Deviceres_calc(*)
  real(8), DEVICE :: opDat3Deviceres_calc(*)
  real(8), DEVICE :: opDat5Deviceres_calc(*)
  real(8), DEVICE :: opDat7Deviceres_calc(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat1Map(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat3Map(*)

  INTEGER(kind=4) map1idx, map2idx, map3idx, map4idx

  INTEGER(kind=4), VALUE :: start, end
  INTEGER(kind=4), VALUE :: setSize

  INTEGER(kind=4) :: i3
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2



  i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x
  IF (i1+start<end) THEN
    i3 = i1+start
    map1idx = opDat1Map(1 + i3 + setSize * 0)
    map2idx = opDat1Map(1 + i3 + setSize * 1)
    map3idx = opDat3Map(1 + i3 + setSize * 0)
    map4idx = opDat3Map(1 + i3 + setSize * 1)

! kernel call
    CALL res_calc_gpu( &
    & opDat1Deviceres_calc(1 + map1idx * (2):     map1idx * (2) + 2), &
    & opDat1Deviceres_calc(1 + map2idx * (2):     map2idx * (2) + 2), &
    & opDat3Deviceres_calc(1 + map3idx * (4):     map3idx * (4) + 4), &
    & opDat3Deviceres_calc(1 + map4idx * (4):     map4idx * (4) + 4), &
    & opDat5Deviceres_calc(1 + map3idx), &
    & opDat5Deviceres_calc(1 + map4idx), &
    & opDat7Deviceres_calc(1 + map3idx * (4):     map3idx * (4) + 4), &
    & opDat7Deviceres_calc(1 + map4idx * (4):     map4idx * (4) + 4) &
    & )

  END IF


END SUBROUTINE

attributes (host) SUBROUTINE res_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8

  IF (getHybridGPU().EQ.1) THEN
    CALL res_calc_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE res_calc_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8

  TYPE ( op_arg ) , DIMENSION(8) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, POINTER :: opDat1Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap1Deviceres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat3Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap3Deviceres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat5Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap5Deviceres_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat7Deviceres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap7Deviceres_calc

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opMap1Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opMap3Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opMap5Cardinality
  INTEGER(kind=4) :: opDat7Cardinality
  INTEGER(kind=4) :: opMap7Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_res_calc

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:8) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:8) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:8) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:8) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size
  INTEGER(kind=4) :: mappingArray3Size
  INTEGER(kind=4) :: mappingArray5Size
  INTEGER(kind=4) :: mappingArray7Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: itstart, itend
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10

  INTEGER(kind=4), SAVE :: calledTimes=0
  INTEGER(kind=4) :: istat

  numberOfOpDats = 8

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8

  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & 0.0_8, 0.00000_4,0.00000_4, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 1
  indirectionDescriptorArray(4) = 1
  indirectionDescriptorArray(5) = 2
  indirectionDescriptorArray(6) = 2
  indirectionDescriptorArray(7) = 3
  indirectionDescriptorArray(8) = 3

  numberOfIndirectOpDats = 4

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opMap1Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg1)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opMap3Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg3)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opMap5Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg5)
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
  opMap7Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg7)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceres_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg1%map_data_d,opMap1Deviceres_calc,(/opMap1Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Deviceres_calc,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg3%map_data_d,opMap3Deviceres_calc,(/opMap3Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Deviceres_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg5%map_data_d,opMap5Deviceres_calc,(/opMap5Cardinality/))
  CALL c_f_pointer(opArg7%data_d,opDat7Deviceres_calc,(/opDat7Cardinality/))
  CALL c_f_pointer(opArg7%map_data_d,opMap7Deviceres_calc,(/opMap7Cardinality/))


  DO i2 = 0, 2 - 1, 1
    IF (i2 .EQ. 1) THEN
      itstart = set%setPtr%core_size
      itend = set%setPtr%size+set%setPtr%exec_size
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    ELSE
      itstart = 0
      itend = set%setPtr%core_size
    END IF

    blocksPerGrid = (itend-itstart-1)/threadsPerBlock+1
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_res_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & opDat1Deviceres_calc, &
    & opDat3Deviceres_calc, &
    & opDat5Deviceres_calc, &
    & opDat7Deviceres_calc, &
    & opMap1Deviceres_calc, &
    & opMap3Deviceres_calc, &
    & itstart, itend, &
    & set%setPtr%size+set%setPtr%exec_size)
  END DO



  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, 0.00000_4, 0.00000_4, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE

END MODULE
