
module bres_calc_cuda_module

	use OP2_C
	!use constantVarsCuda
	use cudaConfigurationParams
	use OP2Profiling
	use cudafor

	type varSizes_bres_calc

		integer(4) :: pindArg0Size
		integer(4) :: pindArg0MapsSize
		integer(4) :: pindArg1Size
		integer(4) :: pindArg1MapsSize
		integer(4) :: pindArg2Size
		integer(4) :: pindArg2MapsSize
		integer(4) :: pindArg3Size
		integer(4) :: pindArg3MapsSize
		integer(4) :: parg0MapsSize
		integer(4) :: parg1MapsSize
		integer(4) :: parg2MapsSize
		integer(4) :: parg3MapsSize
		integer(4) :: parg4MapsSize
		integer(4) :: parg5DatDSize		
		integer(4) :: pindArgSizesSize
		integer(4) :: pindArgOffsSize
		integer(4) :: pblkMapSize
		integer(4) :: pOffsetSize
		integer(4) :: pNelemsSize
		integer(4) :: pNcolorsSize
		integer(4) :: pColorsSize
		
	end type varSizes_bres_calc

  real(8), constant :: bres_calc_gam, &
											 bres_calc_gm1, &
											 bres_calc_cfl, &
											 bres_calc_eps, &
											 bres_calc_mach, &
											 bres_calc_alpha, &
											 bres_calc_air_const, &
											 bres_calc_qinf(4)
	

	! logical that tells if the input data to the kernel has been already generated
	! by previous calls to this same op_par_loop function
	logical :: isKernelInputDataGenerated = .false.

	! input data to kernel and associated variables
	integer(4) :: arg0Size, arg2Size, arg3Size, arg4Size, arg5Size
	type(varSizes_bres_calc), device :: argSizes
	type(c_ptr) :: planRet

!	type(op_plan), pointer :: actualPlan


!	integer, pointer, dimension(:) :: ncolblk	
!	integer, pointer, dimension(:) :: pnindirect
!	type(c_devptr), pointer, dimension(:) :: pindMaps
!	integer(4), dimension(1) :: pindMapsSize ! (just one array of pointers (i.e. other arrays))
!	integer, allocatable, device, dimension(:) :: pindMaps1
!	integer(4) :: pindMaps1Size
!	integer, allocatable, device, dimension(:) :: pindMaps2
!	integer(4) :: pindMaps2Size
!	integer, allocatable, device, dimension(:) :: pindMaps3
!	integer(4) :: pindMaps3Size
!	integer, allocatable, device, dimension(:) :: pindMaps4
!	integer(4) :: pindMaps4Size
!	type(c_devptr), pointer, dimension(:) :: pmaps
!	integer(4), dimension(6) :: pmapsSize ! dimension = op_par_loop args without OP_ID or OP_GBL (= 5, see below)
!!	integer(2), allocatable, device, dimension(:) :: pMaps1
!	integer(2), allocatable, device, dimension(:) :: pMaps2
!	integer(2), allocatable, device, dimension(:) :: pMaps3
!	integer(2), allocatable, device, dimension(:) :: pMaps4
!	integer(2), allocatable, device, dimension(:) :: pMaps5
!	integer(2), allocatable, device, dimension(:) :: pMaps6
!	integer(4) :: pmaps1Size, pmaps2Size, pmaps3Size, pmaps4Size, pmaps5Size, pmaps6Size
!	integer, device, allocatable, dimension(:) :: pindSizes
!	integer(4) :: pindSizesSize
!	integer, device, allocatable, dimension(:) :: pindOffs
!	integer(4) :: pindOffsSize
!	integer, device, allocatable, dimension(:) :: pblkMap
!	integer(4) :: pblkMapSize
!	integer, device, allocatable, dimension(:) :: poffset
!	integer(4) :: poffsetSize
!	integer, device, allocatable, dimension(:) :: pnelems
!	integer(4) :: pnelemsSize
!	integer, device, allocatable, dimension(:) :: pnthrcol
!	integer(4) :: pnthrcolSize
!	integer, device, allocatable, dimension(:) :: pthrcol
!	integer(4) :: pthrcolSize
!	real(8), dimension(:), allocatable, device :: argument0
!	real(8), dimension(:), allocatable, device :: argument2
!	real(8), dimension(:), allocatable, device :: argument3
!	real(8), dimension(:), allocatable, device :: argument4
!	integer(4), dimension(:), allocatable, device :: argument5

	contains

		attributes(host) subroutine bres_calc_initialiseConstants ()

			implicit none

			real(8) :: p, r, u, e

			bres_calc_gam = 1.400000
			bres_calc_gm1 = 0.400000
			bres_calc_cfl = 0.900000
			bres_calc_eps = 0.050000
			bres_calc_alpha = 0.052360
			
!			bres_calc_gam = 1.4
!			bres_calc_gm1 = 1.4 - 1.0 ! the first operand was a reference to the gam variable...not accepted by Fortran CUDA
!			bres_calc_cfl = 0.9
!			bres_calc_eps = 0.05
!
!			bres_calc_mach  = 0.4
!			bres_calc_alpha = 3.0 * atan(1.0) / 45.0
!			p     = 1.0
!			r     = 1.0
!			u     = sqrt ( bres_calc_gam * p / r ) * bres_calc_mach
!			e     = p / ( r * bres_calc_gm1 ) + 0.5 * u * u

			bres_calc_qinf(1) = 1.000000 ! r
			bres_calc_qinf(2) = 0.473286 ! r * u
			bres_calc_qinf(3) = 0.000000 ! 0.0
			bres_calc_qinf(4) = 2.612000 ! r * e
		
		end subroutine bres_calc_initialiseConstants	
		
		attributes(device) subroutine bres_calc ( x1, x2, q1, adt1, res1, bound )

			implicit none

			! formal parameters
			real(8), dimension(2), shared :: x1
			real(8), dimension(2), shared :: x2
			real(8), dimension(4), shared :: q1
			real(8), dimension(1), shared:: adt1
			real(8), dimension(4) :: res1
			integer(4), dimension(1) :: bound

			! local variables
			real(8) :: dx, dy, mu, ri, p1, vol1, p2, vol2, f

			dx = x1(1) - x2(1)
			dy = x1(2) - x2(2)

			ri = 1.0 / q1(1)
			p1 = bres_calc_gm1*(q1(4)-0.5 * ri * (q1(2) * q1(2) + q1(3) * q1(3)));


			if ( bound(1) == 1 ) then

				res1(2) = res1(2) + (+ p1*dy)
				res1(3) = res1(3) + (- p1*dx)

			else

				vol1 =  ri*(q1(2)*dy - q1(3)*dx)

				ri   = 1.0 / bres_calc_qinf(1);
				p2   = bres_calc_gm1*(bres_calc_qinf(4)-0.5 * ri * (bres_calc_qinf(2)*bres_calc_qinf(2)+bres_calc_qinf(3)*bres_calc_qinf(3)));
				vol2 =  ri*(bres_calc_qinf(2)*dy - bres_calc_qinf(3)*dx);

				mu = (adt1(1)) * bres_calc_eps;


				f = 0.5 * (vol1 * q1(1)         + vol2 * bres_calc_qinf(1)        ) + mu*(q1(1)-bres_calc_qinf(1));
				res1(1) = res1(1) + f;


				f = 0.5 * (vol1* q1(2) + p1*dy + vol2* bres_calc_qinf(2) + p2*dy) + mu*(q1(2)-bres_calc_qinf(2));
				res1(2) = res1(2) + f;


				f = 0.5 * (vol1* q1(3) - p1*dx + vol2* bres_calc_qinf(3) - p2*dx) + mu*(q1(3)-bres_calc_qinf(3));
				res1(3) = res1(3) + f;


				f = 0.5 * (vol1*(q1(4)+p1)     + vol2*(bres_calc_qinf(4)+p2)    ) + mu*(q1(4)-bres_calc_qinf(4));
				res1(4) = res1(4) + f;
			
			end if

		end subroutine bres_calc
	
		attributes(global) subroutine op_cuda_bres_calc ( argSizes, &
																											pindArg0, &
																											pindArg0Maps, &
																											pindArg1, &
																											pindArg1Maps, &
																											pindArg2, &
																											pindArg2Maps, &
																											pindArg3, &
																											pindArg3Maps, &
																											& parg0Maps, &
																											& parg1Maps, &
																											& parg2Maps, &
																											& parg3Maps, &
																											& parg4Maps, &
																											& parg5DatD, &
																											& pindArgSizes, &
																											& pindArgOffs, &
																											& blockOffset, &
																											& pblkMap, &
																											& poffset, &
																											& pnelems, &
																											& pncolors, &
																											& pcolors &
																									& )
			
			implicit none
			
			type(varSizes_bres_calc), device :: argSizes
			integer(4), value :: blockOffset
			
			real(8), dimension(0:(argSizes%pindArg0Size)-1), device :: pindArg0
			integer(4), dimension(0:(argSizes%pindArg0MapsSize)-1), device :: pindArg0Maps

			real(8), dimension(0:(argSizes%pindArg1Size)-1), device :: pindArg1
			integer(4), dimension(0:(argSizes%pindArg1MapsSize)-1), device :: pindArg1Maps

			real(8), dimension(0:(argSizes%pindArg2Size)-1), device :: pindArg2
			integer(4), dimension(0:(argSizes%pindArg2MapsSize)-1), device :: pindArg2Maps

			real(8), dimension(0:(argSizes%pindArg3Size)-1), device :: pindArg3
			integer(4), dimension(0:(argSizes%pindArg3MapsSize)-1), device :: pindArg3Maps

			integer(2), dimension(0:(argSizes%parg0MapsSize)-1), device :: parg0Maps
			integer(2), dimension(0:(argSizes%parg1MapsSize)-1), device :: parg1Maps
			integer(2), dimension(0:(argSizes%parg2MapsSize)-1), device :: parg2Maps
			integer(2), dimension(0:(argSizes%parg3MapsSize)-1), device :: parg3Maps
			integer(2), dimension(0:(argSizes%parg4MapsSize)-1), device :: parg4Maps

			integer(4), dimension(0:(argSizes%parg5DatDSize-1)), device :: parg5DatD
			
			integer(4), dimension(0:(argSizes%pindArgSizesSize)-1), device :: pindArgSizes
			integer(4), dimension(0:(argSizes%pindArgOffsSize)-1), device :: pindArgOffs
			integer(4), dimension(0:(argSizes%pblkMapSize)-1), device :: pblkMap
			integer(4), dimension(0:(argSizes%pOffsetSize)-1), device :: poffset
			integer(4), dimension(0:(argSizes%pNelemsSize)-1), device :: pnelems
			integer(4), dimension(0:(argSizes%pNcolorsSize)-1), device :: pncolors
			integer(4), dimension(0:(argSizes%pColorsSize)-1), device :: pcolors

			
			! the following variables are used to keep temporary values for OP_INC data (4-th parameter to op_par_loop)
			real(8), dimension(0:3) :: arg4_l

			
			integer(4), shared :: ind_arg0_size
			integer(4), shared :: ind_arg1_size
			integer(4), shared :: ind_arg2_size
			integer(4), shared :: ind_arg3_size

			integer(4), shared :: nelems2
			integer(4), shared :: ncolor
			integer(4), shared :: nelem
			integer(4), shared :: offset_b
			integer(4), shared :: blockId


			! the following shared variable is allocated by the kernel call (nshared parameter)
			! in case of op_dats with different base data type, we can declare multiple 
			! myshared with different types, all related to the same address, and then properly
			! access them
			real(8), shared :: myshared(0:*)			
			
			integer :: nbytes0, nbytes1, nbytes2, nbytes3

			integer(4) :: n, moduled, whileBound, col2, iterInit, i
			integer(4) :: inRoundUp0, inRoundUp1, inRoundUp2, inRoundUp3
			
			integer(2) :: arg4_map ! this has the value of a position in parg4Maps which is an array of shorts
			integer(4) :: col
		
			if ( (threadidx%x -1) .eq. 0 ) then 
				
				! get sizes and shift pointers and direct-mapped data

				blockId = pblkmap((blockidx%x-1) + blockOffset )

				nelem = pnelems(blockId)
				offset_b = poffset(blockId)

				nelems2  = blockdim%x * ( 1 + ( nelem - 1 ) / blockdim%x )
				ncolor   = pncolors(blockId)

				! ind_arg0_size = ind_arg_sizes[0+blockId*4];                                   
				! ind_arg1_size = ind_arg_sizes[1+blockId*4];                                   
				! ind_arg2_size = ind_arg_sizes[2+blockId*4];                                   
				! ind_arg3_size = ind_arg_sizes[3+blockId*4];                                   

				! in the *4 expression, 4 is equal to indsNumber 
				ind_arg0_size = pindArgSizes(0 + blockId * 4)
				ind_arg1_size = pindArgSizes(1 + blockId * 4)
				ind_arg2_size = pindArgSizes(2 + blockId * 4)
				ind_arg3_size = pindArgSizes(3 + blockId * 4)

				! ind_arg0_map = ind_arg0_maps + ind_arg_offs[0+blockId*4];                     
				! ind_arg1_map = ind_arg1_maps + ind_arg_offs[1+blockId*4];                     
				! ind_arg2_map = ind_arg2_maps + ind_arg_offs[2+blockId*4];                     
				! ind_arg3_map = ind_arg3_maps + ind_arg_offs[3+blockId*4];                     

				! // set shared memory pointers                                                 

				! int nbytes = 0;                                                               
				! ind_arg0_s = (double *) &shared[nbytes];                                       
				! nbytes    += ROUND_UP(ind_arg0_size*sizeof(double)*2);                         
				! ind_arg1_s = (double *) &shared[nbytes];                                       
				! nbytes    += ROUND_UP(ind_arg1_size*sizeof(double)*4);                         
				! ind_arg2_s = (double *) &shared[nbytes];                                       
				! nbytes    += ROUND_UP(ind_arg2_size*sizeof(double)*1);                         
				! ind_arg3_s = (double *) &shared[nbytes];
				
			end if				
			
			! make sure all of above completed
			call syncthreads()

			! compute offsets on all threads
			inRoundUp0 = ind_arg0_size*2
			inRoundUp1 = ind_arg1_size*4
			inRoundUp2 = ind_arg2_size*1

			nbytes0 = 0
			nbytes1 = nbytes0 + inRoundUp0
			nbytes2 = nbytes1 + inRoundUp1
			nbytes3 = nbytes2 + inRoundUp2

			! implements:
			! for (int n=threadIdx.x; n<ind_arg0_size*2; n+=blockDim.x)
			!		ind_arg0_s[n] = ind_arg0[n%2+ind_arg0_map[n/2]*2];
			n = (threadidx%x-1)
			whileBound = ind_arg0_size * 2
			do while ( n .lt. whileBound )
				! nbytes = 0 => 0 + ..
				moduled = mod ( n, 2 )
				
				! remember that:
				!				ind_arg0_map = ind_arg0_maps + ind_arg_offs[0+blockId*4];
				! and:
				!				ind_arg0_s = (double *) &shared[nbytes];
				myshared(nbytes0 + n) = pindArg0(moduled  + ( pindArg0Maps ( 0 + (pindArgOffs( 0 + blockId * 4 )) + ( n / 2 ) ) ) * 2)
				
				n = n + (blockdim%x)
			end do

			! implements:
			! for (int n=threadIdx.x; n<ind_arg1_size*4; n+=blockDim.x)
			!		ind_arg1_s[n] = ind_arg1[n%4+ind_arg1_map[n/4]*4];
			n = (threadidx%x-1)
			whileBound = ind_arg1_size * 4
			do while ( n .lt. whileBound )

				! nbytes = 0 => 0 + ..
				moduled = mod ( n, 4 )

				! remember that:
				!				ind_arg1_map = ind_arg1_maps + ind_arg_offs[1+blockId*4];
				! and:
				!				nbytes    += ROUND_UP(ind_arg0_size*sizeof(double)*2); == nbytes1
				!				ind_arg1_s = (double *) &shared[nbytes];
				myshared(nbytes1 + n) = pindArg1(moduled  + ( pindArg1Maps ( 0 + pindArgOffs( 1 + blockId * 4 ) + ( n / 4 ) ) ) * 4)
				
				n = n + (blockdim%x)
			end do									           
					
			! implements:                                                                      
			! for (int n=threadIdx.x; n<ind_arg2_size*1; n+=blockDim.x)
			!		ind_arg2_s[n] = ind_arg2[n%1+ind_arg2_map[n/1]*1];
			n = (threadidx%x-1)
			whileBound = ind_arg2_size * 1
			do while ( n .lt. whileBound )
				! nbytes = 0 => 0 + ..
				moduled = mod ( n, 1 )

				! remember that:
				!				ind_arg2_map = ind_arg2_maps + ind_arg_offs[2+blockId*4];
				! and:
				!				nbytes    += ROUND_UP(ind_arg1_size*sizeof(double)*4); == nbytes2
				!				ind_arg2_s = (double *) &shared[nbytes];
				myshared(nbytes2 + n) = pindArg2(moduled  + ( pindArg2Maps ( 0 + pindArgOffs( 2 + blockId * 4 ) + ( n / 1 ) ) ) * 1)
				
				n = n + (blockdim%x)
			end do			
			

			! implements:
			! for (int n=threadIdx.x; n<ind_arg3_size*4; n+=blockDim.x)
			!		ind_arg3_s[n] = ZERO_float;
			n = (threadidx%x-1)
			whileBound = ind_arg3_size * 4
			do while ( n .lt. whileBound )
				! nbytes = 0 => 0 + ..
				!moduled = mod ( n, 2 )

				! remember that:
				!				ind_arg3_map = ind_arg3_maps + ind_arg_offs[3+blockId*4];
				! and:
				!				nbytes    += ROUND_UP(ind_arg2_size*sizeof(double)*1); == nbytes2
				!				ind_arg3_s = (double *) &shared[nbytes];
				myshared(nbytes3 + n) = 0
				!pindArg3(moduled  + ( pindArg3Maps ( 0 + pindArgOffs( 3 + blockId * 4 ) ) + ( n / 2 ) ) )
				
				n = n + (blockdim%x)
			end do
																																 
			! make sure all of above completed
			call syncthreads()
																																								
			! for (int n=threadIdx.x; n<nelems2; n+=blockDim.x) {
			!		int col2 = -1;

			n = (threadidx%x-1)
			do while ( n .lt. nelems2 )
				col2 = -1
			
				!   if (n<nelem) {
				if ( n < nelem ) then
					
					! initialise local variables
					do iterInit = 0, 3
						arg4_l(iterInit) = 0
					end do

					! call user kernel

					! ind_arg0_s+arg0_maps[n+offset_b]*2,
					! ind_arg0_s+arg1_maps[n+offset_b]*2,
					! ind_arg1_s+arg2_maps[n+offset_b]*4,
					! ind_arg2_s+arg3_maps[n+offset_b]*1,
					! arg4_l,
					! arg5+(n+offset_b)*1
					call bres_calc ( myshared ( nbytes0 + parg0Maps (n + offset_b) * 2 : (nbytes0 + parg0Maps(n + offset_b) * 2) + 2 ), &
													 myshared ( nbytes0 + parg1Maps (n + offset_b) * 2 : (nbytes0 + parg1Maps(n + offset_b) * 2) + 2 ), &
													 myshared ( nbytes1 + parg2Maps (n + offset_b) * 4 : (nbytes1 + parg2Maps(n + offset_b) * 4) + 4 ), &
													 myshared ( nbytes2 + parg3Maps (n + offset_b) * 1 : (nbytes2 + parg3Maps(n + offset_b) * 1) + 1 ), &
													 arg4_l, &
													 parg5DatD( (n + offset_b) * 1 : (n + offset_b) * 1 + 1) &
												 )	
																									 
					! col2 = colors[n+offset_b];
					col2 = pcolors(n + offset_b )

				end if


					! int arg4_map = arg4_maps[n+offset_b];
					arg4_map = parg4Maps ( n + offset_b )

					! implements:
					! for (int col=0; col<ncolor; col++) {
					!		if (col2==col) {
					!			for (int d=0; d<4; d++)
					!				ind_arg3_s[d+arg4_map*4] += arg4_l[d];
					!   }
					!  __syncthreads();
					! }
					do col = 0, ncolor-1
				
						if ( col2 .eq. col ) then
											
							! for (int d=0; d<4; d++)
							do iterInit = 0, 3

								myshared(nbytes3 + iterInit + arg4_map*4 ) = myshared(nbytes3 + iterInit + arg4_map*4 ) + arg4_l(iterInit)

							end do
						
						end if
						
						! make sure all of above completed
						call syncthreads()				
					end do
					
				n = n + (blockdim%x)

			end do
			
			! apply pointered write/increment

			! implements:
			!	for (int n=threadIdx.x; n<ind_arg3_size*4; n+=blockDim.x)
			!		ind_arg3[n%4+ind_arg3_map[n/4]*4] += ind_arg3_s[n];
			n = (threadidx%x-1)
			do while ( n < ind_arg3_size*4 )
				
				moduled = mod ( n, 4 )
				
				! remember that:
				! ind_arg3_map = ind_arg3_maps + ind_arg_offs[3+blockId*4];
				! and that:
				! ind_arg3_s = myshared(nbytes3)
			 !ind_arg3[n%4+ind_arg3_map[n/4]*4]
			 !pindArg3 ( moduled + pindArg3Maps ( (0 + pindArgOffs ( 3 + blockId * 4 )) + (n / 4) ) * 4 )
				pindArg3 ( moduled + pindArg3Maps ( (0 + pindArgOffs ( 3 + blockId * 4 )) + (n / 4) ) * 4 ) = pindArg3 ( moduled + pindArg3Maps ( (0 + pindArgOffs ( 3 + blockId * 4 )) + (n / 4) ) * 4 ) + myshared(nbytes3 + n)
				
				n = n + (blockdim%x)
			end do			

!			pindArg3 ( 0 ) = bres_calc_qinf(1)
!			pindArg3 ( 1 ) = bres_calc_qinf(2)
!			pindArg3 ( 2 ) = bres_calc_qinf(3)
!			pindArg3 ( 3 ) = bres_calc_qinf(4)
			
		end subroutine op_cuda_bres_calc
	
		attributes(host) function op_par_loop_bres_calc ( subroutineName, set, &
																											& arg0,   idx0, map0, access0, &
																											& arg1,   idx1, map1, access1, &
																											& arg2,   idx2, map2, access2, &
																											& arg3,   idx3, map3, access3, &
																											& arg4,   idx4, map4, access4, &
																											& arg5,   idx5, map5, access5  &
																										& )


				! use directives	
				use, intrinsic :: ISO_C_BINDING
				use cudafor

				! mandatory	
				implicit none
				
				type(profInfo) :: op_par_loop_bres_calc
	
				! formal arguments
				character(kind=c_char,len=*), intent(in) :: subroutineName
	
				! data set on which we loop
				type(op_set), intent(in) :: set

				! data ids used in the function
				type(op_dat) :: arg0, arg1, arg2, arg3, arg4, arg5
	
				! index to be used in first and second pointers
				integer(4), intent(in) :: idx0, idx1, idx2, idx3, idx4, idx5
	
				! ptr ids for indirect access to data
				type(op_map) :: map0, map1, map2, map3, map4, map5
	
				! access values for arguments
				integer(4), intent(in) :: access0, access1, access2, access3, access4, access5

				! Compiler: variables used to invoke cplan 
				integer(4) :: args(6), idxs(6), maps(6), accs(6), inds(6)
				integer(4) :: argsNumber, indsNumber

!				! returned plan address by cplan and plan functions
!				type(c_ptr) :: planRet
!	
!				! variable for storing the actual OP Plan
				type(op_plan), pointer :: actualPlan
		
				! iteration and offset variables to implement plan execution
				integer(4) :: blockOffset, col

				! configuration variables for main kernel call
				integer(4) :: nblocks, nthread, nshared
				
				! iteration variables
				integer(4) :: i, m, iter

				! value returned by thread synchronisation function
				integer(4) :: threadsynchret
	
				! Fortran variable for Host variable
				integer, pointer, dimension(:) :: ncolblk
	
				integer, pointer, dimension(:) :: pnindirect

!				! ind_maps is an array of device pointers allocated on the host memory
				type(c_devptr), pointer, dimension(:) :: pindMaps
				integer(4), dimension(1) :: pindMapsSize ! (just one array of pointers (i.e. other arrays))
!									
!				! as many pindMapsI as the positions of pindMaps (4 in this case = indsNumber )
				integer, allocatable, device, dimension(:) :: pindMaps1
				integer(4) :: pindMaps1Size
!
				integer, allocatable, device, dimension(:) :: pindMaps2
				integer(4) :: pindMaps2Size
!
				integer, allocatable, device, dimension(:) :: pindMaps3
				integer(4) :: pindMaps3Size
!
				integer, allocatable, device, dimension(:) :: pindMaps4
				integer(4) :: pindMaps4Size
!
!				! maps is an array of device pointers allocated on the host memory
				type(c_devptr), pointer, dimension(:) :: pmaps
				integer(4), dimension(6) :: pmapsSize ! dimension = op_par_loop args without OP_ID or OP_GBL (= 5, see below)
!
!				! as many pMapsI as the positions of pmaps (8 for this case) (they are short integers)
				integer(2), allocatable, device, dimension(:) :: pMaps1
				integer(2), allocatable, device, dimension(:) :: pMaps2
				integer(2), allocatable, device, dimension(:) :: pMaps3
				integer(2), allocatable, device, dimension(:) :: pMaps4
				integer(2), allocatable, device, dimension(:) :: pMaps5
				integer(2), allocatable, device, dimension(:) :: pMaps6
!
!
				integer(4) :: pmaps1Size, pmaps2Size, pmaps3Size, pmaps4Size, pmaps5Size, pmaps6Size
!
				integer, device, allocatable, dimension(:) :: pindSizes
				integer(4) :: pindSizesSize
!	
				integer, device, allocatable, dimension(:) :: pindOffs
				integer(4) :: pindOffsSize
!				
				integer, device, allocatable, dimension(:) :: pblkMap
				integer(4) :: pblkMapSize
!				
				integer, device, allocatable, dimension(:) :: poffset
				integer(4) :: poffsetSize
!				
				integer, device, allocatable, dimension(:) :: pnelems
				integer(4) :: pnelemsSize
!				
				integer, device, allocatable, dimension(:) :: pnthrcol
				integer(4) :: pnthrcolSize
!				
				integer, device, allocatable, dimension(:) :: pthrcol
				integer(4) :: pthrcolSize
!
!				! variables for marshalling data from host to device memory and back
!				integer(4) :: arg0Size, arg2Size, arg3Size, arg4Size, arg5Size
!
				real(8), dimension(:), allocatable, device :: argument0
				real(8), dimension(:), allocatable, device :: argument2
				real(8), dimension(:), allocatable, device :: argument3
				real(8), dimension(:), allocatable, device :: argument4
!
!				! the type of the following argument is derived from the main airfoil program
				integer(4), dimension(:), allocatable, device :: argument5
!				
!				! sizes of variables passed to kernel are all encapsulated inside a single struct
!				type(varSizes_bres_calc), device :: argSizes
!				
	
				! profiling
				integer :: istat
				type (cudaEvent) :: startKernelTime, stopKernelTime, startHostTime, stopHostTime
				real(4) :: tmpHostTime

				! create events
				istat = cudaEventCreate(startKernelTime)
				istat = cudaEventCreate(stopKernelTime)
				istat = cudaEventCreate(startHostTime)
				istat = cudaEventCreate(stopHostTime)
				
				istat = cudaEventRecord ( startHostTime, 0 )

				if ( isKernelInputDataGenerated .eq. .false. ) then
					
!					isKernelInputDataGenerated = .true.

					! filling up variables for building the plan
					args(1) = arg0%index
					args(2) = arg1%index
					args(3) = arg2%index
					args(4) = arg3%index
					args(5) = arg4%index
					args(6) = arg5%index
				
					idxs(1) = idx0
					idxs(2) = idx1
					idxs(3) = idx2
					idxs(4) = idx3
					idxs(5) = idx4
					idxs(6) = idx5
					
					! when passing from OP2 Fortran to OP2 C++ we have to decrement the idx values (not 1->N, but 0->N-1)
					! except -1 which indicates OP_ID or OP_GBL
					do iter = 1, 6
						if ( idxs(iter) /= -1 ) idxs(iter) = idxs(iter) - 1 
					end do

					maps(1) = map0%index
					maps(2) = map1%index
					maps(3) = map2%index
					maps(4) = map3%index
					maps(5) = map4%index
					maps(6) = map5%index

					accs(1) = access0
					accs(2) = access1
					accs(3) = access2
					accs(4) = access3
					accs(5) = access4
					accs(6) = access5


					! Compiler: generate this information by analysing the arguments
					argsNumber = 6
					indsNumber = 4 ! warning: this means the number of op_dat accessed indirectly, not the number of arguments!!
				
					inds(1) = 0
					inds(2) = 0
					inds(3) = 1
					inds(4) = 2
					inds(5) = 3
					inds(6) = -1



					! get the plan
					planRet = cplan ( subroutineName, set%index, argsNumber, args, idxs, maps, accs, indsNumber, inds )  		

					
					
					call bres_calc_initialiseConstants()

				end if
				
					! stage in of input arguments (transfer pointers + copy from host to device memory)
		
					! 1. transfer C pointers to Fortran pointers
					arg0Size = arg0%dim * arg0%set%size
					call c_f_pointer ( arg0%dat_d, argument0, (/arg0Size/) )

					arg2Size = arg2%dim * arg2%set%size
					call c_f_pointer ( arg2%dat_d, argument2, (/arg2Size/) )
					
					arg3Size = arg3%dim * arg3%set%size
					call c_f_pointer ( arg3%dat_d, argument3, (/arg3Size/) )

					arg4Size = arg4%dim * arg4%set%size
					call c_f_pointer ( arg4%dat_d, argument4, (/arg4Size/) )
					
					arg5Size = arg5%dim * arg5%set%size
					call c_f_pointer ( arg5%dat_d, argument5, (/arg5Size/) )
				
				
									! convert arguments and plan data to Fortran pointers (not a copy!)
					! Typically, first compute size, then transform pointer
					
					! transform the returned C pointer to a type(op_plan) variable
					call c_f_pointer ( planRet, actualPlan )		
					
					! convert nindirect  used to generate the pindMapsSize array of sizes
					call c_f_pointer ( actualPlan%nindirect, pnindirect, (/indsNumber/) )
						
					! convert pindMaps: there are indsNumber ind_maps
					call c_f_pointer ( actualPlan%ind_maps, pindMaps, (/indsNumber/) )
					
					! convert first position of the pindMaps array (the size is stored in the corresponding pnindirect position)
					call c_f_pointer ( pindMaps(1), pindMaps1, pnindirect(1) )
					call c_f_pointer ( pindMaps(2), pindMaps2, pnindirect(2) )
					call c_f_pointer ( pindMaps(3), pindMaps3, pnindirect(3) )
					call c_f_pointer ( pindMaps(4), pindMaps4, pnindirect(4) )
							
					! must be done for all indirect pointers: in this case 4 different arguments are accessed indirectly
					
					! convert maps in op_plan: there are argsNumber maps
					call c_f_pointer ( actualPlan%maps, pmaps, (/argsNumber/) )
					
					! convert positions in pmaps (only if the corresponding inds position is >= 0 (see op_support.cpp))
					! can't do a do-loop because I can't generate variable names
					if ( inds(1) .ge. 0 ) then
						pmaps1Size = set%size
						call c_f_pointer ( pmaps(1), pmaps1, (/pmaps1Size/) )
					end if
					
					if ( inds(2) .ge. 0 ) then
						pmaps2Size = set%size
						call c_f_pointer ( pmaps(2), pmaps2, (/pmaps2Size/) )
					end if
					
					if ( inds(3) .ge. 0 ) then
						pmaps3Size = set%size
						call c_f_pointer ( pmaps(3), pmaps3, (/pmaps3Size/) )
					end if
					
					if ( inds(4) .ge. 0 ) then
						pmaps4Size = set%size
						call c_f_pointer ( pmaps(4), pmaps4, (/pmaps4Size/) )
					end if
					
					if ( inds(5) .ge. 0 ) then
						pmaps5Size = set%size
						call c_f_pointer ( pmaps(5), pmaps5, (/pmaps5Size/) )
					end if

					if ( inds(6) .ge. 0 ) then
						pmaps6Size = set%size
						call c_f_pointer ( pmaps(6), pmaps6, (/pmaps6Size/) )
					end if


					! converting ncolblk field to fortran variable
					call c_f_pointer ( actualPlan%ncolblk, ncolblk, (/set%size/) )
					
					! ind_sizes field has nblocks*indsNumber size
					pindSizesSize = actualPlan%nblocks * indsNumber
					call c_f_pointer ( actualPlan%ind_sizes, pindSizes, (/pindSizesSize/) )
						
					! ind_offset field has the same dimension of ind_sizes
					pindOffsSize = pindSizesSize
					call c_f_pointer ( actualPlan%ind_offs, pindOffs, (/pindOffsSize/) )
						
					! blkmap field has dimension nblocks
					pblkMapSize = actualPlan%nblocks
					call c_f_pointer ( actualPlan%blkmap, pblkMap, (/pblkMapSize/) )
						
					! offset field has dimension nblocks
					poffsetSize = actualPlan%nblocks
					call c_f_pointer ( actualPlan%offset, poffset, (/poffsetSize/) )
					
					! nelems field has dimension nblocks
					pnelemsSize = actualPlan%nblocks
					call c_f_pointer ( actualPlan%nelems, pnelems, (/pnelemsSize/) )

					! nthrcol field has dimension nblocks
					pnthrcolSize = actualPlan%nblocks
					call c_f_pointer ( actualPlan%nthrcol, pnthrcol, (/pnthrcolSize/) )
					
					! thrcol field has dimension set%size
					pthrcolSize = set%size
					call c_f_pointer ( actualPlan%thrcol, pthrcol, (/pthrcolSize/) )

					blockOffset = 0

				
				
				if ( isKernelInputDataGenerated .eq. .false. ) then
					
					isKernelInputDataGenerated = .true.

					! sizes are compacted in a single struct, to save parameter space (notice that names are
					! reflecting the formal parameters names and not actual ones)
					argSizes%pindArg0Size = arg0Size
					argSizes%pindArg0MapsSize = pnindirect(1)
					argSizes%pindArg1Size = arg2Size
					argSizes%pindArg1MapsSize = pnindirect(2)
					argSizes%pindArg2Size = arg3Size
					argSizes%pindArg2MapsSize = pnindirect(3)
					argSizes%pindArg3Size = arg4Size
					argSizes%pindArg3MapsSize = pnindirect(4)
					argSizes%parg0MapsSize = pMaps1Size
					argSizes%parg1MapsSize = pMaps2Size
					argSizes%parg2MapsSize = pMaps3Size
					argSizes%parg3MapsSize = pMaps4Size
					argSizes%parg4MapsSize = pMaps5Size
					argSizes%parg5DatDSize = arg5Size
					argSizes%pindArgSizesSize = pindSizesSize
					argSizes%pindArgOffsSize = pindOffsSize
					argSizes%pblkMapSize = pblkMapSize
					argSizes%pOffsetSize = poffsetSize
					argSizes%pNelemsSize = pnelemsSize
					argSizes%pNcolorsSize = pnthrcolSize
					argSizes%pColorsSize = pthrcolSize
					
				end if

				
				istat = cudaEventRecord ( stopHostTime, 0 )
				istat = cudaEventSynchronize ( stopHostTime )
				istat = cudaEventElapsedTime ( tmpHostTime, startHostTime, stopHostTime )

				op_par_loop_bres_calc%hostTime = 0
				op_par_loop_bres_calc%hostTime = op_par_loop_bres_calc%hostTime + tmpHostTime
				tmpHostTime = 0

				istat = cudaEventRecord ( startKernelTime, 0 )
				
				! execute the plan
				do col = 0, (actualPlan%ncolors-1)
					
					nblocks = ncolblk(col+1) !+1 is needed because ncolblk is indexed from 1:set%size and not from 0:set%size-1
					nthread = FOP_BLOCK_SIZE
					nshared = actualPlan%nshared

!					print *, 'col = ', col, nblocks, nthread, nshared

					! call the main kernel (I need to add the variable sizes, otherwise we would get sigsegv in copy back)
					call op_cuda_bres_calc <<< nblocks, nthread, nshared >>> ( argSizes, &
																																		 argument0, pindMaps1, &
																																		 argument2, pindMaps2, &
																																		 argument3, pindMaps3, &
																																		 argument4, pindMaps4, &
																																		 pMaps1, &
																																		 pMaps2, &
																																		 pMaps3, &
																																		 pMaps4, &
																																		 pMaps5, &
																																		 argument5, &
																																		 pindSizes, &
																																		 pindOffs, &
																																		 blockOffset, &
																																		 pblkMap, &
																																		 poffset, &
																																		 pnelems, &
																																		 pnthrcol, &
																																		 pthrcol &
																																	 )
																																		
					! wait for the threads on device to terminate execution
					threadSynchRet = cudaThreadSynchronize()
				
					blockOffset = blockOffset + nblocks
				
				end do

				istat = cudaEventRecord ( stopKernelTime, 0 )
				istat = cudaEventSynchronize ( stopKernelTime )
				istat = cudaEventElapsedTime ( op_par_loop_bres_calc%kernelTime, startKernelTime, stopKernelTime )

				istat = cudaEventRecord ( startHostTime, 0 )
				! empty code here...
				istat = cudaEventRecord ( stopHostTime, 0 )
				istat = cudaEventSynchronize ( stopHostTime )
				istat = cudaEventElapsedTime ( tmpHostTime, startHostTime, stopHostTime )

				op_par_loop_bres_calc%hostTime = op_par_loop_bres_calc%hostTime + tmpHostTime	

		end function op_par_loop_bres_calc

end module bres_calc_cuda_module