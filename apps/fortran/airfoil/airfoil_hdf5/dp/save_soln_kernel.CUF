!
! auto-generated by op2.py
!

MODULE SAVE_SOLN_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! save_solnvariable declarations

INTEGER(kind=4), CONSTANT :: direct_stride_OP2CONSTANT
INTEGER(kind=4) :: direct_stride_OP2HOST


#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

attributes (host) &
#include "save_soln.inc"
attributes (device) &
SUBROUTINE save_soln_gpu(q,qold)
  IMPLICIT NONE

  REAL(kind=8), INTENT(IN) :: q(4)
  REAL(kind=8) :: qold(4)
  INTEGER(kind=4) :: i

  DO i = 1, 4
    OP2_SOA(qold,i, direct_stride_OP2CONSTANT) = OP2_SOA(q,i, direct_stride_OP2CONSTANT)
  END DO
END SUBROUTINE



! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_save_soln( &
  & opDat1Devicesave_soln, &
  & opDat2Devicesave_soln, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE, INTENT(IN) :: opDat1Devicesave_soln(*)
  real(8), DEVICE :: opDat2Devicesave_soln(*)


  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL save_soln_gpu( &
    & opDat1Devicesave_soln(1 + i1), &
    & opDat2Devicesave_soln(1 + i1) &
    & )
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE save_soln_host( userSubroutine, set, &
  & opArg1, &
  & opArg2 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2

  IF (getHybridGPU().EQ.1) THEN
    CALL save_soln_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE save_soln_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2

  TYPE ( op_arg ) , DIMENSION(2) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, POINTER :: opDat1Devicesave_soln
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat2Devicesave_soln

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20
  REAL(kind=4) :: dataTransfer

  INTEGER(kind=4), SAVE :: calledTimes=0
  INTEGER(kind=4) :: istat

  numberOfOpDats = 2

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2

  returnSetKernelTiming = setKernelTime(0 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000_4,0.00000_4, 0)
  IF ((calledTimes.EQ.0).OR.(direct_stride_OP2HOST.NE.getSetSizeFromOpArg(opArg1))) THEN
    direct_stride_OP2HOST = getSetSizeFromOpArg(opArg1)
    direct_stride_OP2CONSTANT = direct_stride_OP2HOST
  END IF
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


  blocksPerGrid = 600
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)


  CALL c_f_pointer(opArg1%data_d,opDat1Devicesave_soln,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicesave_soln,(/opDat2Cardinality/))


  CALL op_cuda_save_soln <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & opDat1Devicesave_soln, &
  & opDat2Devicesave_soln, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  dataTransfer = 0.0
  dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
  dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
  returnSetKernelTiming = setKernelTime(0 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, dataTransfer, 0.00000_4, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE

END MODULE
