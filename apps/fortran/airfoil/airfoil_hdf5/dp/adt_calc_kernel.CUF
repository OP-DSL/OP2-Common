!
! auto-generated by op2.py on 2013-08-21 13:15
!

MODULE ADT_CALC_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! adt_calcvariable declarations


TYPE ( c_ptr )  :: planRet_adt_calc


CONTAINS

attributes (host) &
#include "adt_calc.inc"
attributes (device) &
#include "adt_calc.inc2"


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_adt_calc( &
  & opDat1Deviceadt_calc, &
  & opDat1Map, &
  & opDat5Deviceadt_calc, &
  & opDat6Deviceadt_calc, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Deviceadt_calc(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat1Map(*)
  real(8), DEVICE, INTENT(IN) :: opDat5Deviceadt_calc(*)
  real(8), DEVICE :: opDat6Deviceadt_calc(*)

  INTEGER(kind=4) map1idx, map2idx, map3idx, map4idx

  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE, INTENT(IN) :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize


  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i3


  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)

  END IF

  CALL syncthreads()

  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    IF (i1 < numberOfActiveThreads) THEN
      i3 = i1
      map1idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 0)
      map2idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 1)
      map3idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 2)
      map4idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 3)

! kernel call
      CALL adt_calc_gpu( &
      & opDat1Deviceadt_calc(1 + map1idx * (2):     map1idx * (2) + 2), &
      & opDat1Deviceadt_calc(1 + map2idx * (2):     map2idx * (2) + 2), &
      & opDat1Deviceadt_calc(1 + map3idx * (2):     map3idx * (2) + 2), &
      & opDat1Deviceadt_calc(1 + map4idx * (2):     map4idx * (2) + 2), &
      & opDat5Deviceadt_calc((i3 + threadBlockOffset) * (4) +1:(i3 + threadBlockOffset) * (4) + (4)), &
      & opDat6Deviceadt_calc((i3 + threadBlockOffset) * (1) +1) &
      & )

    END IF
    i1 = i1 + blockDim%x
  END DO



END SUBROUTINE

attributes (host) SUBROUTINE adt_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6 )

  IMPLICIT NONE
  character(len=8), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6

  IF (getHybridGPU()) THEN
    CALL adt_calc_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6 )
  ELSE
    CALL adt_calc_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE adt_calc_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6 )

  IMPLICIT NONE
  character(len=8), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6

  TYPE ( op_arg ) , DIMENSION(6) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceadt_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap1Deviceadt_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Deviceadt_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Deviceadt_calc

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opMap1Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_adt_calc

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:6) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:6) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:6) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:6) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:6) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes

  INTEGER(kind=4) :: istat

  numberOfOpDats = 6

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6

  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call date_and_time(values=timeArrayStart)
  startTime = 1.00000 * timeArrayStart(8) + &
  & 1000.00 * timeArrayStart(7) + &
  & 60000 * timeArrayStart(6) + &
  & 3600000 * timeArrayStart(5)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 0
  indirectionDescriptorArray(4) = 0
  indirectionDescriptorArray(5) = -1
  indirectionDescriptorArray(6) = -1

  numberOfIndirectOpDats = 1

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_adt_calc = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,2)

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opMap1Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg1)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceadt_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg1%map_data_d,opMap1Deviceadt_calc,(/opMap1Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Deviceadt_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Deviceadt_calc,(/opDat6Cardinality/))

  CALL c_f_pointer(planRet_adt_calc,actualPlan_adt_calc)
  CALL c_f_pointer(actualPlan_adt_calc%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%blkmap_d,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%offset_d,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%nelems_d,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_adt_calc%thrcol,pthrcol,(/pthrcolSize/))


  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_adt_calc%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_adt_calc%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_adt_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & opDat1Deviceadt_calc, &
    & opMap1Deviceadt_calc, &
    & opDat5Deviceadt_calc, &
    & opDat6Deviceadt_calc, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol, &
    & set%setPtr%size+set%setPtr%exec_size, blockOffset)

    blockOffset = blockOffset + blocksPerGrid
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call date_and_time(values=timeArrayEnd)
  endTime = 1.00000 * timeArrayEnd(8) + &
  1000 * timeArrayEnd(7) + &
  60000 * timeArrayEnd(6) + &
  3600000 * timeArrayEnd(5)

  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & (endTime-startTime) / 1000.00, actualPlan_adt_calc%transfer,actualPlan_adt_calc%transfer2, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_adt_calc( &
  & opDat1Local, &
  & opDat5Local, &
  & opDat6Local, &
  & opDat1Map, &
  & opDat1MapDim, &
  & bottom,top)
  real(8) opDat1Local(2,*)
  real(8) opDat5Local(4,*)
  real(8) opDat6Local(1,*)
  INTEGER(kind=4) opDat1Map(*)
  INTEGER(kind=4) opDat1MapDim
  INTEGER(kind=4) bottom,top,i1
  INTEGER(kind=4) map1idx, map2idx, map3idx, map4idx

  DO i1 = bottom, top - 1, 1
    map1idx = opDat1Map(1 + i1 * opDat1MapDim + 0)+1
    map2idx = opDat1Map(1 + i1 * opDat1MapDim + 1)+1
    map3idx = opDat1Map(1 + i1 * opDat1MapDim + 2)+1
    map4idx = opDat1Map(1 + i1 * opDat1MapDim + 3)+1
! kernel call
  CALL adt_calc( &
    & opDat1Local(1,map1idx), &
    & opDat1Local(1,map2idx), &
    & opDat1Local(1,map3idx), &
    & opDat1Local(1,map4idx), &
    & opDat5Local(1,i1+1), &
    & opDat6Local(1,i1+1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE adt_calc_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6

  type ( op_arg ) , DIMENSION(6) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat1Map
  INTEGER(kind=4) :: opDat1MapDim
  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat6Local
  INTEGER(kind=4) :: opDat6Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  LOGICAL :: firstTime_adt_calc = .TRUE.
  type ( c_ptr )  :: planRet_adt_calc
  type ( op_plan ) , POINTER :: actualPlan_adt_calc
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk_adt_calc
  INTEGER(kind=4), POINTER, DIMENSION(:) :: blkmap_adt_calc
  INTEGER(kind=4), POINTER, DIMENSION(:) :: nelems_adt_calc
  INTEGER(kind=4), POINTER, DIMENSION(:) :: offset_adt_calc
  INTEGER(kind=4), DIMENSION(1:6) :: indirectionDescriptorArray
  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: nblocks
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockID
  INTEGER(kind=4) :: nelem
  INTEGER(kind=4) :: offset_b


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 6

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6

  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call date_and_time(values=timeArrayStart)
  startTime = 1.00000 * timeArrayStart(8) + &
  & 1000.00 * timeArrayStart(7) + &
  & 60000 * timeArrayStart(6) + &
  & 3600000 * timeArrayStart(5)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

#ifdef OP_PART_SIZE_1
  partitionSize = OP_PART_SIZE_1
#else
  partitionSize = 0
#endif

#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif
    indirectionDescriptorArray(1) = 0
    indirectionDescriptorArray(2) = 0
    indirectionDescriptorArray(3) = 0
    indirectionDescriptorArray(4) = 0
    indirectionDescriptorArray(5) = -1
    indirectionDescriptorArray(6) = -1

    numberOfIndirectOpDats = 1

    planRet_adt_calc = FortranPlanCaller( &
    & userSubroutine//C_NULL_CHAR, &
    & set%setCPtr, &
    & partitionSize, &
    & numberOfOpDats, &
    & opArgArray, &
    & numberOfIndirectOpDats, &
    & indirectionDescriptorArray,2)

    CALL c_f_pointer(planRet_adt_calc,actualPlan_adt_calc)
    CALL c_f_pointer(actualPlan_adt_calc%ncolblk,ncolblk_adt_calc,(/actualPlan_adt_calc%ncolors_core/))
    CALL c_f_pointer(actualPlan_adt_calc%blkmap,blkmap_adt_calc,(/actualPlan_adt_calc%nblocks/))
    CALL c_f_pointer(actualPlan_adt_calc%offset,offset_adt_calc,(/actualPlan_adt_calc%nblocks/))
    CALL c_f_pointer(actualPlan_adt_calc%nelems,nelems_adt_calc,(/actualPlan_adt_calc%nblocks/))

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat1MapDim = getMapDimFromOpArg(opArg1)
    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg1%map_data,opDat1Map,(/opSetCore%size*opDat1MapDim/))
    CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
    CALL c_f_pointer(opArg6%data,opDat6Local,(/opDat6Cardinality/))


    blockOffset = 0

    DO i1 = 0, actualPlan_adt_calc%ncolors - 1, 1
      IF (i1 .EQ. actualPlan_adt_calc%ncolors_core) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      nblocks = ncolblk_adt_calc(i1 + 1)
      !$OMP PARALLEL DO private (threadID, blockID, nelem, offset_b)
      DO i2 = 0, nblocks - 1, 1
        threadID = omp_get_thread_num()
        blockID = blkmap_adt_calc(i2+blockOffset+1)
        nelem = nelems_adt_calc(blockID+1)
        offset_b = offset_adt_calc(blockID+1)
        CALL op_wrap_adt_calc( &
        & opDat1Local, &
        & opDat5Local, &
        & opDat6Local, &
        & opDat1Map, &
        & opDat1MapDim, &
        & offset_b, offset_b+nelem)
      END DO
      !$OMP END PARALLEL DO
      blockOffset = blockOffset + nblocks
    END DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call date_and_time(values=timeArrayEnd)
    endTime = 1.00000 * timeArrayEnd(8) + &
    1000 * timeArrayEnd(7) + &
    60000 * timeArrayEnd(6) + &
    3600000 * timeArrayEnd(5)

    returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
    & (endTime-startTime) / 1000.00, actualPlan_adt_calc%transfer,actualPlan_adt_calc%transfer2, 1)
  END SUBROUTINE
  END MODULE
