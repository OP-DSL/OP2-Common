//
// auto-generated by op2.py
//

//user function
__device__ void res_calc1_gpu( double *q1,
                     double *q2,
                     double *res1, double *res2) {

  double r1[1], r2[1];
  for(int i = 0; i < 1; i++){
      r1[i] = q1[i];
      r2[i] = q2[i];
      res1[i] += r1[i] + 1;
      res2[i] += r2[i] - 1;


  }

}

// CUDA kernel function
__global__ void op_cuda_res_calc1(
  const double *__restrict ind_arg0,
  double *__restrict ind_arg1,
  const int *__restrict opDat0Map,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg2_l[1];
    for ( int d=0; d<1; d++ ){
      arg2_l[d] = ZERO_double;
    }
    double arg3_l[1];
    for ( int d=0; d<1; d++ ){
      arg3_l[d] = ZERO_double;
    }
    int map0idx;
    int map1idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];

    //user-supplied kernel call
    res_calc1_gpu(ind_arg0+map0idx*1,
              ind_arg0+map1idx*1,
              arg2_l,
              arg3_l);
    atomicAdd(&ind_arg1[0+map0idx*1],arg2_l[0]);
    atomicAdd(&ind_arg1[0+map1idx*1],arg3_l[0]);
  }
}


//host stub function
void op_par_loop_res_calc1(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  int nargs = 4;
  op_arg args[4];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;


  int    ninds   = 2;
  int    inds[4] = {0,0,1,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: res_calc1\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_0
      int nthread = OP_BLOCK_SIZE_0;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_res_calc1<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (double *)arg2.data_d,
        arg0.map_data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].time     += wall_t2 - wall_t1;
}
