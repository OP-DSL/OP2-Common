//
// auto-generated by op2.py
//

void res_calc2_omp4_kernel(
  int *map0,
  int map0size,
  int *map2,
  int map2size,
  double *data0,
  int dat0size,
  double *data2,
  int dat2size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) \
    map(to:col_reord[0:set_size1],map0[0:map0size],map2[0:map2size],data0[0:dat0size],data2[0:dat2size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    map0idx = map0[n_op + set_size1 * 0];
    map1idx = map0[n_op + set_size1 * 1];
    map2idx = map2[n_op + set_size1 * 0];
    map3idx = map2[n_op + set_size1 * 1];

    //variable mapping
    double *res1 = &data0[1 * map0idx];
    double *res2 = &data0[1 * map1idx];
    double *node1 = &data2[2 * map2idx];
    double *node2 = &data2[2 * map3idx];

    //inline function
    
    for(int i = 0; i < 2; i++){



        node1[i] += res1[0] + 1;
        node2[i] += res2[0] - 1;
    }
    //end inline func
  }

}
