//
// auto-generated by op2.py
//

//user function
//user function

void update_omp4_kernel(float *data0, int dat0size, float *data1, int dat1size,
                        float *data2, int dat2size, float *arg3, float *arg4,
                        int count, int num_teams, int nthread);

// host stub function
void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  float*arg3h = (float *)arg3.data;
  float*arg4h = (float *)arg4.data;
  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(1);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  update");
  }

  op_mpi_halo_exchanges_cuda(set, nargs, args);

  #ifdef OP_PART_SIZE_1
    int part_size = OP_PART_SIZE_1;
  #else
    int part_size = OP_part_size;
  #endif
  #ifdef OP_BLOCK_SIZE_1
    int nthread = OP_BLOCK_SIZE_1;
  #else
    int nthread = OP_block_size;
  #endif

  float arg3_l = arg3h[0];
  float arg4_l = arg4h[0];

  if (set->size >0) {

    //Set up typed device pointers for OpenMP

    float* data0 = (float*)arg0.data_d;
    int dat0size = getSetSizeFromOpArg(&arg0) * arg0.dat->dim;
    float* data1 = (float*)arg1.data_d;
    int dat1size = getSetSizeFromOpArg(&arg1) * arg1.dat->dim;
    float* data2 = (float*)arg2.data_d;
    int dat2size = getSetSizeFromOpArg(&arg2) * arg2.dat->dim;
    update_omp4_kernel(data0, dat0size, data1, dat1size, data2, dat2size,
                       &arg3_l, &arg4_l, set->size,
                       part_size != 0 ? (set->size - 1) / part_size + 1
                                      : (set->size - 1) / nthread,
                       nthread);
  }

  // combine reduction data
  arg3h[0] = arg3_l;
  op_mpi_reduce_float(&arg3,arg3h);
  arg4h[0]  = MAX(arg4h[0],arg4_l);
  op_mpi_reduce_float(&arg4,arg4h);
  op_mpi_set_dirtybit_cuda(nargs, args);

  if (OP_diags>1) deviceSync();
  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[1].time     += wall_t2 - wall_t1;
  OP_kernels[1].transfer += (float)set->size * arg0.size;
  OP_kernels[1].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[1].transfer += (float)set->size * arg2.size * 2.0f;
}
