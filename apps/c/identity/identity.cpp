// Generated by the Manycore Form Compiler.
// https://github.com/gmarkall/manycore_form_compiler


#ifdef __EDG__

#include "op_lib_cpp.h"

#else

#include "op_lib_cpp.h"
#include "op_seq_mat.h"

#endif

void a_0(double* localTensor, double* dt, double* c0[2], int i_r_0, int i_r_1)
{
  const double CG1[3][6] = { {  0.0915762135097707, 0.0915762135097707,
                               0.8168475729804585, 0.4459484909159649,
                               0.4459484909159649, 0.1081030181680702 },
                             {  0.0915762135097707, 0.8168475729804585,
                               0.0915762135097707, 0.4459484909159649,
                               0.1081030181680702, 0.4459484909159649 },
                             {  0.8168475729804585, 0.0915762135097707,
                               0.0915762135097707, 0.1081030181680702,
                               0.4459484909159649, 0.4459484909159649 } };
  const double d_CG1[3][6][2] = { { {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. } },

                                  { {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. } },

                                  { { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. } } };
  const double w[6] = {  0.0549758718276609, 0.0549758718276609,
                         0.0549758718276609, 0.1116907948390057,
                         0.1116907948390057, 0.1116907948390057 };
  double c_q0[6][2][2];
  for(int i_g = 0; i_g < 6; i_g++)
  {
    for(int i_d_0 = 0; i_d_0 < 2; i_d_0++)
    {
      for(int i_d_1 = 0; i_d_1 < 2; i_d_1++)
      {
        c_q0[i_g][i_d_0][i_d_1] = 0.0;
        for(int q_r_0 = 0; q_r_0 < 3; q_r_0++)
        {
          c_q0[i_g][i_d_0][i_d_1] += c0[q_r_0][i_d_0] * d_CG1[q_r_0][i_g][i_d_1];
        }
      }
    }
  }
  for(int i_g = 0; i_g < 6; i_g++)
  {
    double ST0 = 0.0;
    ST0 += CG1[i_r_0][i_g] * CG1[i_r_1][i_g] * (c_q0[i_g][0][0] * c_q0[i_g][1][1] + -1 * c_q0[i_g][0][1] * c_q0[i_g][1][0]);
    localTensor[0] += ST0 * w[i_g];
  }
}


void L_0(double** localTensor, double* dt, double* c0[2], double* c1[1])
{
  const double CG1[3][6] = { {  0.0915762135097707, 0.0915762135097707,
                               0.8168475729804585, 0.4459484909159649,
                               0.4459484909159649, 0.1081030181680702 },
                             {  0.0915762135097707, 0.8168475729804585,
                               0.0915762135097707, 0.4459484909159649,
                               0.1081030181680702, 0.4459484909159649 },
                             {  0.8168475729804585, 0.0915762135097707,
                               0.0915762135097707, 0.1081030181680702,
                               0.4459484909159649, 0.4459484909159649 } };
  const double d_CG1[3][6][2] = { { {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. },
                                   {  1., 0. } },

                                  { {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. },
                                   {  0., 1. } },

                                  { { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. },
                                   { -1.,-1. } } };
  const double w[6] = {  0.0549758718276609, 0.0549758718276609,
                         0.0549758718276609, 0.1116907948390057,
                         0.1116907948390057, 0.1116907948390057 };
  double c_q1[6];
  double c_q0[6][2][2];
  for(int i_g = 0; i_g < 6; i_g++)
  {
    c_q1[i_g] = 0.0;
    for(int q_r_0 = 0; q_r_0 < 3; q_r_0++)
    {
      c_q1[i_g] += c1[q_r_0][0] * CG1[q_r_0][i_g];
    }
    for(int i_d_0 = 0; i_d_0 < 2; i_d_0++)
    {
      for(int i_d_1 = 0; i_d_1 < 2; i_d_1++)
      {
        c_q0[i_g][i_d_0][i_d_1] = 0.0;
        for(int q_r_0 = 0; q_r_0 < 3; q_r_0++)
        {
          c_q0[i_g][i_d_0][i_d_1] += c0[q_r_0][i_d_0] * d_CG1[q_r_0][i_g][i_d_1];
        }
      }
    }
  }
  for(int i_r_0 = 0; i_r_0 < 3; i_r_0++)
  {
    for(int i_g = 0; i_g < 6; i_g++)
    {
      double ST1 = 0.0;
      ST1 += CG1[i_r_0][i_g] * c_q1[i_g] * (c_q0[i_g][0][0] * c_q0[i_g][1][1] + -1 * c_q0[i_g][0][1] * c_q0[i_g][1][0]);
      localTensor[i_r_0][0] += ST1 * w[i_g];
    }
  }
}

int main(int argc, char ** argv)
{
  op_init(0, 0, 2);
  op_set Coordinate_elements = op_decl_set(40, "CoordinateMesh_elements");
  op_set Coordinate_dofs = op_decl_set(58, "Coordinate_dofs");
  op_set Tracer_dofs = op_decl_set(29, "Tracer_dofs");
  int * x_map = (int *)malloc(40 * 3 * sizeof(int));
  x_map[0] = 13;
  x_map[1] = 21;
  x_map[2] = 17;
  x_map[3] = 4;
  x_map[4] = 22;
  x_map[5] = 18;
  x_map[6] = 10;
  x_map[7] = 23;
  x_map[8] = 19;
  x_map[9] = 7;
  x_map[10] = 24;
  x_map[11] = 20;
  x_map[12] = 12;
  x_map[13] = 17;
  x_map[14] = 23;
  x_map[15] = 9;
  x_map[16] = 19;
  x_map[17] = 24;
  x_map[18] = 15;
  x_map[19] = 18;
  x_map[20] = 21;
  x_map[21] = 6;
  x_map[22] = 20;
  x_map[23] = 22;
  x_map[24] = 4;
  x_map[25] = 5;
  x_map[26] = 22;
  x_map[27] = 13;
  x_map[28] = 14;
  x_map[29] = 21;
  x_map[30] = 7;
  x_map[31] = 8;
  x_map[32] = 24;
  x_map[33] = 10;
  x_map[34] = 11;
  x_map[35] = 23;
  x_map[36] = 14;
  x_map[37] = 15;
  x_map[38] = 21;
  x_map[39] = 5;
  x_map[40] = 6;
  x_map[41] = 22;
  x_map[42] = 11;
  x_map[43] = 12;
  x_map[44] = 23;
  x_map[45] = 8;
  x_map[46] = 9;
  x_map[47] = 24;
  x_map[48] = 17;
  x_map[49] = 21;
  x_map[50] = 16;
  x_map[51] = 18;
  x_map[52] = 16;
  x_map[53] = 21;
  x_map[54] = 18;
  x_map[55] = 22;
  x_map[56] = 16;
  x_map[57] = 16;
  x_map[58] = 22;
  x_map[59] = 20;
  x_map[60] = 17;
  x_map[61] = 16;
  x_map[62] = 23;
  x_map[63] = 19;
  x_map[64] = 23;
  x_map[65] = 16;
  x_map[66] = 19;
  x_map[67] = 16;
  x_map[68] = 24;
  x_map[69] = 16;
  x_map[70] = 20;
  x_map[71] = 24;
  x_map[72] = 13;
  x_map[73] = 17;
  x_map[74] = 26;
  x_map[75] = 4;
  x_map[76] = 18;
  x_map[77] = 25;
  x_map[78] = 10;
  x_map[79] = 19;
  x_map[80] = 28;
  x_map[81] = 7;
  x_map[82] = 20;
  x_map[83] = 27;
  x_map[84] = 12;
  x_map[85] = 26;
  x_map[86] = 17;
  x_map[87] = 9;
  x_map[88] = 28;
  x_map[89] = 19;
  x_map[90] = 15;
  x_map[91] = 25;
  x_map[92] = 18;
  x_map[93] = 6;
  x_map[94] = 27;
  x_map[95] = 20;
  x_map[96] = 0;
  x_map[97] = 27;
  x_map[98] = 6;
  x_map[99] = 3;
  x_map[100] = 25;
  x_map[101] = 15;
  x_map[102] = 1;
  x_map[103] = 28;
  x_map[104] = 9;
  x_map[105] = 2;
  x_map[106] = 26;
  x_map[107] = 12;
  x_map[108] = 2;
  x_map[109] = 13;
  x_map[110] = 26;
  x_map[111] = 3;
  x_map[112] = 4;
  x_map[113] = 25;
  x_map[114] = 1;
  x_map[115] = 10;
  x_map[116] = 28;
  x_map[117] = 0;
  x_map[118] = 7;
  x_map[119] = 27;
  op_map Coordinate_element_dofs = op_decl_map(Coordinate_elements, Coordinate_dofs, 3, x_map, "Coordinate_element_dofs");
  double * x = (double *)malloc(29 * 2 * sizeof(double));
  x[0] = 0;
  x[1] = 0;
  x[2] = 1;
  x[3] = 0;
  x[4] = 1;
  x[5] = 1;
  x[6] = 0;
  x[7] = 1;
  x[8] = 0;
  x[9] = 0.75;
  x[10] = 0;
  x[11] = 0.5;
  x[12] = 0;
  x[13] = 0.25;
  x[14] = 0.25;
  x[15] = 0;
  x[16] = 0.5;
  x[17] = 0;
  x[18] = 0.75;
  x[19] = 0;
  x[20] = 1;
  x[21] = 0.25;
  x[22] = 1;
  x[23] = 0.5;
  x[24] = 1;
  x[25] = 0.75;
  x[26] = 0.75;
  x[27] = 1;
  x[28] = 0.5;
  x[29] = 1;
  x[30] = 0.25;
  x[31] = 1;
  x[32] = 0.501095;
  x[33] = 0.501095;
  x[34] = 0.721478;
  x[35] = 0.721478;
  x[36] = 0.278522;
  x[37] = 0.721478;
  x[38] = 0.721478;
  x[39] = 0.278522;
  x[40] = 0.278644;
  x[41] = 0.278644;
  x[42] = 0.500122;
  x[43] = 0.80926;
  x[44] = 0.190997;
  x[45] = 0.500135;
  x[46] = 0.80926;
  x[47] = 0.500122;
  x[48] = 0.500135;
  x[49] = 0.190997;
  x[50] = 0.141906;
  x[51] = 0.858094;
  x[52] = 0.858094;
  x[53] = 0.858094;
  x[54] = 0.141927;
  x[55] = 0.141927;
  x[56] = 0.858094;
  x[57] = 0.141906;
  op_dat Coordinate = op_decl_dat(Coordinate_dofs, 2, "double", x, "Coordinate");
  int * t_map = (int *)malloc(40 * 3 * sizeof(int));
  t_map[0] = 13;
  t_map[1] = 21;
  t_map[2] = 17;
  t_map[3] = 4;
  t_map[4] = 22;
  t_map[5] = 18;
  t_map[6] = 10;
  t_map[7] = 23;
  t_map[8] = 19;
  t_map[9] = 7;
  t_map[10] = 24;
  t_map[11] = 20;
  t_map[12] = 12;
  t_map[13] = 17;
  t_map[14] = 23;
  t_map[15] = 9;
  t_map[16] = 19;
  t_map[17] = 24;
  t_map[18] = 15;
  t_map[19] = 18;
  t_map[20] = 21;
  t_map[21] = 6;
  t_map[22] = 20;
  t_map[23] = 22;
  t_map[24] = 4;
  t_map[25] = 5;
  t_map[26] = 22;
  t_map[27] = 13;
  t_map[28] = 14;
  t_map[29] = 21;
  t_map[30] = 7;
  t_map[31] = 8;
  t_map[32] = 24;
  t_map[33] = 10;
  t_map[34] = 11;
  t_map[35] = 23;
  t_map[36] = 14;
  t_map[37] = 15;
  t_map[38] = 21;
  t_map[39] = 5;
  t_map[40] = 6;
  t_map[41] = 22;
  t_map[42] = 11;
  t_map[43] = 12;
  t_map[44] = 23;
  t_map[45] = 8;
  t_map[46] = 9;
  t_map[47] = 24;
  t_map[48] = 17;
  t_map[49] = 21;
  t_map[50] = 16;
  t_map[51] = 18;
  t_map[52] = 16;
  t_map[53] = 21;
  t_map[54] = 18;
  t_map[55] = 22;
  t_map[56] = 16;
  t_map[57] = 16;
  t_map[58] = 22;
  t_map[59] = 20;
  t_map[60] = 17;
  t_map[61] = 16;
  t_map[62] = 23;
  t_map[63] = 19;
  t_map[64] = 23;
  t_map[65] = 16;
  t_map[66] = 19;
  t_map[67] = 16;
  t_map[68] = 24;
  t_map[69] = 16;
  t_map[70] = 20;
  t_map[71] = 24;
  t_map[72] = 13;
  t_map[73] = 17;
  t_map[74] = 26;
  t_map[75] = 4;
  t_map[76] = 18;
  t_map[77] = 25;
  t_map[78] = 10;
  t_map[79] = 19;
  t_map[80] = 28;
  t_map[81] = 7;
  t_map[82] = 20;
  t_map[83] = 27;
  t_map[84] = 12;
  t_map[85] = 26;
  t_map[86] = 17;
  t_map[87] = 9;
  t_map[88] = 28;
  t_map[89] = 19;
  t_map[90] = 15;
  t_map[91] = 25;
  t_map[92] = 18;
  t_map[93] = 6;
  t_map[94] = 27;
  t_map[95] = 20;
  t_map[96] = 0;
  t_map[97] = 27;
  t_map[98] = 6;
  t_map[99] = 3;
  t_map[100] = 25;
  t_map[101] = 15;
  t_map[102] = 1;
  t_map[103] = 28;
  t_map[104] = 9;
  t_map[105] = 2;
  t_map[106] = 26;
  t_map[107] = 12;
  t_map[108] = 2;
  t_map[109] = 13;
  t_map[110] = 26;
  t_map[111] = 3;
  t_map[112] = 4;
  t_map[113] = 25;
  t_map[114] = 1;
  t_map[115] = 10;
  t_map[116] = 28;
  t_map[117] = 0;
  t_map[118] = 7;
  t_map[119] = 27;
  op_map Tracer_element_dofs = op_decl_map(Coordinate_elements, Tracer_dofs, 3, t_map, "Tracer_element_dofs");
  double * t = (double *)malloc(29 * 1 * sizeof(double));
  t[0] = -1;
  t[1] = -1;
  t[2] = -1;
  t[3] = -1;
  t[4] = -2.17941e-12;
  t[5] = 1;
  t[6] = 6.53893e-12;
  t[7] = -3.77104e-12;
  t[8] = 1;
  t[9] = 4.16308e-12;
  t[10] = -3.77104e-12;
  t[11] = 1;
  t[12] = 4.16308e-12;
  t[13] = -2.17941e-12;
  t[14] = 1;
  t[15] = 6.53893e-12;
  t[16] = -0.999953;
  t[17] = -0.0317731;
  t[18] = -0.0317731;
  t[19] = -0.0317731;
  t[20] = -0.032042;
  t[21] = 0.363796;
  t[22] = 0.362291;
  t[23] = 0.363796;
  t[24] = 0.362291;
  t[25] = -0.394571;
  t[26] = -0.394571;
  t[27] = -0.394447;
  t[28] = -0.394571;
  double dt = 0.0;
  op_dat Tracer = op_decl_dat(Tracer_dofs, 1, "double", t, "Tracer");
  op_sparsity a_sparsity = op_decl_sparsity(Tracer_element_dofs, Tracer_element_dofs, "a_sparsity");
  op_mat a_mat = op_decl_mat(a_sparsity, 1, "double", 8, "a_mat");
  op_par_loop(a_0, "a_0", op_iteration_space(Coordinate_elements, 3, 3), 
              op_arg_mat(a_mat, op_i(1), Tracer_element_dofs, op_i(2), 
                         Tracer_element_dofs, 1, "double", OP_INC), 
              op_arg_gbl(&dt, 1, "double", OP_INC), 
              op_arg_dat(Coordinate, -3, Coordinate_element_dofs, 2, 
                         "double", OP_READ));
  op_dat L_vec = op_decl_vec(Tracer, "L_vec");
  op_par_loop(L_0, "L_0", Coordinate_elements, 
              op_arg_dat(L_vec, -3, Tracer_element_dofs, 1, "double", 
                         OP_INC), 
              op_arg_gbl(&dt, 1, "double", OP_INC), 
              op_arg_dat(Coordinate, -3, Coordinate_element_dofs, 2, 
                         "double", OP_READ), 
              op_arg_dat(Tracer, -3, Tracer_element_dofs, 1, "double", 
                         OP_READ));
  op_solve(a_mat, L_vec, Tracer);
  op_free_vec(L_vec);
  op_free_mat(a_mat);
  op_fetch_data(Tracer);
  op_exit();
}

