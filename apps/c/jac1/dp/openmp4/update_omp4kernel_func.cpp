//
// auto-generated by op2.py
//

void update_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *arg3,
  double *arg4,
  int count,
  int num_teams,
  int nthread){

  double arg3_l = *arg3;
  double arg4_l = *arg4;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size]) \
    map(to: alpha_ompkernel)\
    map(tofrom: arg3_l, arg4_l) reduction(+:arg3_l) reduction(max:arg4_l)
  #pragma omp distribute parallel for schedule(static,1) reduction(+:arg3_l) reduction(max:arg4_l)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *r = &data0[1*n_op];
    double *du = &data1[1*n_op];
    double *u = &data2[1*n_op];
    double *u_sum = &arg3_l;
    double *u_max = &arg4_l;

    //inline function
    
    *u += *du + alpha_ompkernel * (*r);
    *du = 0.0f;
    *u_sum += (*u) * (*u);
    *u_max = maxfun(*u_max, *u);
    //end inline func
  }

  *arg3 = arg3_l;
  *arg4 = arg4_l;
}
