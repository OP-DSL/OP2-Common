#
# The following environment variables should be predefined:
#
# CUDA_INSTALL_PATH
# PARMETIS_INSTALL_PATH
# PTSCOTCH_INSTALL_PATH
# HDF5_INSTALL_PATH
#
# OP2_INSTALL_PATH
# OP2_COMPILER (gnu,intel,etc)
#

#
# set paths for header files and libraries
#
OP2_INC		= -I$(OP2_INSTALL_PATH)/c/include
OP2_LIB		= -L$(OP2_INSTALL_PATH)/c/lib

CUDA_INC	= -I$(CUDA_INSTALL_PATH)/include
CUDA_LIB	= -L$(CUDA_INSTALL_PATH)/lib64


ifeq ($(OP2_COMPILER),gnu)
  CPP		= g++
  CPPFLAGS	= -g -fPIC -DUNIX -Wall
#  CPPFLAGS	= -O3 -fPIC -DUNIX -Wall -Wextra
  OMPFLAGS	= -fopenmp
  MPICPP	= /usr/bin/mpiCC
  MPIFLAGS	= $(CCFLAGS)
else
ifeq ($(OP2_COMPILER),intel)
  CPP		= icpc
  CCFLAGS	= -O2 -vec-report -xSSE4.2 #-DCOMM_PERF #-DDEBUG
  CPPFLAGS	= $(CCFLAGS)
  OMPFLAGS	= -openmp -openmp-report2
  MPICPP	= mpiCC
  MPIFLAGS	= $(CCFLAGS)
else
print:
	@echo "unrecognised value for OP2_COMPILER"
endif
endif

#
# set flags for NVCC compilation and linking
#
NVCCFLAGS	= -O3 -arch=sm_20 -Xptxas=-v -use_fast_math
#NVCCFLAGS	= -g -G -arch=sm_20 -Xptxas=-v -use_fast_math


#
# partitioning software for MPI versions
#

PARMETIS_INC 	= -I$(PARMETIS_INSTALL_PATH) -DHAVE_PARMETIS
PARMETIS_LIB 	= -L$(PARMETIS_INSTALL_PATH) -lparmetis \
	       	  -L$(PARMETIS_INSTALL_PATH) -lmetis

PTSCOTCH_INC 	= -I$(PTSCOTCH_INSTALL_PATH)/include -DHAVE_PTSCOTCH
PTSCOTCH_LIB 	= -L$(PTSCOTCH_INSTALL_PATH)/lib/ -lptscotch \
                  -L$(PTSCOTCH_INSTALL_PATH)/lib/ -lptscotcherr


#
# master to make all versions
#

all: clean jac_mpi jac_seq jac_openmp jac_cuda


#
# simple sequential version
#

jac_seq:	jac.cpp res.h update.h
		$(CPP) $(CPPFLAGS) jac.cpp $(OP2_INC) $(OP2_LIB) -lop2_seq -o jac_seq

#
# x86 version using kernel files generated by op2.m
#

jac_openmp:	jac_op.cpp update.h res.h jac_kernels.cpp res_kernel.cpp \
		update_kernel.cpp Makefile
		$(CPP) $(CPPFLAGS) $(OMPFLAGS) jac_op.cpp jac_kernels.cpp \
		$(OP2_INC) $(OP2_LIB) -lop2_openmp -o jac_openmp


#
# CUDA version using kernel files generated by op2.m
#

jac_cuda:	jac_op.cpp jac_kernels_cu.o Makefile
		$(CPP) $(CPPFLAGS) $(INC_CUDA) $(OP2_INC) $(OP2_LIB) $(CUDA_LIB) \
		jac_op.cpp jac_kernels_cu.o -lcudart -lop2_cuda -o jac_cuda

jac_kernels_cu.o:	jac_kernels.cu  res_kernel.cu res.h \
			update_kernel.cu  update.h  \
			Makefile
			nvcc $(INC) $(NVCCFLAGS) $(OP2_INC) -c -o jac_kernels_cu.o jac_kernels.cu

#
# mpi with sequential-nodes version
#

jac_mpi:	jac_mpi.cpp update.h res.h Makefile
		$(MPICPP) $(MPIFLAGS) jac_mpi.cpp \
		$(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) \
		$(OP2_LIB) -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB)  -o jac_mpi



#
# cleanup
#

clean:
		rm -f jac_seq jac_openmp jac_mpi jac_cuda *.o
