project(OP2-Jac1)

# Require CMake 2.8
cmake_minimum_required(VERSION 2.8)

include(../common.cmake)

foreach(VARIANT ${OP2_BUILD_VARIANTS})

  set(KERNEL_HEADERS ${VARIANT}/res.h ${VARIANT}/update.h)
  # simple sequential version
  if (TARGET op2_seq)
    add_executable(jac1_${VARIANT}_seq ${VARIANT}/jac.cpp)
    target_link_libraries(jac1_${VARIANT}_seq op2_seq)
    install(TARGETS jac1_${VARIANT}_seq RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # x86 version using kernel files generated by op2.m
  if (TARGET op2_openmp)
    add_executable(jac1_${VARIANT}_openmp ${VARIANT}/jac_op.cpp ${VARIANT}/jac_kernels.cpp ${KERNEL_HEADERS})
    target_link_libraries(jac1_${VARIANT}_openmp op2_openmp)
    set_target_properties(jac1_${VARIANT}_openmp PROPERTIES COMPILE_FLAGS
      "${OpenMP_CXX_FLAGS}" LINK_FLAGS "${OpenMP_CXX_FLAGS}")
    install(TARGETS jac1_${VARIANT}_openmp RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # CUDA version using kernel files generated by op2.m
  if (TARGET op2_cuda)
    find_package(CUDA)
    if (CUDA_FOUND)
      cuda_add_executable(jac1_${VARIANT}_cuda ${VARIANT}/jac_op.cpp ${VARIANT}/jac_kernels.cu ${KERNEL_HEADERS})
      target_link_libraries(jac1_${VARIANT}_cuda op2_cuda)
      install(TARGETS jac1_${VARIANT}_cuda RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
    endif()
  endif()

  # MPI with sequential-nodes version
  if (TARGET op2_mpi)
    add_definitions(${OP2_MPI_DEFINITIONS})
    include_directories(${OP2_MPI_INCLUDE_DIRS})
    add_executable(jac1_${VARIANT}_mpi ${VARIANT}/jac_mpi.cpp ${KERNEL_HEADERS})
    target_link_libraries(jac1_${VARIANT}_mpi op2_mpi)
    install(TARGETS jac1_${VARIANT}_mpi RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

endforeach()
