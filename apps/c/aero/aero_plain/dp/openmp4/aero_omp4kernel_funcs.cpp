//
// auto-generated by op2.py
//

// header
#include "op_lib_cpp.h"

// global constants
double gam_ompkernel;
double gm1_ompkernel;
double gm1i_ompkernel;
double m2_ompkernel;
double wtg1_ompkernel[2];
double xi1_ompkernel[2];
double Ng1_ompkernel[4];
double Ng1_xi_ompkernel[4];
double wtg2_ompkernel[4];
double Ng2_ompkernel[16];
double Ng2_xi_ompkernel[32];
double minf_ompkernel;
double freq_ompkernel;
double kappa_ompkernel;
double nmode_ompkernel;
double mfan_ompkernel;

void op_decl_const_char(int dim, char const *type,
  int size, char *dat, char const *name){
  if(!strcmp(name, "gam")) {
    memcpy(&gam_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:gam_ompkernel)
  } else if(!strcmp(name, "gm1")) {
    memcpy(&gm1_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:gm1_ompkernel)
  } else if(!strcmp(name, "gm1i")) {
    memcpy(&gm1i_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:gm1i_ompkernel)
  } else if(!strcmp(name, "m2")) {
    memcpy(&m2_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m2_ompkernel)
  } else if(!strcmp(name, "wtg1")) {
    memcpy(wtg1_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:wtg1_ompkernel[:2])
  } else if(!strcmp(name, "xi1")) {
    memcpy(xi1_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:xi1_ompkernel[:2])
  } else if(!strcmp(name, "Ng1")) {
    memcpy(Ng1_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:Ng1_ompkernel[:4])
  } else if(!strcmp(name, "Ng1_xi")) {
    memcpy(Ng1_xi_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:Ng1_xi_ompkernel[:4])
  } else if(!strcmp(name, "wtg2")) {
    memcpy(wtg2_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:wtg2_ompkernel[:4])
  } else if(!strcmp(name, "Ng2")) {
    memcpy(Ng2_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:Ng2_ompkernel[:16])
  } else if(!strcmp(name, "Ng2_xi")) {
    memcpy(Ng2_xi_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:Ng2_xi_ompkernel[:32])
  } else if(!strcmp(name, "minf")) {
    memcpy(&minf_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:minf_ompkernel)
  } else if(!strcmp(name, "freq")) {
    memcpy(&freq_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:freq_ompkernel)
  } else if(!strcmp(name, "kappa")) {
    memcpy(&kappa_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:kappa_ompkernel)
  } else if(!strcmp(name, "nmode")) {
    memcpy(&nmode_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:nmode_ompkernel)
  } else if(!strcmp(name, "mfan")) {
    memcpy(&mfan_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:mfan_ompkernel)
  }
}
// user kernel files
#include "res_calc_omp4kernel_func.cpp"
#include "dirichlet_omp4kernel_func.cpp"
#include "init_cg_omp4kernel_func.cpp"
#include "spMV_omp4kernel_func.cpp"
#include "dotPV_omp4kernel_func.cpp"
#include "updateUR_omp4kernel_func.cpp"
#include "dotR_omp4kernel_func.cpp"
#include "updateP_omp4kernel_func.cpp"
#include "update_omp4kernel_func.cpp"
