#
# The following environment variables should be predefined:
#
# CUDA_INSTALL_PATH
# PARMETIS_INSTALL_PATH
# PTSCOTCH_INSTALL_PATH
# HDF5_INSTALL_PATH
#
# OP2_INSTALL_PATH
# OP2_COMPILER (gnu,intel,etc)
#

#
# set paths for header files and libraries
#
OP2_INC		= -I$(OP2_INSTALL_PATH)/c/include
OP2_LIB		= -L$(OP2_INSTALL_PATH)/c/lib

CUDA_INC	= -I$(CUDA_INSTALL_PATH)/include
CUDA_LIB	= -L$(CUDA_INSTALL_PATH)/lib64


ifeq ($(OP2_COMPILER),gnu)
  CPP		= g++
  CPPFLAGS	= -g -fPIC -DUNIX -Wall
#  CPPFLAGS	= -O3 -fPIC -DUNIX -Wall -Wextra
  OMPFLAGS	= -fopenmp
  MPICPP	= /usr/bin/mpiCC
  MPIFLAGS	= $(CCFLAGS)
else
ifeq ($(OP2_COMPILER),intel)
  CPP		= icpc
  CPPFLAGS	= -O3 -xHost -DMPICH_IGNORE_CXX_SEEK #-g #-DCOMM_PERF #-DDEBUG #-vec-report
  OMPFLAGS	= -qopenmp
  MPICPP	= $(MPI_INSTALL_PATH)/bin/mpicxx
  MPIFLAGS	= $(CPPFLAGS)
else
ifeq ($(OP2_COMPILER),pgi)
  CPP       	= pgc++
  CCFLAGS  	= -O3
  CPPFLAGS 	= $(CCFLAGS)
  OMPFLAGS 	= -mp
  MPICC   	= $(MPI_INSTALL_PATH)/bin/mpicc
  MPICPP   	= $(MPI_INSTALL_PATH)/bin/mpicxx
  MPIFLAGS 	= $(CPPFLAGS)
  NVCCFLAGS	= #-ccbin=$(MPICPP)
  ACCFLAGS      = -acc -Minfo=acc -ta=tesla:cc35 -DOPENACC
else
ifeq ($(OP2_COMPILER),clang)
  CPP       	= clang++
  CCFLAGS  	= -O3 #-ffast-math
  CPPFLAGS 	= $(CCFLAGS)
  OMPFLAGS 	= -I$(OMPTARGET_LIBS)/../tools/openmp/runtime/src/ -fopenmp=libomp -Rpass-analysis
  OMPOFFLOAD 	= -fopenmp-targets=nvptx64-nvidia-cuda -fopenmp-nonaliased-maps -ffp-contract=fast -Xcuda-ptxas -v #-Xclang -target-feature -Xclang +ptx35
  MPICC   	= $(MPI_INSTALL_PATH)/bin/mpicc
  MPICPP   	= $(MPI_INSTALL_PATH)/bin/mpicxx
  MPIFLAGS 	= $(CPPFLAGS)
else
print:
	@echo "unrecognised value for OP2_COMPILER"
endif
endif
endif
endif

#
# set flags for NVCC compilation and linking
#
ifndef NV_ARCH
  MESSAGE=select an NVIDA device to compile in CUDA, e.g. make NV_ARCH=KEPLER
  NV_ARCH=Kepler
endif
ifeq ($(NV_ARCH),Fermi)
  CODE_GEN_CUDA=-gencode arch=compute_20,code=sm_21
else
ifeq ($(NV_ARCH),Kepler)
  CODE_GEN_CUDA=-gencode arch=compute_35,code=sm_35
endif
endif

NVCCFLAGS       = -O3 $(CODE_GEN_CUDA) -m64 -Xptxas=-v -use_fast_math #-g -G -O0

#
# partitioning software for MPI versions
#
PARMETIS_VER=4
ifeq ($(PARMETIS_VER),4)
  PARMETIS_INC = -I$(PARMETIS_INSTALL_PATH)/include -DHAVE_PARMETIS -DPARMETIS_VER_4
  PARMETIS_LIB = -L$(PARMETIS_INSTALL_PATH)/lib -lparmetis -lmetis
else
  PARMETIS_INC = -I$(PARMETIS_INSTALL_PATH)/ -DHAVE_PARMETIS
  PARMETIS_LIB = -L$(PARMETIS_INSTALL_PATH)/ -lparmetis -lmetis
endif

PTSCOTCH_INC 	= -I$(PTSCOTCH_INSTALL_PATH)/include -DHAVE_PTSCOTCH
PTSCOTCH_LIB 	= -L$(PTSCOTCH_INSTALL_PATH)/lib/ -lptscotch \
                  -L$(PTSCOTCH_INSTALL_PATH)/lib/ -lptscotcherr

HDF5_INC = -I$(HDF5_INSTALL_PATH)/include
HDF5_LIB = -L$(HDF5_INSTALL_PATH)/lib -lhdf5 -lz

#
# master to make all versions
#

ALL_TARGETS = clean aero_mpi aero_cuda aero_openmp aero_seq aero_mpi_genseq aero_mpi_cuda aero_mpi_openmp aero_mpi_cuda_hyb
ifeq ($(OP2_COMPILER),pgi)
	ALL_TARGETS += aero_openacc aero_mpi_openacc
endif

all: $(ALL_TARGETS)

#
# simple sequential version
#

aero_seq: aero.cpp Makefile
	     $(CPP) aero.cpp $(CPPFLAGS) $(OP2_INC) $(OP2_LIB) -lop2_seq -o aero_seq

#
# x86 version using kernel files generated by op2.py
#

aero_openmp:	aero_op.cpp aero_kernels.cpp \
                Makefile
		$(CPP) $(CPPFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_LIB) \
		aero_op.cpp aero_kernels.cpp -lm -lop2_openmp -o aero_openmp

#
# OpenAcc version
#


aero_openacc: aero_op.cpp aero_acckernels.c \
                Makefile
		$(MPICC) $(VAR) $(CPPFLAGS) $(ACCFLAGS) $(OMPFLAGS) $(OP2_INC) \
                aero_acckernels.c -c -o aero_acckernels.o
		$(MPICPP) $(VAR) $(CPPFLAGS) $(ACCFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_LIB) $(HDF5_INC) \
                aero_op.cpp -lm aero_acckernels.o -lm $(CUDA_LIB) -lcudart -lop2_cuda -lop2_hdf5 $(HDF5_LIB) -o aero_openacc


#
# CUDA version using kernel files generated by op2.m
#

aero_cuda:	aero_op.cpp aero_kernels_cu.o Makefile
		$(CPP) $(CPPFLAGS) $(CUDA_INC) $(OP2_INC) $(OP2_LIB) $(CUDA_LIB) \
		aero_op.cpp aero_kernels_cu.o -lcudart -lop2_cuda -o aero_cuda -DCUDA

aero_kernels_cu.o:	aero_kernels.cu      \
                Makefile
		nvcc  $(INC) $(NVCCFLAGS) $(OP2_INC) \
		-c -o aero_kernels_cu.o \
		aero_kernels.cu -DCUDA

#
# mpi with sequential-nodes version
#

aero_mpi: aero_mpi.cpp Makefile
	$(MPICPP) $(MPIFLAGS) aero_mpi.cpp $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) \
	$(OP2_LIB) -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB) -o aero_mpi

aero_mpi_genseq: aero_mpi_op.cpp aero_seqkernels.cpp \
                Makefile
		$(MPICPP) $(MPIFLAGS) $(OP2_INC) $(OP2_INC) \
		$(PARMETIS_INC) $(PTSCOTCH_INC) \
		aero_mpi_op.cpp -lm aero_seqkernels.cpp $(OP2_LIB) -lop2_mpi \
		$(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o aero_mpi_genseq
#
# mpi with openmp-nodes version
#

aero_mpi_openmp:	aero_mpi_op.cpp aero_kernels.cpp Makefile
		$(MPICPP) $(MPIFLAGS) $(OMPFLAGS) $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) \
		aero_mpi_op.cpp aero_kernels.cpp -lm $(OP2_LIB) -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB) \
		-o aero_mpi_openmp


#
# mpi with CUDA version
#

aero_mpi_cuda:	aero_mpi_op.cpp aero_kernels_mpi_cu.o Makefile
		$(MPICPP) $(MPIFLAGS) aero_mpi_op.cpp aero_kernels_mpi_cu.o  \
		$(CUDA_INC) $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) \
		$(OP2_LIB) -lop2_mpi_cuda $(PARMETIS_LIB) $(PTSCOTCH_LIB) \
		$(CUDA_LIB) -lcudart  -o aero_mpi_cuda

aero_kernels_mpi_cu.o:	aero_kernels.cu      \
                Makefile
		nvcc  $(INC) $(NVCCFLAGS) $(OP2_INC) -I $(MPI_INSTALL_PATH)/include \
		-c -o aero_kernels_mpi_cu.o \
		aero_kernels.cu -DCUDA

#
# Hybrid CPU+GPU version
#

aero_mpi_cuda_hyb: aero_op.cpp aero_hybkernels.o Makefile
		  $(MPICPP) $(MPIFLAGS) $(OMPFLAGS) -DOP_HYBRID_GPU aero_op.cpp -lm aero_hybkernels.o aero_hybkernels2.o \
		  $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC) \
		  $(OP2_LIB) -lop2_mpi_cuda $(PARMETIS_LIB) $(PTSCOTCH_LIB) \
		  $(HDF5_LIB) $(CUDA_LIB) -lcudart -o aero_mpi_cuda_hyb

aero_hybkernels.o: aero_hybkernels.cu \
                aero_kernels.cu aero_kernels.cpp Makefile
		nvcc -DOP_HYBRID_GPU -DGPUPASS $(INC) $(NVCCFLAGS) $(OP2_INC) -I $(MPI_INSTALL_PATH)/include \
                -c -o aero_hybkernels.o aero_hybkernels.cu
		cat aero_hybkernels.cu > aero_hybkernels2.cpp
		$(MPICPP) -DOP_HYBRID_GPU $(OMPFLAGS) $(INC) $(OP2_INC) -I $(MPI_INSTALL_PATH)/include \
                -c -o aero_hybkernels2.o aero_hybkernels2.cpp
		rm aero_hybkernels2.cpp

#
# OpenMP4 version
#
aero_openmp4: aero_op.cpp aero_omp4kernels.cpp aero_omp4kernel_funcs.cpp \
			Makefile
	$(CPP) $(VAR) $(CPPFLAGS) $(OMPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(OP2_LIB) $(HDF5_INC) $(HDF5_LIB) $(OMP4_REG_COUNT)\
		-c aero_omp4kernel_funcs.cpp  -o aero_omp4kernel_funcs.o
	$(CPP) $(VAR) $(CPPFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_LIB) $(HDF5_INC) $(HDF5_LIB) $(OMP4_REG_COUNT)\
		-c aero_omp4kernels.cpp -o aero_omp4kernels.o
	$(MPICPP) $(VAR) $(CPPFLAGS) $(OMPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(OP2_LIB) $(HDF5_INC)  \
		aero_op.cpp aero_omp4kernels.o aero_omp4kernel_funcs.o -o aero_openmp4 \
	   	-lop2_openmp4 $(HDF5_LIB) -L$(CUDA_INSTALL_PATH)/lib64 -lcudart





write_hdf5: write_hdf5.cpp
	$(MPICPP) $(MPIFLAGS) write_hdf5.cpp $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC)\
	$(OP2_LIB) -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o write_hdf5


#
# cleanup
#

clean:
		rm -f aero_seq aero_openmp aero_cuda aero_mpi write_hdf5 aero_mpi_openmp aero_openmp4 aero_mpi_cuda aero_mpi_genseq *.o
