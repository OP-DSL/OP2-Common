//
// auto-generated by op2.py
//

void updateUR_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *arg4,
  int count,
  int num_teams,
  int nthread){

  double arg4_l = *arg4;
#pragma omp target teams distribute parallel for schedule(                     \
    static, 1) num_teams(num_teams) thread_limit(nthread)                      \
        map(to : data0[0 : dat0size], data1[0 : dat1size],                     \
                                            data2[0 : dat2size],               \
                                                  data3[0 : dat3size])
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    double *u = &data0[1*n_op];
    double *r = &data1[1*n_op];
    const double *p = &data2[1*n_op];
    double *v = &data3[1*n_op];
    const double *alpha = &arg4_l;

    //inline function
    
    *u += (*alpha) * (*p);
    *r -= (*alpha) * (*v);
    *v = 0.0f;
    //end inline func
  }

  *arg4 = arg4_l;
}
