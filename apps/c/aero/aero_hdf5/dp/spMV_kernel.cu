//
// auto-generated by op2.py
//

__constant__ int opDat0_spMV_stride_OP2CONSTANT;
int opDat0_spMV_stride_OP2HOST=-1;
__constant__ int direct_spMV_stride_OP2CONSTANT;
int direct_spMV_stride_OP2HOST=-1;
//user function
__device__ void spMV_gpu( double **v, const double *K, const double **p) {



















  v[0][0] += K[(0)*direct_spMV_stride_OP2CONSTANT] * p[0][0];
  v[0][0] += K[(1)*direct_spMV_stride_OP2CONSTANT] * p[1][0];
  v[1][0] += K[(1)*direct_spMV_stride_OP2CONSTANT] * p[0][0];
  v[0][0] += K[(2)*direct_spMV_stride_OP2CONSTANT] * p[2][0];
  v[2][0] += K[(2)*direct_spMV_stride_OP2CONSTANT] * p[0][0];
  v[0][0] += K[(3)*direct_spMV_stride_OP2CONSTANT] * p[3][0];
  v[3][0] += K[(3)*direct_spMV_stride_OP2CONSTANT] * p[0][0];
  v[1][0] += K[(4 + 1)*direct_spMV_stride_OP2CONSTANT] * p[1][0];
  v[1][0] += K[(4 + 2)*direct_spMV_stride_OP2CONSTANT] * p[2][0];
  v[2][0] += K[(4 + 2)*direct_spMV_stride_OP2CONSTANT] * p[1][0];
  v[1][0] += K[(4 + 3)*direct_spMV_stride_OP2CONSTANT] * p[3][0];
  v[3][0] += K[(4 + 3)*direct_spMV_stride_OP2CONSTANT] * p[1][0];
  v[2][0] += K[(8 + 2)*direct_spMV_stride_OP2CONSTANT] * p[2][0];
  v[2][0] += K[(8 + 3)*direct_spMV_stride_OP2CONSTANT] * p[3][0];
  v[3][0] += K[(8 + 3)*direct_spMV_stride_OP2CONSTANT] * p[2][0];
  v[3][0] += K[(15)*direct_spMV_stride_OP2CONSTANT] * p[3][0];
}

// CUDA kernel function
__global__ void op_cuda_spMV(
  double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const int *__restrict opDat0Map,
  const double *__restrict arg4,
  int   *ind_map,
  short *arg_map,
  int   *ind_arg_sizes,
  int   *ind_arg_offs,
  int    block_offset,
  int   *blkmap,
  int   *offset,
  int   *nelems,
  int   *ncolors,
  int   *colors,
  int   nblocks,
  int   set_size) {
  double arg0_l[1];
  double arg1_l[1];
  double arg2_l[1];
  double arg3_l[1];
  double *arg0_vec[4] = {
    arg0_l,
    arg1_l,
    arg2_l,
    arg3_l,
  };

  __shared__  int  *ind_arg0_map, ind_arg0_size;
  __shared__  double *ind_arg0_s;

  __shared__ int    nelems2, ncolor;
  __shared__ int    nelem, offset_b;

  extern __shared__ char shared[];

  if (blockIdx.x+blockIdx.y*gridDim.x >= nblocks) {
    return;
  }
  if (threadIdx.x==0) {

    //get sizes and shift pointers and direct-mapped data

    int blockId = blkmap[blockIdx.x + blockIdx.y*gridDim.x  + block_offset];

    nelem    = nelems[blockId];
    offset_b = offset[blockId];

    nelems2  = blockDim.x*(1+(nelem-1)/blockDim.x);
    ncolor   = ncolors[blockId];

    ind_arg0_size = ind_arg_sizes[0+blockId*1];

    ind_arg0_map = &ind_map[0*set_size] + ind_arg_offs[0+blockId*1];

    //set shared memory pointers
    int nbytes = 0;
    ind_arg0_s = (double *) &shared[nbytes];
  }
  __syncthreads(); // make sure all of above completed

  for ( int n=threadIdx.x; n<ind_arg0_size*1; n+=blockDim.x ){
    ind_arg0_s[n] = ZERO_double;
  }

  __syncthreads();

  for ( int n=threadIdx.x; n<nelems2; n+=blockDim.x ){
    int col2 = -1;
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    if (n<nelem) {
      //initialise local variables
      for ( int d=0; d<1; d++ ){
        arg0_l[d] = ZERO_double;
      }
      for ( int d=0; d<1; d++ ){
        arg1_l[d] = ZERO_double;
      }
      for ( int d=0; d<1; d++ ){
        arg2_l[d] = ZERO_double;
      }
      for ( int d=0; d<1; d++ ){
        arg3_l[d] = ZERO_double;
      }
      map0idx = opDat0Map[n + offset_b + set_size * 0];
      map1idx = opDat0Map[n + offset_b + set_size * 1];
      map2idx = opDat0Map[n + offset_b + set_size * 2];
      map3idx = opDat0Map[n + offset_b + set_size * 3];

      const double* arg5_vec[] = {
         &ind_arg1[1 * map0idx],
         &ind_arg1[1 * map1idx],
         &ind_arg1[1 * map2idx],
         &ind_arg1[1 * map3idx]};

      //user-supplied kernel call
      spMV_gpu(arg0_vec,
         arg4+(n+offset_b),
         arg5_vec);
      col2 = colors[n+offset_b];
    }

    //store local variables

    int arg0_map;
    int arg1_map;
    int arg2_map;
    int arg3_map;
    if (col2>=0) {
      arg0_map = arg_map[0*set_size+n+offset_b];
      arg1_map = arg_map[1*set_size+n+offset_b];
      arg2_map = arg_map[2*set_size+n+offset_b];
      arg3_map = arg_map[3*set_size+n+offset_b];
    }

    for ( int col=0; col<ncolor; col++ ){
      if (col2==col) {
        arg0_l[0] += ind_arg0_s[0+arg0_map*1];
        ind_arg0_s[0+arg0_map*1] = arg0_l[0];
        arg1_l[0] += ind_arg0_s[0+arg1_map*1];
        ind_arg0_s[0+arg1_map*1] = arg1_l[0];
        arg2_l[0] += ind_arg0_s[0+arg2_map*1];
        ind_arg0_s[0+arg2_map*1] = arg2_l[0];
        arg3_l[0] += ind_arg0_s[0+arg3_map*1];
        ind_arg0_s[0+arg3_map*1] = arg3_l[0];
      }
      __syncthreads();
    }
  }
  for ( int n=threadIdx.x; n<ind_arg0_size*1; n+=blockDim.x ){
    ind_arg0[n%1+ind_arg0_map[n/1]*1] += ind_arg0_s[n];
  }
}


//host stub function
void op_par_loop_spMV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg4,
  op_arg arg5){

  int nargs = 9;
  op_arg args[9];

  arg0.idx = 0;
  args[0] = arg0;
  for ( int v=1; v<4; v++ ){
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 1, "double", OP_INC);
  }

  args[4] = arg4;
  arg5.idx = 0;
  args[5] = arg5;
  for ( int v=1; v<4; v++ ){
    args[5 + v] = op_arg_dat(arg5.dat, v, arg5.map, 1, "double", OP_READ);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;


  int    ninds   = 2;
  int    inds[9] = {0,0,0,0,-1,1,1,1,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: spMV\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_3
    int part_size = OP_PART_SIZE_3;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_STAGE_INC);

    if ((OP_kernels[3].count==1) || (opDat0_spMV_stride_OP2HOST != getSetSizeFromOpArg(&arg0))) {
      opDat0_spMV_stride_OP2HOST = getSetSizeFromOpArg(&arg0);
      cudaMemcpyToSymbol(opDat0_spMV_stride_OP2CONSTANT, &opDat0_spMV_stride_OP2HOST,sizeof(int));
    }
    if ((OP_kernels[3].count==1) || (direct_spMV_stride_OP2HOST != getSetSizeFromOpArg(&arg4))) {
      direct_spMV_stride_OP2HOST = getSetSizeFromOpArg(&arg4);
      cudaMemcpyToSymbol(direct_spMV_stride_OP2CONSTANT,&direct_spMV_stride_OP2HOST,sizeof(int));
    }
    //execute plan

    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      #ifdef OP_BLOCK_SIZE_3
      int nthread = OP_BLOCK_SIZE_3;
      #else
      int nthread = OP_block_size;
      #endif

      dim3 nblocks = dim3(Plan->ncolblk[col] >= (1<<16) ? 65535 : Plan->ncolblk[col],
      Plan->ncolblk[col] >= (1<<16) ? (Plan->ncolblk[col]-1)/65535+1: 1, 1);
      if (Plan->ncolblk[col] > 0) {
        int nshared = Plan->nsharedCol[col];
        op_cuda_spMV<<<nblocks,nthread,nshared>>>(
        (double *)arg0.data_d,
        (double *)arg5.data_d,
        arg0.map_data_d,
        (double*)arg4.data_d,
        Plan->ind_map,
        Plan->loc_map,
        Plan->ind_sizes,
        Plan->ind_offs,
        block_offset,
        Plan->blkmap,
        Plan->offset,
        Plan->nelems,
        Plan->nthrcol,
        Plan->thrcol,
        Plan->ncolblk[col],
        set->size+set->exec_size);

      }
      block_offset += Plan->ncolblk[col];
    }
    OP_kernels[3].transfer  += Plan->transfer;
    OP_kernels[3].transfer2 += Plan->transfer2;
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].time     += wall_t2 - wall_t1;
}
