//
// auto-generated by op2.py
//

//header
#ifdef GPUPASS
#define op_par_loop_res_calc op_par_loop_res_calc_gpu
#define op_par_loop_dirichlet op_par_loop_dirichlet_gpu
#define op_par_loop_init_cg op_par_loop_init_cg_gpu
#define op_par_loop_spMV op_par_loop_spMV_gpu
#define op_par_loop_dotPV op_par_loop_dotPV_gpu
#define op_par_loop_updateUR op_par_loop_updateUR_gpu
#define op_par_loop_dotR op_par_loop_dotR_gpu
#define op_par_loop_updateP op_par_loop_updateP_gpu
#define op_par_loop_update op_par_loop_update_gpu
#include "aero_kernels.cu"
#undef op_par_loop_res_calc
#undef op_par_loop_dirichlet
#undef op_par_loop_init_cg
#undef op_par_loop_spMV
#undef op_par_loop_dotPV
#undef op_par_loop_updateUR
#undef op_par_loop_dotR
#undef op_par_loop_updateP
#undef op_par_loop_update
#else
#define op_par_loop_res_calc op_par_loop_res_calc_cpu
#define op_par_loop_dirichlet op_par_loop_dirichlet_cpu
#define op_par_loop_init_cg op_par_loop_init_cg_cpu
#define op_par_loop_spMV op_par_loop_spMV_cpu
#define op_par_loop_dotPV op_par_loop_dotPV_cpu
#define op_par_loop_updateUR op_par_loop_updateUR_cpu
#define op_par_loop_dotR op_par_loop_dotR_cpu
#define op_par_loop_updateP op_par_loop_updateP_cpu
#define op_par_loop_update op_par_loop_update_cpu
#include "../openmp/aero_kernels.cpp"
#undef op_par_loop_res_calc
#undef op_par_loop_dirichlet
#undef op_par_loop_init_cg
#undef op_par_loop_spMV
#undef op_par_loop_dotPV
#undef op_par_loop_updateUR
#undef op_par_loop_dotR
#undef op_par_loop_updateP
#undef op_par_loop_update

//user kernel files

void op_par_loop_res_calc_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_res_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_res_calc_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_res_calc_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_res_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_res_calc_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_dirichlet_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_dirichlet(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_dirichlet_gpu(name, set,
      arg0);

    }else{
    op_par_loop_dirichlet_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_dirichlet(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_dirichlet_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_init_cg_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_init_cg(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  if (OP_hybrid_gpu) {
    op_par_loop_init_cg_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

    }else{
    op_par_loop_init_cg_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

  }
}
#else
void op_par_loop_init_cg(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  op_par_loop_init_cg_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_spMV_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_spMV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_spMV_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_spMV_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_spMV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_spMV_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_dotPV_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_dotPV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_dotPV_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_dotPV_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_dotPV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_dotPV_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_updateUR_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_updateUR(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  if (OP_hybrid_gpu) {
    op_par_loop_updateUR_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

    }else{
    op_par_loop_updateUR_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

  }
}
#else
void op_par_loop_updateUR(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  op_par_loop_updateUR_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_dotR_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_dotR(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_dotR_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_dotR_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_dotR(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_dotR_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_updateP_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_updateP(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_updateP_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_updateP_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_updateP(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_updateP_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_update_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_update_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_update_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_update_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU
#endif
