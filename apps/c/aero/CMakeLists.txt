# Open source copyright declaration based on BSD open source template:
# http://www.opensource.org/licenses/bsd-license.php
#
# This file is part of the OP2 distribution.
#
# Copyright (c) 2011, Florian Rathgeber and others. Please see the AUTHORS
# file in the main source directory for a full list of copyright holders.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * The name of Florian Rathgeber may not be used to endorse or promote
#       products derived from this software without specific prior written
#       permission.
#
# THIS SOFTWARE IS PROVIDED BY Florian Rathgeber ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Florian Rathgeber BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

project(OP2-Aero)

# Require CMake 2.8
cmake_minimum_required(VERSION 2.8)

include(../common.cmake)
include(GenerateMesh)
generate_mesh(AERO FE_grid.dat naca_fem)

if (OP2_BUILD_DP)

  set(KERNEL_HEADERS_DP dp/dirichlet.h dp/dotPV.h dp/dotR.h dp/init_cg.h dp/res_calc.h dp/spMV.h dp/update.h dp/updateUR.h dp/updateP.h)
  set(KERNEL_HEADERS_MPI mpi/dirichlet.h mpi/dotPV.h mpi/dotR.h mpi/init_cg.h mpi/res_calc.h mpi/spMV.h mpi/update.h mpi/updateUR.h dp/updateP.h)
  set(KERNEL_HEADERS_HDF5 hdf5/dirichlet.h hdf5/dotPV.h hdf5/dotR.h hdf5/init_cg.h hdf5/res_calc.h hdf5/spMV.h hdf5/update.h hdf5/updateUR.h hdf5/updateP.h)

  # simple sequential version
  op2_application(aero_dp_seq DEPENDS AERO_grid LIBS op2_seq
    SOURCES dp/aero.cpp ${KERNEL_HEADERS_DP})

  # x86 version using kernel files generated by op2.m
  op2_application(aero_dp_openmp DEPENDS AERO_grid LIBS op2_openmp
    SOURCES dp/aero_op.cpp dp/aero_kernels.cpp ${KERNEL_HEADERS_DP})

  # CUDA version using kernel files generated by op2.m
  op2_application(aero_dp_cuda DEPENDS AERO_grid LIBS op2_cuda
    SOURCES dp/aero_op.cpp dp/aero_kernels.cu ${KERNEL_HEADERS_DP})

  # MPI with sequential-nodes version
  op2_application(aero_dp_mpi DEPENDS AERO_grid LIBS op2_mpi
    SOURCES mpi/aero.cpp ${KERNEL_HEADERS_MPI})

  op2_application(aero_dp_mpi_openmp DEPENDS AERO_grid LIBS op2_mpi op2_openmp
    SOURCES mpi/aero_op.cpp mpi/aero_kernels.cpp
    ${KERNEL_HEADERS_MPI})

  op2_application(aero_dp_mpi_cuda DEPENDS AERO_grid LIBS op2_mpi_cuda
    SOURCES dp/aero_op.cpp dp/aero_kernels.cu
    ${KERNEL_HEADERS_MPI})

  # HDF5 mesh conversion utility
  op2_application(write_hdf5 LIBS op2_mpi op2_hdf5 SOURCES hdf5/write_hdf5.cpp)

  generate_hdf5_mesh(AERO FE_grid write_hdf5)

  # simple sequential version
  op2_application(aero_hdf5_dp_seq DEPENDS AERO_h5_grid LIBS op2_seq op2_hdf5
    SOURCES hdf5/aero.cpp)

  # x86 version using kernel files generated by op2.m
  op2_application(aero_hdf5_dp_openmp DEPENDS AERO_h5_grid LIBS op2_openmp op2_hdf5
    SOURCES hdf5/aero_op.cpp hdf5/aero_kernels.cpp ${KERNEL_HEADERS_HDF5})

  # CUDA version using kernel files generated by op2.m
  op2_application(aero_hdf5_dp_cuda DEPENDS AERO_h5_grid LIBS op2_mpi_cuda op2_hdf5
    SOURCES hdf5/aero_op.cpp hdf5/aero_kernels.cu ${KERNEL_HEADERS_HDF5})

  # MPI with sequential-nodes version
  op2_application(aero_hdf5_dp_mpi DEPENDS AERO_h5_grid LIBS op2_mpi
    SOURCES hdf5/aero.cpp ${KERNEL_HEADERS_HDF5})

endif()
