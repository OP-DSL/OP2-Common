//
// auto-generated by op2.py
//

//user function
#include "../update.h"

// host stub function
void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  double*arg3h = (double *)arg3.data;
  int nargs = 4;
  op_arg args[4];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(8);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  update");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);
  // set number of threads
  #ifdef _OPENMP
    int nthreads = omp_get_max_threads();
  #else
    int nthreads = 1;
  #endif

  // allocate and initialise arrays for global reduction
  double arg3_l[nthreads*64];
  for ( int thr=0; thr<nthreads; thr++ ){
    for ( int d=0; d<1; d++ ){
      arg3_l[d+thr*64]=ZERO_double;
    }
  }  
  
  int reduct_bytes = 0;
  reduct_bytes = ROUND_UP(arg3.dim*sizeof(double)*set_size);  
  reallocReductArrays(reduct_bytes);
  
  reduct_bytes=0;
  double* red3 = (double*)(OP_reduct_h+reduct_bytes);
  reduct_bytes+=arg3.dim*sizeof(double)*set_size;
  
  for (int i=0; i<arg3.dim*set_size; i++){
      red3[i]=0;
  }
  
  
  if (set->size >0) {

    // execute plan
    #pragma omp parallel for
    for ( int thr=0; thr<nthreads; thr++ ){
      int start  = (set->size* thr)/nthreads;
      int finish = (set->size*(thr+1))/nthreads;
      for ( int n=start; n<finish; n++ ){
        update(
          &((double*)arg0.data)[1*n],
          &((double*)arg1.data)[1*n],
          &((double*)arg2.data)[1*n],
          //&arg3_l[64*omp_get_thread_num()]);
          &red3[1*n]);
      }
    }
  }
  
  reprLocalSum(&arg3,set_size,red3);

  // combine reduction data
  for ( int thr=0; thr<nthreads; thr++ ){
    for ( int d=0; d<1; d++ ){
      arg3h[d] += arg3_l[d+thr*64];
    }
  }
  //op_mpi_reduce(&arg3,arg3h);
  op_mpi_repr_inc_reduce_double(&arg3,arg3h);
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[8].name      = name;
  OP_kernels[8].count    += 1;
  OP_kernels[8].time     += wall_t2 - wall_t1;
  OP_kernels[8].transfer += (float)set->size * arg0.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg2.size;
}
