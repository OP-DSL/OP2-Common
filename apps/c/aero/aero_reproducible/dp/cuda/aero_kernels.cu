//
// auto-generated by op2.py
//

//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

__constant__ double gam_cuda;
__constant__ double gm1_cuda;
__constant__ double gm1i_cuda;
__constant__ double m2_cuda;
__constant__ double wtg1_cuda[2];
__constant__ double xi1_cuda[2];
__constant__ double Ng1_cuda[4];
__constant__ double Ng1_xi_cuda[4];
__constant__ double wtg2_cuda[4];
__constant__ double Ng2_cuda[16];
__constant__ double Ng2_xi_cuda[32];
__constant__ double minf_cuda;
__constant__ double freq_cuda;
__constant__ double kappa_cuda;
__constant__ double nmode_cuda;
__constant__ double mfan_cuda;

//header
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

void op_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (!OP_hybrid_gpu) return;
  if (!strcmp(name,"gam")) {
    cutilSafeCall(cudaMemcpyToSymbol(gam_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gm1")) {
    cutilSafeCall(cudaMemcpyToSymbol(gm1_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gm1i")) {
    cutilSafeCall(cudaMemcpyToSymbol(gm1i_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"m2")) {
    cutilSafeCall(cudaMemcpyToSymbol(m2_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"wtg1")) {
    if (!strcmp(name,"wtg1") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(wtg1_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"xi1")) {
    if (!strcmp(name,"xi1") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(xi1_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Ng1")) {
    if (!strcmp(name,"Ng1") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(Ng1_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Ng1_xi")) {
    if (!strcmp(name,"Ng1_xi") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(Ng1_xi_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"wtg2")) {
    if (!strcmp(name,"wtg2") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(wtg2_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Ng2")) {
    if (!strcmp(name,"Ng2") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(Ng2_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Ng2_xi")) {
    if (!strcmp(name,"Ng2_xi") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(Ng2_xi_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"minf")) {
    cutilSafeCall(cudaMemcpyToSymbol(minf_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"freq")) {
    cutilSafeCall(cudaMemcpyToSymbol(freq_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa")) {
    cutilSafeCall(cudaMemcpyToSymbol(kappa_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"nmode")) {
    cutilSafeCall(cudaMemcpyToSymbol(nmode_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"mfan")) {
    cutilSafeCall(cudaMemcpyToSymbol(mfan_cuda, dat, dim*size));
  }
  else
  {
    printf("error: unknown const name\n"); exit(1);
  }
}

//user kernel files
#include "res_calc_kernel.cu"
#include "dirichlet_kernel.cu"
#include "init_cg_kernel.cu"
#include "spMV_kernel.cu"
#include "dotPV_kernel.cu"
#include "updateUR_kernel.cu"
#include "dotR_kernel.cu"
#include "updateP_kernel.cu"
#include "update_kernel.cu"
