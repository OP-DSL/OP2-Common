//
// auto-generated by op2.py
//

//user function
__device__ void spMV_gpu( double **v, const double *K, const double **p) {



















  v[0][0] += K[0] * p[0][0];
  v[0][0] += K[1] * p[1][0];
  v[1][0] += K[1] * p[0][0];
  v[0][0] += K[2] * p[2][0];
  v[2][0] += K[2] * p[0][0];
  v[0][0] += K[3] * p[3][0];
  v[3][0] += K[3] * p[0][0];
  v[1][0] += K[4 + 1] * p[1][0];
  v[1][0] += K[4 + 2] * p[2][0];
  v[2][0] += K[4 + 2] * p[1][0];
  v[1][0] += K[4 + 3] * p[3][0];
  v[3][0] += K[4 + 3] * p[1][0];
  v[2][0] += K[8 + 2] * p[2][0];
  v[2][0] += K[8 + 3] * p[3][0];
  v[3][0] += K[8 + 3] * p[2][0];
  v[3][0] += K[15] * p[3][0];
}

// CUDA kernel function
__global__ void op_cuda_spMV(
  double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const int *__restrict opDat0Map,
  const double *__restrict arg4,
  int start,
  int end,
  int *col_reord,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if(tid + start >= end) return;
  int n = col_reord[tid + start];
  //initialise local variables
  int map0idx;
  int map1idx;
  int map2idx;
  int map3idx;
  map0idx = opDat0Map[n + set_size * 0];
  map1idx = opDat0Map[n + set_size * 1];
  map2idx = opDat0Map[n + set_size * 2];
  map3idx = opDat0Map[n + set_size * 3];
  double* arg0_vec[] = {
     &ind_arg0[1 * map0idx],
     &ind_arg0[1 * map1idx],
     &ind_arg0[1 * map2idx],
     &ind_arg0[1 * map3idx]};
  const double* arg5_vec[] = {
     &ind_arg1[1 * map0idx],
     &ind_arg1[1 * map1idx],
     &ind_arg1[1 * map2idx],
     &ind_arg1[1 * map3idx]};

  //user-supplied kernel call
  spMV_gpu(arg0_vec,
         arg4+n*16,
         arg5_vec);
}


//host stub function
void op_par_loop_spMV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg4,
  op_arg arg5){

  int nargs = 9;
  op_arg args[9];

  arg0.idx = 0;
  args[0] = arg0;
  for ( int v=1; v<4; v++ ){
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 1, "double", OP_INC);
  }

  args[4] = arg4;
  arg5.idx = 0;
  args[5] = arg5;
  for ( int v=1; v<4; v++ ){
    args[5 + v] = op_arg_dat(arg5.dat, v, arg5.map, 1, "double", OP_READ);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;


  int    ninds   = 2;
  int    inds[9] = {0,0,0,0,-1,1,1,1,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: spMV\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_3
    int part_size = OP_PART_SIZE_3;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  op_map prime_map = arg0.map;
  op_reversed_map rev_map = OP_reversed_map_list[prime_map->index];

  if (set->size > 0 && rev_map != NULL ) {

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_COLOR2);

    op_mpi_wait_all_cuda(nargs, args);
    //execute plan
    for ( int col=0; col<rev_map->number_of_colors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      #ifdef OP_BLOCK_SIZE_3
      int nthread = OP_BLOCK_SIZE_3;
      #else
      int nthread = OP_block_size;
      #endif

      int start = rev_map->color_based_exec_row_starts[col];
      int end = rev_map->color_based_exec_row_starts[col+1];
      int nblocks = (end - start - 1)/nthread + 1;
      op_cuda_spMV<<<nblocks,nthread>>>(
      (double *)arg0.data_d,
      (double *)arg5.data_d,
      arg0.map_data_d,
      (double*)arg4.data_d,
      start,
      end,
      rev_map->color_based_exec_d,
      set->size+set->exec_size);

    }
    OP_kernels[3].transfer  += Plan->transfer;
    OP_kernels[3].transfer2 += Plan->transfer2;
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].time     += wall_t2 - wall_t1;
}
