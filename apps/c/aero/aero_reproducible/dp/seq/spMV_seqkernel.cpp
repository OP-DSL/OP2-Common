//
// auto-generated by op2.py
//

//user function
#include "../spMV.h"

// host stub function
void op_par_loop_spMV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg4,
  op_arg arg5){

  int nargs = 9;
  op_arg args[9];

  arg0.idx = 0;
  args[0] = arg0;
  for ( int v=1; v<4; v++ ){
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 1, "double", OP_INC);
  }

  args[4] = arg4;
  arg5.idx = 0;
  args[5] = arg5;
  for ( int v=1; v<4; v++ ){
    args[5 + v] = op_arg_dat(arg5.dat, v, arg5.map, 1, "double", OP_READ);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: spMV\n");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    op_map prime_map = arg0.map; //TODO works only with arg0...
    op_reversed_map rev_map = OP_reversed_map_list[prime_map->index];

            op_mpi_wait_all(nargs, args);
    if (rev_map != NULL) {
        
   /*     
        int prime_map_dim = prime_map->dim;
        int set_from_size = prime_map->from->size + prime_map->from->exec_size ;
        int set_to_size = prime_map->to->size + prime_map->to->exec_size + prime_map->to->nonexec_size;

        int required_tmp_incs_size = set_from_size * prime_map_dim * arg0.dat->size;
    
        if (op_repr_incs[3].tmp_incs == NULL){
            op_repr_incs[3].tmp_incs = (void *)op_malloc(required_tmp_incs_size);
            op_repr_incs[3].tmp_incs_size = required_tmp_incs_size;
        } else if (op_repr_incs[3].tmp_incs_size < required_tmp_incs_size){
            op_realloc(op_repr_incs[3].tmp_incs, required_tmp_incs_size);
            op_repr_incs[3].tmp_incs_size = required_tmp_incs_size;
        }

        double *tmp_incs = (double *)op_repr_incs[3].tmp_incs;

        for (int i=0; i<set_from_size * prime_map_dim * arg0.dim; i++){
          tmp_incs[i]=0.0;
        }

    */
        
    /*    for ( int n=0; n<set_size; n++ ){
          if (n==set->core_size) {
            op_mpi_wait_all(nargs, args);
          }*/
          for (int c=0; c<rev_map->number_of_colors;c++){
            for ( int i=rev_map->color_based_exec_row_starts[c]; i<rev_map->color_based_exec_row_starts[c+1]; i++ ){
                int n=rev_map->color_based_exec[i];
          int map0idx = arg0.map_data[n * arg0.map->dim + 0];
          int map1idx = arg0.map_data[n * arg0.map->dim + 1];
          int map2idx = arg0.map_data[n * arg0.map->dim + 2];
          int map3idx = arg0.map_data[n * arg0.map->dim + 3];

          double* arg0_vec[] = {
             &((double*)arg0.data)[1 * map0idx],
             &((double*)arg0.data)[1 * map1idx],
             &((double*)arg0.data)[1 * map2idx],
             &((double*)arg0.data)[1 * map3idx]};
             
     /*     double* arg0_vec[] = {
             &tmp_incs[(n*prime_map_dim+0)*arg0.dim],
             &tmp_incs[(n*prime_map_dim+1)*arg0.dim],
             &tmp_incs[(n*prime_map_dim+2)*arg0.dim],
             &tmp_incs[(n*prime_map_dim+3)*arg0.dim]};
      */
          const double* arg5_vec[] = {
             &((double*)arg5.data)[1 * map0idx],
             &((double*)arg5.data)[1 * map1idx],
             &((double*)arg5.data)[1 * map2idx],
             &((double*)arg5.data)[1 * map3idx]};

          spMV(
            arg0_vec,
            &((double*)arg4.data)[16 * n],
            arg5_vec);
        }
        
      /*  for ( int n=0; n<set_to_size; n++ ){
            for ( int i=0; i<rev_map->row_start_idx[n+1] - rev_map->row_start_idx[n]; i++){
                for (int d=0; d<arg0.dim; d++){
                    ((double*)arg0.data)[arg0.dim * n + d] +=
                    tmp_incs[rev_map->reversed_map[rev_map->row_start_idx[n]+i] * arg0.dim + d];
                }
            }
        }
        */
          }
    }
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer += (float)set->size * arg0.size * 2.0f;
  OP_kernels[3].transfer += (float)set->size * arg5.size;
  OP_kernels[3].transfer += (float)set->size * arg4.size;
  OP_kernels[3].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
