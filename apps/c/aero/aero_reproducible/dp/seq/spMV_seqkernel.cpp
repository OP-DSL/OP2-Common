//
// auto-generated by op2.py
//

//user function
#include "../spMV.h"

// host stub function
void op_par_loop_spMV(char const *name, op_set set,
  op_arg arg0,
  op_arg arg4,
  op_arg arg5){

  int nargs = 9;
  op_arg args[9];

  arg0.idx = 0;
  args[0] = arg0;
  for ( int v=1; v<4; v++ ){
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 1, "double", OP_INC);
  }

  args[4] = arg4;
  arg5.idx = 0;
  args[5] = arg5;
  for ( int v=1; v<4; v++ ){
    args[5 + v] = op_arg_dat(arg5.dat, v, arg5.map, 1, "double", OP_READ);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: spMV\n");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    op_map prime_map_pcell = arg0.map;
    op_reversed_map rev_map_pcell = OP_reversed_map_list[prime_map_pcell->index];

    if (rev_map_pcell != NULL ) {
      int prime_map_pcell_dim = prime_map_pcell->dim;
      int set_from_size_pcell = prime_map_pcell->from->size + prime_map_pcell->from->exec_size;
      int set_to_size_pcell = prime_map_pcell->to->size + prime_map_pcell->to->exec_size + prime_map_pcell->to->nonexec_size;

      double *tmp_incs0 = NULL;
      int required_tmp_incs_size0 = set_from_size_pcell * prime_map_pcell_dim * arg0.dat->size;
      if (op_repr_incs[arg0.dat->index].tmp_incs == NULL) {
        op_repr_incs[arg0.dat->index].tmp_incs = (void *)op_malloc(required_tmp_incs_size0);
        op_repr_incs[arg0.dat->index].tmp_incs_size = required_tmp_incs_size0;
      }
      else
      if (op_repr_incs[arg0.dat->index].tmp_incs_size < required_tmp_incs_size0) {
        op_realloc(op_repr_incs[arg0.dat->index].tmp_incs, required_tmp_incs_size0);
        op_repr_incs[arg0.dat->index].tmp_incs_size = required_tmp_incs_size0;
      }
      tmp_incs0 = (double *)op_repr_incs[arg0.dat->index].tmp_incs;

      for ( int n=0; n<set_size; n++ ){
        if (n==set->core_size) {
          op_mpi_wait_all(nargs, args);
        }
        int map0idx = arg0.map_data[n * arg0.map->dim + 0];
        int map1idx = arg0.map_data[n * arg0.map->dim + 1];
        int map2idx = arg0.map_data[n * arg0.map->dim + 2];
        int map3idx = arg0.map_data[n * arg0.map->dim + 3];

        double* arg0_vec[] = {
          &tmp_incs0[(n*prime_map_pcell_dim+0)*1],
          &tmp_incs0[(n*prime_map_pcell_dim+1)*1],
          &tmp_incs0[(n*prime_map_pcell_dim+2)*1],
          &tmp_incs0[(n*prime_map_pcell_dim+3)*1]};
        const double* arg5_vec[] = {
           &((double*)arg5.data)[1 * map0idx],
           &((double*)arg5.data)[1 * map1idx],
           &((double*)arg5.data)[1 * map2idx],
           &((double*)arg5.data)[1 * map3idx]};

        for ( int i=0; i<prime_map_pcell_dim * 1; i++ ){
          tmp_incs0[i+n*prime_map_pcell_dim * 1]=(double)0.0;
        }

        spMV(
          arg0_vec,
          &((double*)arg4.data)[16 * n],
          arg5_vec);
      }

      for ( int n=0; n<set_to_size_pcell; n++ ){
        for ( int i=0; i<rev_map_pcell->row_start_idx[n+1] - rev_map_pcell->row_start_idx[n]; i++ ){
          for ( int d=0; d<arg0.dim; d++ ){
            ((double*)arg0.data)[arg0.dim * n + d] += 
              tmp_incs0[rev_map_pcell->reversed_map[rev_map_pcell->row_start_idx[n]+i] * arg0.dim + d];
          }
        }
      }
    }
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer += (float)set->size * arg0.size * 2.0f;
  OP_kernels[3].transfer += (float)set->size * arg5.size;
  OP_kernels[3].transfer += (float)set->size * arg4.size;
  OP_kernels[3].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
