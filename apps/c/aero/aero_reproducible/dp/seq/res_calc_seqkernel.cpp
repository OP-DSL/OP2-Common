//
// auto-generated by op2.py
//

//user function
#include "../res_calc.h"

// host stub function
void op_par_loop_res_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg4,
  op_arg arg8,
  op_arg arg9,
  op_arg arg13){

  int nargs = 17;
  op_arg args[17];

  arg0.idx = 0;
  args[0] = arg0;
  for ( int v=1; v<4; v++ ){
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 2, "double", OP_READ);
  }

  arg4.idx = 0;
  args[4] = arg4;
  for ( int v=1; v<4; v++ ){
    args[4 + v] = op_arg_dat(arg4.dat, v, arg4.map, 1, "double", OP_READ);
  }

  args[8] = arg8;
  arg9.idx = 0;
  args[9] = arg9;
  for ( int v=1; v<4; v++ ){
    args[9 + v] = op_opt_arg_dat(arg9.opt, arg9.dat, v, arg9.map, 1, "double", OP_INC);
  }

  arg13.idx = 0;
  args[13] = arg13;
  for ( int v=1; v<4; v++ ){
    args[13 + v] = op_opt_arg_dat(arg13.opt, arg13.dat, v, arg13.map, 2, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: res_calc\n");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    op_map prime_map_pcell = arg9.map;
    op_reversed_map rev_map_pcell = OP_reversed_map_list[prime_map_pcell->index];

    if (rev_map_pcell != NULL ) {
      int prime_map_pcell_dim = prime_map_pcell->dim;
      int set_from_size_pcell = prime_map_pcell->from->size + prime_map_pcell->from->exec_size;
      int set_to_size_pcell = prime_map_pcell->to->size + prime_map_pcell->to->exec_size + prime_map_pcell->to->nonexec_size;

      double *tmp_incs9 = NULL;
      if (arg9.opt) {
        int required_tmp_incs_size9 = set_from_size_pcell * prime_map_pcell_dim * arg9.dat->size;
        if (op_repr_incs[arg9.dat->index].tmp_incs == NULL) {
          op_repr_incs[arg9.dat->index].tmp_incs = (void *)op_malloc(required_tmp_incs_size9);
          op_repr_incs[arg9.dat->index].tmp_incs_size = required_tmp_incs_size9;
        }
        else
        if (op_repr_incs[arg9.dat->index].tmp_incs_size < required_tmp_incs_size9) {
          op_realloc(op_repr_incs[arg9.dat->index].tmp_incs, required_tmp_incs_size9);
          op_repr_incs[arg9.dat->index].tmp_incs_size = required_tmp_incs_size9;
        }
        tmp_incs9 = (double *)op_repr_incs[arg9.dat->index].tmp_incs;
      }

      double *tmp_incs13 = NULL;
      if (arg13.opt) {
        int required_tmp_incs_size13 = set_from_size_pcell * prime_map_pcell_dim * arg13.dat->size;
        if (op_repr_incs[arg13.dat->index].tmp_incs == NULL) {
          op_repr_incs[arg13.dat->index].tmp_incs = (void *)op_malloc(required_tmp_incs_size13);
          op_repr_incs[arg13.dat->index].tmp_incs_size = required_tmp_incs_size13;
        }
        else
        if (op_repr_incs[arg13.dat->index].tmp_incs_size < required_tmp_incs_size13) {
          op_realloc(op_repr_incs[arg13.dat->index].tmp_incs, required_tmp_incs_size13);
          op_repr_incs[arg13.dat->index].tmp_incs_size = required_tmp_incs_size13;
        }
        tmp_incs13 = (double *)op_repr_incs[arg13.dat->index].tmp_incs;
      }

      for ( int n=0; n<set_size; n++ ){
        if (n==set->core_size) {
          op_mpi_wait_all(nargs, args);
        }
        int map0idx = arg0.map_data[n * arg0.map->dim + 0];
        int map1idx = arg0.map_data[n * arg0.map->dim + 1];
        int map2idx = arg0.map_data[n * arg0.map->dim + 2];
        int map3idx = arg0.map_data[n * arg0.map->dim + 3];

        const double* arg0_vec[] = {
           &((double*)arg0.data)[2 * map0idx],
           &((double*)arg0.data)[2 * map1idx],
           &((double*)arg0.data)[2 * map2idx],
           &((double*)arg0.data)[2 * map3idx]};
        const double* arg4_vec[] = {
           &((double*)arg4.data)[1 * map0idx],
           &((double*)arg4.data)[1 * map1idx],
           &((double*)arg4.data)[1 * map2idx],
           &((double*)arg4.data)[1 * map3idx]};
        double* arg9_vec[] = {
          &tmp_incs9[(n*prime_map_pcell_dim+0)*1],
          &tmp_incs9[(n*prime_map_pcell_dim+1)*1],
          &tmp_incs9[(n*prime_map_pcell_dim+2)*1],
          &tmp_incs9[(n*prime_map_pcell_dim+3)*1]};
        double* arg13_vec[] = {
          &tmp_incs13[(n*prime_map_pcell_dim+0)*2],
          &tmp_incs13[(n*prime_map_pcell_dim+1)*2],
          &tmp_incs13[(n*prime_map_pcell_dim+2)*2],
          &tmp_incs13[(n*prime_map_pcell_dim+3)*2]};

        if (arg9.opt) {
          for ( int i=0; i<prime_map_pcell_dim * 1; i++ ){
            tmp_incs9[i+n*prime_map_pcell_dim * 1]=(double)0.0;
          }
        }

        if (arg13.opt) {
          for ( int i=0; i<prime_map_pcell_dim * 2; i++ ){
            tmp_incs13[i+n*prime_map_pcell_dim * 2]=(double)0.0;
          }
        }

        res_calc(
          arg0_vec,
          arg4_vec,
          &((double*)arg8.data)[16 * n],
          arg9_vec,
          arg13_vec);
      }

      if (arg9.opt) {
        for ( int n=0; n<set_to_size_pcell; n++ ){
          for ( int i=0; i<rev_map_pcell->row_start_idx[n+1] - rev_map_pcell->row_start_idx[n]; i++ ){
            for ( int d=0; d<arg9.dim; d++ ){
              ((double*)arg9.data)[arg9.dim * n + d] += 
                tmp_incs9[rev_map_pcell->reversed_map[rev_map_pcell->row_start_idx[n]+i] * arg9.dim + d];
            }
          }
        }
      }

      if (arg13.opt) {
        for ( int n=0; n<set_to_size_pcell; n++ ){
          for ( int i=0; i<rev_map_pcell->row_start_idx[n+1] - rev_map_pcell->row_start_idx[n]; i++ ){
            for ( int d=0; d<arg13.dim; d++ ){
              ((double*)arg13.data)[arg13.dim * n + d] += 
                tmp_incs13[rev_map_pcell->reversed_map[rev_map_pcell->row_start_idx[n]+i] * arg13.dim + d];
            }
          }
        }
      }
    }
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
  OP_kernels[0].transfer += (float)set->size * arg0.size;
  OP_kernels[0].transfer += (float)set->size * arg4.size;
  OP_kernels[0].transfer += (float)set->size * arg9.size * 2.0f;
  OP_kernels[0].transfer += (float)set->size * arg13.size * 2.0f;
  if (arg8.opt) {
    OP_kernels[0].transfer += (float)set->size * arg8.size;
  }
  OP_kernels[0].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
