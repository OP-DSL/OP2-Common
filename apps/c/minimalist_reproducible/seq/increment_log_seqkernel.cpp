//
// auto-generated by op2.py
//

//user function
#include "../increment_log.h"
#include <mpi.h>

// host stub function
void op_par_loop_increment_log(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  int nargs = 3;
  op_arg args[3];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: increment_log\n");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {     
      
      
    op_map prime_map = arg1.map; //TODO works only with arg1...
    op_reversed_map rev_map = OP_reversed_map_list[prime_map->index];
    
    
    
    if (rev_map != NULL) {
        
        op_mpi_wait_all(nargs, args);
        for (int c=0; c<rev_map->number_of_colors;c++){
            for ( int i=rev_map->color_based_exec_row_starts[c]; i<rev_map->color_based_exec_row_starts[c+1]; i++ ){
                int n=rev_map->color_based_exec[i];
                  printf("Executing edge loc: %d\t glob: %d\t col: %d\t, c2: %d\n",n,OP_set_global_ids_list[prime_map->from->index]->global_ids[n],c, OP_reversed_map_list[prime_map->index]->reproducible_coloring[n]);
          /*        if (n==set->core_size) {
                    op_mpi_wait_all(nargs, args);
                  }*/
                  int map1idx = arg1.map_data[n * arg1.map->dim + 0];
                  int map2idx = arg1.map_data[n * arg1.map->dim + 1];

                  increment_log(
                    &((double*)arg0.data)[1 * n],
                    &((double*)arg1.data)[1 * map1idx],
                    &((double*)arg1.data)[1 * map2idx]);
            }
            
        }
    }
    
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
  OP_kernels[0].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[0].transfer += (float)set->size * arg0.size;
  OP_kernels[0].transfer += (float)set->size * arg1.map->dim * 4.0f;
}
