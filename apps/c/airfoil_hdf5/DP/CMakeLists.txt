project(OP2-Airfoil-HDF5-DP)

# Require CMake 2.8
cmake_minimum_required(VERSION 2.8)

# Load OP2 configuration (Set OP2_DIR to the directory containing OP2Config.cmake)
find_package(OP2 REQUIRED)

# All these require HDF5
if (TARGET op2_hdf5)

  # Default build type (can be overridden by user)
  if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING
      "Choose the type of build, options are: Debug MinSizeRel Release RelWithDebInfo." FORCE)
  endif()

  include_directories(${OP2_INCLUDE_DIRS})

  # simple sequential version
  if (TARGET op2_seq)
    add_executable(airfoil_hdf5_dp_seq airfoil.cpp save_soln.h adt_calc.h res_calc.h bres_calc.h)
    target_link_libraries(airfoil_hdf5_dp_seq op2_seq op2_hdf5)
    install(TARGETS airfoil_hdf5_dp_seq RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # x86 version using kernel files generated by op2.m
  if (TARGET op2_openmp)
    add_executable(airfoil_hdf5_dp_openmp airfoil_op.cpp airfoil_kernels.cpp
      save_soln.h adt_calc.h res_calc.h bres_calc.h update.h)
    target_link_libraries(airfoil_hdf5_dp_openmp op2_openmp op2_hdf5)
    install(TARGETS airfoil_hdf5_dp_openmp RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # CUDA version using kernel files generated by op2.m
  if (TARGET op2_cuda)
    find_package(CUDA)
    if (CUDA_FOUND)
      cuda_add_executable(airfoil_hdf5_dp_cuda airfoil_op.cpp airfoil_kernels.cu
        save_soln.h adt_calc.h res_calc.h bres_calc.h update.h)
      target_link_libraries(airfoil_hdf5_dp_cuda op2_cuda op2_hdf5)
      install(TARGETS airfoil_hdf5_dp_cuda RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
    endif()
  endif()

  # MPI with sequential-nodes version
  if (TARGET op2_mpi)
    add_definitions(${OP2_MPI_DEFINITIONS})
    include_directories(${OP2_MPI_INCLUDE_DIRS})
    add_executable(airfoil_hdf5_dp_mpi airfoil_mpi.cpp save_soln.h adt_calc.h res_calc.h bres_calc.h update.h)
    target_link_libraries(airfoil_hdf5_dp_mpi op2_mpi)
    add_executable(convert_mesh convert_mesh.cpp)
    target_link_libraries(convert_mesh op2_mpi)
    install(TARGETS airfoil_hdf5_dp_mpi convert_mesh RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

endif()
