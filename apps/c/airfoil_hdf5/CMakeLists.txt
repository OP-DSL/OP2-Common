project(OP2-Airfoil-HDF5-DP)

# Require CMake 2.8
cmake_minimum_required(VERSION 2.8)

include(../common.cmake)

# All these require HDF5
if (TARGET op2_hdf5 AND OP2_BUILD_DP)

  set(KERNEL_HEADERS dp/save_soln.h dp/adt_calc.h dp/res_calc.h dp/bres_calc.h)
  # simple sequential version
  if (TARGET op2_seq)
    add_executable(airfoil_hdf5_dp_seq dp/airfoil.cpp)
    target_link_libraries(airfoil_hdf5_dp_seq op2_seq op2_hdf5)
    install(TARGETS airfoil_hdf5_dp_seq RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # x86 version using kernel files generated by op2.m
  if (TARGET op2_openmp)
    add_executable(airfoil_hdf5_dp_openmp dp/airfoil_op.cpp dp/airfoil_kernels.cpp
      ${KERNEL_HEADERS})
    target_link_libraries(airfoil_hdf5_dp_openmp op2_openmp op2_hdf5)
    set_target_properties(airfoil_hdf5_dp_openmp PROPERTIES COMPILE_FLAGS
      "${OpenMP_CXX_FLAGS}" LINK_FLAGS "${OpenMP_CXX_FLAGS}")
    install(TARGETS airfoil_hdf5_dp_openmp RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # CUDA version using kernel files generated by op2.m
  if (TARGET op2_cuda)
    find_package(CUDA)
    if (CUDA_FOUND)
      cuda_add_executable(airfoil_hdf5_dp_cuda dp/airfoil_op.cpp dp/airfoil_kernels.cu
        ${KERNEL_HEADERS})
      target_link_libraries(airfoil_hdf5_dp_cuda op2_cuda op2_hdf5)
      install(TARGETS airfoil_hdf5_dp_cuda RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
    endif()
  endif()

  # MPI with sequential-nodes version
  if (TARGET op2_mpi)
    add_definitions(${OP2_MPI_DEFINITIONS})
    include_directories(${OP2_MPI_INCLUDE_DIRS})
    add_executable(airfoil_hdf5_dp_mpi dp/airfoil_mpi.cpp ${KERNEL_HEADERS})
    target_link_libraries(airfoil_hdf5_dp_mpi op2_mpi)
    add_executable(convert_mesh dp/convert_mesh.cpp)
    target_link_libraries(convert_mesh op2_mpi)
    install(TARGETS airfoil_hdf5_dp_mpi convert_mesh RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

endif()
