//
// auto-generated by op2.m on 04-Aug-2012 10:40:43
//

// user function

__device__
#include "update.h"


// CUDA kernel function

__global__ void op_cuda_update(
  double *arg0,
  int *arg1,
  int   offset_s,
  int   set_size ) {

  double arg0_l[4];
  int arg1_l[1];
  for (int d=0; d<1; d++) arg1_l[d]=ZERO_int;
  int   tid = threadIdx.x%OP_WARPSIZE;

  extern __shared__ char shared[];

  char *arg_s = shared + offset_s*(threadIdx.x/OP_WARPSIZE);

  // process set elements

  for (int n=threadIdx.x+blockIdx.x*blockDim.x;
       n<set_size; n+=blockDim.x*gridDim.x) {

    int offset = n - tid;
    int nelems = MIN(OP_WARPSIZE,set_size-offset);

    // copy data into shared memory, then into local

    for (int m=0; m<4; m++)
      ((double *)arg_s)[tid+m*nelems] = arg0[tid+m*nelems+offset*4];

    for (int m=0; m<4; m++)
      arg0_l[m] = ((double *)arg_s)[m+tid*4];


    // user-supplied kernel call


    update(  arg0_l,
             arg1_l );

    // copy back into shared memory, then to device

    for (int m=0; m<4; m++)
      ((double *)arg_s)[m+tid*4] = arg0_l[m];

    for (int m=0; m<4; m++)
      arg0[tid+m*nelems+offset*4] = ((double *)arg_s)[tid+m*nelems];

  }

  // global reductions

  for(int d=0; d<1; d++)
    op_reduction<OP_INC>(&arg1[d+blockIdx.x*1],arg1_l[d]);
}


// host stub function

void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1 ){

  int *arg1h = (int *)arg1.data;

  int    nargs   = 2;
  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  update\n");
  }

  op_mpi_halo_exchanges(set, nargs, args);

  // initialise timers

  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timers_core(&cpu_t1, &wall_t1);

  if (set->size >0) {


    // set CUDA execution parameters

    #ifdef OP_BLOCK_SIZE_1
      int nthread = OP_BLOCK_SIZE_1;
    #else
      // int nthread = OP_block_size;
      int nthread = 128;
    #endif

    int nblocks = 200;

    // transfer global reduction data to GPU

    int maxblocks = nblocks;

    int reduct_bytes = 0;
    int reduct_size  = 0;
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));
    reduct_size   = MAX(reduct_size,sizeof(int));

    reallocReductArrays(reduct_bytes);

    reduct_bytes = 0;
    arg1.data   = OP_reduct_h + reduct_bytes;
    arg1.data_d = OP_reduct_d + reduct_bytes;
    for (int b=0; b<maxblocks; b++)
      for (int d=0; d<1; d++)
        ((int *)arg1.data)[d+b*1] = ZERO_int;
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));

    mvReductArraysToDevice(reduct_bytes);

    // work out shared memory requirements per element

    int nshared = 0;
    nshared = MAX(nshared,sizeof(double)*4);

    // execute plan

    int offset_s = nshared*OP_WARPSIZE;

    nshared = MAX(nshared*nthread,reduct_size*nthread);

    op_cuda_update<<<nblocks,nthread,nshared>>>( (double *) arg0.data_d,
                                                 (int *) arg1.data_d,
                                                 offset_s,
                                                 set->size );

    cutilSafeCall(cudaThreadSynchronize());
    cutilCheckMsg("op_cuda_update execution failed\n");

    // transfer global reduction data back to CPU

    mvReductArraysToHost(reduct_bytes);

    for (int b=0; b<maxblocks; b++)
      for (int d=0; d<1; d++)
        arg1h[d] = arg1h[d] + ((int *)arg1.data)[d+b*1];

  arg1.data = (char *)arg1h;

  op_mpi_reduce(&arg1,arg1h);

  }


  op_mpi_set_dirtybit(nargs, args);

  // update kernel record

  op_timers_core(&cpu_t2, &wall_t2);
  op_timing_realloc(1);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;
  OP_kernels[1].time     += wall_t2 - wall_t1;
  OP_kernels[1].transfer += (float)set->size * arg0.size * 2.0f;
}
