This directory example applications using the C and C++ OP2 library.

CMake build
-----------

The recommended way of building the examples is using CMake (http://cmake.org).

For a standard developer build with debugging symbols and all features enabled
run (the installation prefix is the current directory):

  ./cmake.local

This assumes the OP2 libraries have been built using the cmake.local build
script in the OP2 library directory. CMake will detect which libraries have
been built, import these and build the application versions for which the
required libraries are available, automatically skipping others.

By default, the binaries are installed to the directory specified as
OP2_APPS_DIR, a variable imported from the OP2 library build. Unless this
variable is empty, the value of CMAKE_INSTALL_PREFIX is ignored.

A configuration file 'op2.conf' is automatically generated and placed in the
installation directory. Source this file prior to running any of the
applications to set shared library load paths and create links to input data:

  . op2.conf

The build is highly customisable:
* Individually select which applications to build
* Choose the installation prefix
* Change compiler flags
* Set paths to non-standard installations of dependencies
* etc.

Since CMake builds are out-of-source, you can have as many builds as you want
wherever you want from the same source with different options.

For custom builds, there are several options:

1. Write your own build script based on cmake.local and customise it to your
   needs.

2. Use a cmake GUI (ccmake or cmake-gui) to set custom build options:

     mkdir build && cd build && ccmake ..

   will generate Makefiles in the subdirectory 'build'.

3. Edit the cache file build/CMakeCache.txt with a text editor and re-run
   cmake.

Each example application contains its own top level CMakeLists.txt file and
can be built individually.

Regular Makefile build
----------------------

To compile using the regular Makefiles provided, it is required to:

1. Set the environment variable CUDA_INSTALL_PATH to the appropriate path.
   For instance, on CX1 under bash, if we want to use cuda 4.0.11,
   we will have to set it as following:

      export CUDA_INSTALL_PATH=/apps/cuda/4.0.11

2. Set the environment variable OP2_INSTALL_PATH to the base op2 directory,
   i.e. the one containing the "c" and "fortran" directories.

3. Set the environment variable OP2_COMPILER to either 'intel' or 'gnu' to
   select building with either icc or gcc compilers.

4. Set the environment variables MPI_INSTALL_PATH, PARMETIS_INSTALL_PATH and /
   or PTSCOTCH_INSTALL_PATH to the installation directories of these libraries.
   For instance:

      export PARMETIS_INSTALL_PATH=/home/gihan/ParMetis-3.1.1
      
      and / or 
      
      export PTSCOTCH_INSTALL_PATH=/home/gihan/PT-Scotch
