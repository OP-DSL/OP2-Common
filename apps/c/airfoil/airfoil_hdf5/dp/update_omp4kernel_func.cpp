//
// auto-generated by op2.py
//

void update_omp4_kernel(
  double *data0,
  double *data1,
  double *data2,
  double *data3,
  double *arg4,
  int count,
  int num_teams,
  int nthread,
  int direct_update_stride_OP2CONSTANT){

  double arg4_l = *arg4;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) is_device_ptr(data0,data1,data2,data3)\
    map(tofrom: arg4_l) reduction(+:arg4_l)
  #pragma omp distribute parallel for schedule(static,1) reduction(+:arg4_l)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *qold = &data0[n_op];
    double *q = &data1[n_op];
    double *res = &data2[n_op];
    const double *adt = &data3[1*n_op];
    double *rms = &arg4_l;

    //inline function
      
    double del, adti, rmsl;
  
    rmsl = 0.0f;
    adti = 1.0f / (*adt);
  
    for (int n = 0; n < 4; n++) {
      del = adti * res[n*direct_update_stride_OP2CONSTANT];
      q[n*direct_update_stride_OP2CONSTANT] = qold[n*direct_update_stride_OP2CONSTANT] - del;
      res[n*direct_update_stride_OP2CONSTANT] = 0.0f;
      rmsl += del * del;
    }
    *rms += rmsl;
    //end inline func
  }

  *arg4 = arg4_l;
}
