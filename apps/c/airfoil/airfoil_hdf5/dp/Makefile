#
# The following environment variables should be predefined:
#
# CUDA_INSTALL_PATH
# PARMETIS_INSTALL_PATH
# PTSCOTCH_INSTALL_PATH
# HDF5_INSTALL_PATH
#
# OP2_INSTALL_PATH
# OP2_COMPILER (gnu,intel,etc)
#

include ../../../../make-common.inc

ifeq ($(OP2_COMPILER),gnu)
  CPP		= g++
  CPPFLAGS	= -O2 -fPIC -DUNIX -Wall -Wextra
  OMPFLAGS	= -fopenmp
  MPICPP	= $(MPICXX_PATH)
  MPIFLAGS	= $(CCFLAGS)
else
ifeq ($(OP2_COMPILER),intel)
  CPP		= icpc
  CCFLAGS	= -O0 -g -xHost -DMPICH_IGNORE_CXX_SEEK -restrict -inline-forceinline -qopt-report=5 -DVECTORIZE #-parallel #-DCOMM_PERF #-DDEBUG #-vec-report
  # CCFLAGS	= -O3 -xHost -DMPICH_IGNORE_CXX_SEEK -fno-alias -inline-forceinline -qopt-report -parallel -prec-div -DVECTORIZE #-parallel #-DCOMM_PERF #-DDEBUG #-vec-report
  CPPFLAGS 	= $(CCFLAGS)
  OMPFLAGS	= -qopenmp
  MPICPP	= $(MPICXX_PATH)
  # NVCCFLAGS	~= -ccbin=$(MPICPP)
  MPIFLAGS	= $(CPPFLAGS)
else
ifeq ($(OP2_COMPILER),xl)
  CPP		= xlc++
  CCFLAGS	= -O3 -qarch=pwr8 -qtune=pwr8 -qhot -qxflag=nrcptpo -qinline=level=10 -Wx,-nvvm-compile-options=-ftz=1 -Wx,-nvvm-compile-options=-prec-div=0 -Wx,-nvvm-compile-options=-prec-sqrt=0
#  CCFLAGS	= -O3 -xHost -DMPICH_IGNORE_CXX_SEEK -fno-alias -inline-forceinline -qopt-report -parallel -prec-div -DVECTORIZE #-parallel #-DCOMM_PERF #-DDEBUG #-vec-report
  CPPFLAGS 	= $(CCFLAGS)
  OMPFLAGS	= -qsmp=omp -qthreaded
  OMPOFFLOAD	= -qsmp=omp -qoffload -Xptxas -v -g1
  MPICPP	= $(MPICXX_PATH)
  MPIFLAGS	= $(CPPFLAGS)
else
ifeq ($(OP2_COMPILER),pgi)
  CPP       	= pgc++
  CCFLAGS  	= -O3
  CPPFLAGS 	= $(CCFLAGS)
  OMPFLAGS 	= -mp
  MPICC   	= $(MPICC_PATH)
  MPICPP   	= $(MPICXX_PATH)
  MPIFLAGS 	= $(CPPFLAGS)
  # NVCCFLAGS	+= -ccbin=$(MPICPP)
  ACCFLAGS      = -acc -Minfo=acc -ta=tesla:cc35,fastmath,lineinfo -DOPENACC -fast -Minfo=accel -Mcuda=ptxinfo
else
ifeq ($(OP2_COMPILER),cray)
  CPP           = CC
  CCFLAGS       = -O3 -h fp3 -h ipa5
  CPPFLAGS      = $(CCFLAGS)
  OMPFLAGS      = -h omp
  MPICPP        = CC
  MPIFLAGS      = $(CPPFLAGS)
else
ifeq ($(OP2_COMPILER),clang)
  CPP       	= clang++
  CCFLAGS  	= -O3 -ffast-math
  CPPFLAGS 	= $(CCFLAGS)
  OMPFLAGS 	= -I$(OMPTARGET_LIBS)/../include -fopenmp=libomp -Rpass-analysis
  OMPOFFLOAD 	= $(OMPFLAGS) -fopenmp-targets=nvptx64-nvidia-cuda -ffp-contract=fast -Xcuda-ptxas -v #-Xclang -target-feature -Xclang +ptx35
  MPICC   	= $(MPICC_PATH)
  MPICPP   	= $(MPICXX_PATH)
  MPIFLAGS 	= $(CPPFLAGS)
else
print:
	@echo "unrecognised value for OP2_COMPILER"
endif
endif
endif
endif
endif
endif



#
# set flags for NVCC compilation and linking
#
ifndef NV_ARCH
  MESSAGE=select an NVIDA device to compile in CUDA, e.g. make NV_ARCH=KEPLER
  NV_ARCH=Kepler
endif
ifeq ($(NV_ARCH),Fermi)
  CODE_GEN_CUDA=-gencode arch=compute_20,code=sm_21
else
ifeq ($(NV_ARCH),Kepler)
  CODE_GEN_CUDA=-gencode arch=compute_35,code=sm_35
else
ifeq ($(NV_ARCH),Maxwell)
  CODE_GEN_CUDA=-gencode arch=compute_50,code=sm_50
else
ifeq ($(NV_ARCH),Pascal)
  CODE_GEN_CUDA=-gencode arch=compute_60,code=sm_60
else
ifeq ($(NV_ARCH),Volta)
  CODE_GEN_CUDA=-gencode arch=compute_70,code=sm_70
endif
endif
endif
endif
endif

ifdef MAX_REG_COUNT
  REG_COUNT = --maxrregcount $(MAX_REG_COUNT)
  PGI_REG_COUNT = -ta=nvidia,maxregcount:$(MAX_REG_COUNT)
  ifeq ($(OP2_COMPILER),xl)
    OMP4_REG_COUNT= -Xptxas -maxrregcount=$(MAX_REG_COUNT)
  else
  ifeq ($(OP2_COMPILER),clang)
    OMP4_REG_COUNT= -Xcuda-ptxas --maxrregcount=$(MAX_REG_COUNT)
  endif
  endif
endif

NVCCFLAGS += $(CODE_GEN_CUDA) -m64 -Xptxas=-v --use_fast_math -O3 $(REG_COUNT) -lineinfo  #-g -G -O0

VAR		= #-DOP_PART_SIZE_1=160 -DOP_PART_SIZE_2=320 -DOP_PART_SIZE_3=64 #-DOP_BLOCK_SIZE_0=64 -DOP_BLOCK_SIZE_1=64 -DOP_BLOCK_SIZE_2=64 -DOP_BLOCK_SIZE_3=64 -DOP_BLOCK_SIZE_4=64


#
# master to make all versions
#
ALL_TARGETS = clean airfoil_mpi airfoil_cuda airfoil_openmp airfoil_seq airfoil_genseq airfoil_mpi_genseq airfoil_mpi_cuda airfoil_mpi_cuda_hyb airfoil_mpi_openmp convert_mesh_seq convert_mesh_mpi
ifeq ($(OP2_COMPILER),pgi)
	ALL_TARGETS += airfoil_openacc airfoil_mpi_openacc
endif
ifeq ($(OP2_COMPILER),intel)
	ALL_TARGETS += airfoil_mpi_vec
endif

all: $(ALL_TARGETS)

#
# simple sequential version
#

airfoil_seq: airfoil.cpp save_soln.h adt_calc.h res_calc.h bres_calc.h
	     $(MPICPP) $(CPPFLAGS) airfoil.cpp $(OP2_INC) $(HDF5_INC) $(OP2_LIB) -lop2_seq -lop2_hdf5 $(HDF5_LIB) -o airfoil_seq

airfoil_genseq: airfoil_op.cpp seq/airfoil_seqkernels.cpp
	     $(MPICPP) $(CPPFLAGS) $^ \
	     $(OP2_INC) $(HDF5_INC) \
	     $(OP2_LIB) -lop2_seq -lop2_hdf5 \
	     $(HDF5_LIB) \
	     -o airfoil_genseq

#
# x86 version using kernel files generated by op2.py
#

airfoil_openmp:	airfoil_op.cpp openmp/airfoil_kernels.cpp \
		openmp/save_soln_kernel.cpp  save_soln.h \
		openmp/adt_calc_kernel.cpp   adt_calc.h  \
		openmp/res_calc_kernel.cpp   res_calc.h  \
		openmp/bres_calc_kernel.cpp  bres_calc.h \
		openmp/update_kernel.cpp     update.h    \
                Makefile
		$(MPICPP) $(VAR) $(CPPFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_LIB) $(HDF5_INC) -Iopenmp -I. \
		airfoil_op.cpp -lm openmp/airfoil_kernels.cpp -lm -lop2_openmp -lop2_hdf5 $(HDF5_LIB) -o airfoil_openmp

#
# OpenACC version using kernel files generated by op2.py
#

airfoil_openacc: airfoil_op.cpp openacc/airfoil_acckernels.c \
                openacc/save_soln_acckernel.c  \
                openacc/adt_calc_acckernel.c   \
                openacc/res_calc_acckernel.c   \
                openacc/bres_calc_acckernel.c  \
                openacc/update_acckernel.c   \
                Makefile
		$(MPICC) $(VAR) $(CPPFLAGS) $(ACCFLAGS) $(OMPFLAGS) $(OP2_INC) $(PGI_REG_COUNT) -Iopenacc -I. \
                openacc/airfoil_acckernels.c -c -o openacc/airfoil_acckernels.o
		$(MPICPP) $(VAR) $(CPPFLAGS) $(ACCFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_LIB) $(HDF5_INC) \
                airfoil_op.cpp -lm openacc/airfoil_acckernels.o -lm $(CUDA_LIB) -lcudart -lop2_cuda -lop2_hdf5 $(HDF5_LIB) -o airfoil_openacc


#
# CUDA version using kernel files generated by op2.py
#

airfoil_cuda:	airfoil_op.cpp cuda/airfoil_kernels_cu.o Makefile
		$(MPICPP) $(VAR) $(CPPFLAGS) airfoil_op.cpp cuda/airfoil_kernels_cu.o \
		$(CUDA_INC) $(OP2_INC) $(HDF5_INC) \
		$(OP2_LIB) $(CUDA_LIB) -lcudart -lop2_cuda -lop2_hdf5 $(HDF5_LIB) -o airfoil_cuda

cuda/airfoil_kernels_cu.o:	cuda/airfoil_kernels.cu      \
		cuda/save_soln_kernel.cu save_soln.h \
		cuda/adt_calc_kernel.cu  adt_calc.h  \
		cuda/res_calc_kernel.cu  res_calc.h  \
		cuda/bres_calc_kernel.cu bres_calc.h \
		cuda/update_kernel.cu    update.h    \
                Makefile
		nvcc  $(VAR) $(INC) $(NVCCFLAGS) $(OP2_INC) $(HDF5_INC) -Icuda -I. \
		-c -o cuda/airfoil_kernels_cu.o cuda/airfoil_kernels.cu

#
#  CUDA with clang
#

airfoil_cuda_clang:     airfoil_op.cpp cuda/airfoil_kernels_cu_clang.o Makefile
	$(MPICPP) $(VAR) $(CPPFLAGS) airfoil_op.cpp cuda/airfoil_kernels_cu_clang.o \
        $(CUDA_INC) $(OP2_INC) $(HDF5_INC) \
	$(OP2_LIB) $(CUDA_LIB) -lcudart -lop2_cuda -lop2_hdf5 $(HDF5_LIB) -o airfoil_cuda_clang

cuda/airfoil_kernels_cu_clang.o:     cuda/airfoil_kernels.cu      \
                cuda/save_soln_kernel.cu save_soln.h \
                cuda/adt_calc_kernel.cu  adt_calc.h  \
                cuda/res_calc_kernel.cu  res_calc.h  \
                cuda/bres_calc_kernel.cu bres_calc.h \
                cuda/update_kernel.cu    update.h    \
                Makefile
	clang++  $(VAR) $(INC) -m64 -O3 $(OP2_INC) $(HDF5_INC) -gline-tables-only -I$(MPI_INSTALL_PATH)/include -Icuda -I. \
	-c -o cuda/airfoil_kernels_cu_clang.o cuda/airfoil_kernels.cu --cuda-gpu-arch=sm_35 -ffast-math $(OMP4_REG_COUNT) -Xcuda-ptxas -v

#
# mpi with sequential-nodes version
#

airfoil_mpi: airfoil.cpp save_soln.h adt_calc.h res_calc.h bres_calc.h Makefile
	$(MPICPP) $(MPIFLAGS) airfoil.cpp $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC) \
	$(OP2_LIB) -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o airfoil_mpi

#
# mpi genseq version using kernel files generated by op2.py
#

airfoil_mpi_genseq: airfoil_op.cpp seq/airfoil_seqkernels.cpp \
                seq/save_soln_seqkernel.cpp  save_soln.h \
                seq/adt_calc_seqkernel.cpp   adt_calc.h  \
                seq/res_calc_seqkernel.cpp   res_calc.h  \
                seq/bres_calc_seqkernel.cpp  bres_calc.h \
                seq/update_seqkernel.cpp     update.h    \
                Makefile
		$(MPICPP) $(VAR) $(CPPFLAGS) $(OP2_INC) $(OP2_INC) $(HDF5_INC) \
		$(PARMETIS_INC) $(PTSCOTCH_INC) -Iseq  -I. \
		airfoil_op.cpp -lm seq/airfoil_seqkernels.cpp $(OP2_LIB) -lop2_mpi \
		$(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o airfoil_mpi_genseq

#
# mpi vectorized seq version using kernel files generated by op2.py
#

airfoil_mpi_vec: airfoil_op.cpp vec/airfoil_veckernels.cpp \
                vec/save_soln_veckernel.cpp  save_soln.h \
                vec/adt_calc_veckernel.cpp   adt_calc.h  \
                vec/res_calc_veckernel.cpp   res_calc.h  \
                vec/bres_calc_veckernel.cpp  bres_calc.h \
                vec/update_veckernel.cpp     update.h    \
                Makefile
		$(MPICPP) $(VAR) $(CPPFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_INC) $(HDF5_INC) \
                $(PARMETIS_INC) $(PTSCOTCH_INC) -Ivec  -I. \
                airfoil_op.cpp -lm vec/airfoil_veckernels.cpp $(OP2_LIB) -lop2_mpi \
                $(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o airfoil_mpi_vec


#
# mpi openmp version using kernel files generated by op2.py
#

airfoil_mpi_openmp: airfoil_op.cpp openmp/airfoil_kernels.cpp \
                openmp/save_soln_kernel.cpp  save_soln.h \
                openmp/adt_calc_kernel.cpp   adt_calc.h  \
                openmp/res_calc_kernel.cpp   res_calc.h  \
                openmp/bres_calc_kernel.cpp  bres_calc.h \
                openmp/update_kernel.cpp     update.h    \
                Makefile
		$(MPICPP) $(VAR) $(CPPFLAGS) $(OMPFLAGS) $(OP2_INC) $(OP2_INC) $(HDF5_INC) \
		$(PARMETIS_INC) $(PTSCOTCH_INC) -Iopenmp -I. \
		airfoil_op.cpp -lm openmp/airfoil_kernels.cpp $(OP2_LIB) -lop2_mpi \
		$(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o airfoil_mpi_openmp

#
# mpi openmp 4.5 version using kernel files generated by op2.py
#

airfoil_openmp4: airfoil_op.cpp openmp4/airfoil_omp4kernels.cpp openmp4/airfoil_omp4kernel_funcs.cpp \
			openmp4/save_soln_omp4kernel_func.cpp  save_soln.h openmp4/save_soln_omp4kernel.cpp \
			openmp4/adt_calc_omp4kernel_func.cpp   adt_calc.h  openmp4/adt_calc_omp4kernel.cpp \
			openmp4/res_calc_omp4kernel_func.cpp   res_calc.h  openmp4/res_calc_omp4kernel.cpp \
			openmp4/bres_calc_omp4kernel_func.cpp  bres_calc.h openmp4/bres_calc_omp4kernel.cpp \
			openmp4/update_omp4kernel_func.cpp     update.h    openmp4/update_omp4kernel.cpp \
			Makefile
	$(CPP) $(VAR) $(CPPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(HDF5_INC) $(OMP4_REG_COUNT) \
		-Iopenmp4/  -I. -c openmp4/airfoil_omp4kernel_funcs.cpp  -o openmp4/airfoil_omp4kernel_funcs.o
	$(CPP) $(VAR) $(CPPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(HDF5_INC) $(OMP4_REG_COUNT) \
		-Iopenmp4/ -I. -c openmp4/airfoil_omp4kernels.cpp -o openmp4/airfoil_omp4kernels.o
	$(CPP) $(VAR) $(CPPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(HDF5_INC)  \
		airfoil_op.cpp openmp4/airfoil_omp4kernels.o openmp4/airfoil_omp4kernel_funcs.o -o airfoil_openmp4 \
	   	$(OP2_LIB) -lop2_openmp4 -lop2_hdf5 $(HDF5_LIB) -L$(CUDA_INSTALL_PATH)/lib64 -lcudart


airfoil_mpi_openmp4: airfoil_op.cpp openmp4/airfoil_omp4kernels.cpp openmp4/airfoil_omp4kernel_funcs.cpp \
			openmp4/save_soln_omp4kernel_func.cpp  save_soln.h openmp4/save_soln_omp4kernel.cpp \
			openmp4/adt_calc_omp4kernel_func.cpp   adt_calc.h  openmp4/adt_calc_omp4kernel.cpp \
			openmp4/res_calc_omp4kernel_func.cpp   res_calc.h  openmp4/res_calc_omp4kernel.cpp \
			openmp4/bres_calc_omp4kernel_func.cpp  bres_calc.h openmp4/bres_calc_omp4kernel.cpp \
			openmp4/update_omp4kernel_func.cpp     update.h    openmp4/update_omp4kernel.cpp \
			Makefile
	$(CPP) $(VAR) $(CPPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(HDF5_INC) \
		-Iopenmp4/ -I. -c openmp4/airfoil_omp4kernel_funcs.cpp  -o openmp4/airfoil_omp4kernel_funcs.o
	$(CPP) $(VAR) $(CPPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(HDF5_INC) \
		-Iopenmp4/ -I. -c openmp4/airfoil_omp4kernels.cpp -o openmp4/airfoil_omp4kernels.o
	$(MPICPP) $(VAR) $(CPPFLAGS) $(OMPOFFLOAD) $(OP2_INC) $(HDF5_INC) $(CUDA_LIB) -lcudart  \
		airfoil_op.cpp openmp4/airfoil_omp4kernels.o openmp4/airfoil_omp4kernel_funcs.o -o airfoil_mpi_openmp4 \
	   	$(OP2_LIB) -lop2_mpi_cuda $(HDF5_LIB) $(PARMETIS_LIB) $(PTSCOTCH_LIB) $(CUDA_LIB) -lcudart
#
# mpi openacc version using kernel files generated by op2.py
#

airfoil_mpi_openacc: airfoil_op.cpp openacc/airfoil_acckernels.c \
                openacc/save_soln_acckernel.c  save_soln.h \
                openacc/adt_calc_acckernel.c   adt_calc.h  \
                openacc/res_calc_acckernel.c   res_calc.h  \
                openacc/bres_calc_acckernel.c  bres_calc.h \
                openacc/update_acckernel.c     update.h    \
                Makefile
		$(MPICC) $(VAR) $(CPPFLAGS) $(ACCFLAGS) $(OMPFLAGS) $(OP2_INC) -Iopenacc/ -I. \
		openacc/airfoil_acckernels.c -c -o airfoil_acckernels.o
		$(MPICPP) $(VAR) $(CPPFLAGS) $(ACCFLAGS) $(OP2_INC) $(OP2_INC) $(HDF5_INC) \
		$(PARMETIS_INC) $(PTSCOTCH_INC) \
		airfoil_op.cpp -lm openacc/airfoil_acckernels.o -DOPENACC $(CUDA_LIB) -lcudart $(OP2_LIB) -lop2_mpi_cuda \
		$(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o airfoil_mpi_openacc
#
# mpi with CUDA version
#

airfoil_mpi_cuda: airfoil_op.cpp cuda/airfoil_kernels_mpi_cu.o Makefile
		  $(MPICPP) $(MPIFLAGS) airfoil_op.cpp -lm cuda/airfoil_kernels_mpi_cu.o \
		  $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC) \
		  $(OP2_LIB) -lop2_mpi_cuda $(PARMETIS_LIB) $(PTSCOTCH_LIB) \
		  $(HDF5_LIB) $(CUDA_LIB) -lcudart -o airfoil_mpi_cuda

cuda/airfoil_kernels_mpi_cu.o: cuda/airfoil_kernels.cu \
		cuda/save_soln_kernel.cu  save_soln.h \
		cuda/adt_calc_kernel.cu   adt_calc.h  \
		cuda/res_calc_kernel.cu   res_calc.h  \
		cuda/bres_calc_kernel.cu  bres_calc.h \
		cuda/update_kernel.cu     update.h    \
		Makefile
		nvcc  $(INC) $(NVCCFLAGS) $(OP2_INC) -I $(MPI_INSTALL_PATH)/include -Icuda -I. \
		-c -o cuda/airfoil_kernels_mpi_cu.o cuda/airfoil_kernels.cu

#
# Hybrid CPU+GPU version
#

airfoil_mpi_cuda_hyb: airfoil_op.cpp cuda/airfoil_hybkernels.o Makefile
		  $(MPICPP) $(MPIFLAGS) $(OMPFLAGS) -DOP_HYBRID_GPU airfoil_op.cpp -lm cuda/airfoil_hybkernels.o cuda/airfoil_hybkernels2.o \
		  $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC) \
		  $(OP2_LIB) -lop2_mpi_cuda $(PARMETIS_LIB) $(PTSCOTCH_LIB) \
		  $(HDF5_LIB) $(CUDA_LIB) -lcudart -o airfoil_mpi_cuda_hyb

cuda/airfoil_hybkernels.o: cuda/airfoil_hybkernels.cu \
                cuda/airfoil_kernels.cu save_soln.h \
                adt_calc.h  res_calc.h  \
                bres_calc.h update.h    \
                Makefile
		nvcc -DOP_HYBRID_GPU -DGPUPASS $(INC) $(NVCCFLAGS) $(OP2_INC) -I $(MPI_INSTALL_PATH)/include -Icuda -I. \
                -c -o cuda/airfoil_hybkernels.o cuda/airfoil_hybkernels.cu
		cat cuda/airfoil_hybkernels.cu > cuda/airfoil_hybkernels2.cpp
		$(MPICPP) -DOP_HYBRID_GPU $(OMPFLAGS) $(INC) $(OP2_INC) -I $(MPI_INSTALL_PATH)/include -Icuda -I. -Iopenmp \
                -c -o cuda/airfoil_hybkernels2.o cuda/airfoil_hybkernels2.cpp
		rm cuda/airfoil_hybkernels2.cpp

#
# convert ASCI new_gird.dat to HDF5 new_grid.h5
#

convert_mesh_seq: convert_mesh.cpp
	$(MPICPP) $(MPIFLAGS) convert_mesh.cpp $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC) \
	$(OP2_LIB) -lop2_seq -lop2_hdf5 $(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o convert_mesh_seq

convert_mesh_mpi: convert_mesh_mpi.cpp
	$(MPICPP) $(MPIFLAGS) convert_mesh_mpi.cpp $(OP2_INC) $(PARMETIS_INC) $(PTSCOTCH_INC) $(HDF5_INC) \
	$(OP2_LIB) -lop2_mpi $(PARMETIS_LIB) $(PTSCOTCH_LIB) $(HDF5_LIB) -o convert_mesh_mpi




#
# cleanup
#

clean:
		rm -f airfoil_seq airfoil_genseq airfoil_openmp airfoil_cuda airfoil_mpi airfoil_mpi_genseq airfoil_mpi_vec airfoil_mpi_cuda_hyb airfoil_mpi_openmp airfoil_mpi_cuda convert_mesh_seq convert_mesh_mpi airfoil_openacc airfoil_mpi_openacc airfoil_openmp4 airfoil_mpi_openmp4 *.o cuda/*.o openacc/*.o openmp4/*.o *.optrpt
