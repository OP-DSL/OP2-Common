//
// auto-generated by op2.py
//

void update_omp4_kernel(
  double *data0,
  double *data1,
  double *data2,
  double *data3,
  double *arg4,
  int count,
  int num_teams,
  int nthread){

  double arg4_l = *arg4;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0,data1,data2,data3)\
    map(tofrom: arg4_l) reduction(+:arg4_l)
  #pragma omp distribute parallel for schedule(static,1) reduction(+:arg4_l)
  for ( int n_op=0; n_op<count; n_op++ ){

    //inline function
      
    double del, adti, rmsl;
  
    rmsl = 0.0f;
    adti = 1.0f / (data3[1*n + 0]);
  
    for (int n = 0; n < 4; n++) {
      del = adti * data2[4*n + n];
      data1[4*n + n] = data0[4*n + n] - del;
      data2[4*n + n] = 0.0f;
      rmsl += del * del;
    }
    arg4_l += rmsl;
    //end inline func
  }

  *arg4 = arg4_l;
}
