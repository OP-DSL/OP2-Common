//
// auto-generated by op2.py
//

#pragma omp declare target
inline void update( const double *qold, double *q, double *res,
                   const double *adt, double *rms) {
  double del, adti, rmsl;

  rmsl = 0.0f;
  adti = 1.0f / (*adt);

  for (int n = 0; n < 4; n++) {
    del = adti * res[n];
    q[n] = qold[n] - del;
    res[n] = 0.0f;
    rmsl += del * del;
  }
  *rms += rmsl;
}
#pragma omp end declare target

void update_omp4_kernel(
  double *data0,
  double *data1,
  double *data2,
  double *data3,
  double *arg4,
  int count){
  double arg4_l = *arg4;
  #pragma omp target teams map(to:data0,data1,data2,data3) map(tofrom: arg4_l) reduction(+:arg4_l)
  #pragma omp distribute parallel for schedule(static,1) reduction(+:arg4_l)
  for ( int n_op=0; n_op<count; n_op++ ){
    /*
    update(
      &data0[4*n_op],
      &data1[4*n_op],
      &data2[4*n_op],
      &data3[1*n_op],
      &arg4_l);
    */
    //variable mapping
    /*
    const double *qold = &data0[4*n_op];
    double *q = &data1[4*n_op];
    double *res = &data2[4*n_op];
    const double *adt = &data3[1*n_op];
    double *rms = &arg4_l;
    */
    //inline function
      
    double del, adti, rmsl;
  
    rmsl = 0.0f;
    adti = 1.0f / (data3[1*n_op + 0]);
  
    for (int n = 0; n < 4; n++) {
      del = adti * data2[4*n_op + n];
      data1[4*n_op + n] = data0[4*n_op + n] - del;
      data2[4*n_op + n] = 0.0f;
      rmsl += del * del;
    }
    arg4_l += rmsl;
    //end inline func
  }
  *arg4 = arg4_l;
}
