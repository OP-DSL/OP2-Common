//
// auto-generated by op2.py
//

void adt_calc_omp4_kernel(
  int *map0,
  double *data4,
  double *data5,
  double *data0,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data4,data5)\
    map(to: gam_ompkernel, gm1_ompkernel, cfl_ompkernel)\
    map(to:col_reord,map0,data0)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n = col_reord[e];
    int map0idx = map0[n + set_size1 * 0];
    int map1idx = map0[n + set_size1 * 1];
    int map2idx = map0[n + set_size1 * 2];
    int map3idx = map0[n + set_size1 * 3];

    //inline function
      
    double dx, dy, ri, u, v, c;
  
    ri = 1.0f / data4[4*n + 0];
    u = ri * data4[4*n + 1];
    v = ri * data4[4*n + 2];
    c = sqrt(gam_ompkernel * gm1_ompkernel * (ri * data4[4*n + 3] - 0.5f * (u * u + v * v)));
  
    dx = data0[2 * map1idx + 0] - data0[2 * map0idx + 0];
    dy = data0[2 * map1idx + 1] - data0[2 * map0idx + 1];
    data5[1*n + 0] = fabs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy);
  
    dx = data0[2 * map2idx + 0] - data0[2 * map1idx + 0];
    dy = data0[2 * map2idx + 1] - data0[2 * map1idx + 1];
    data5[1*n + 0] += fabs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy);
  
    dx = data0[2 * map3idx + 0] - data0[2 * map2idx + 0];
    dy = data0[2 * map3idx + 1] - data0[2 * map2idx + 1];
    data5[1*n + 0] += fabs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy);
  
    dx = data0[2 * map0idx + 0] - data0[2 * map3idx + 0];
    dy = data0[2 * map0idx + 1] - data0[2 * map3idx + 1];
    data5[1*n + 0] += fabs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy);
  
    data5[1*n + 0] = (data5[1*n + 0]) * (1.0f / cfl_ompkernel);
    //end inline func
  }

}
