//
// auto-generated by op2.py
//

void res_calc_omp4_kernel(
  int *map0,
  int *map2,
  double *data0,
  double *data2,
  double *data4,
  double *data6,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to)\
    map(to: gm1_ompkernel, eps_ompkernel)\
    map(to:col_reord,map0,map2,data0,data2,data4,data6)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n = col_reord[e];
    int map0idx = map0[n + set_size1 * 0];
    int map1idx = map0[n + set_size1 * 1];
    int map2idx = map2[n + set_size1 * 0];
    int map3idx = map2[n + set_size1 * 1];

    //inline function
      
    double dx, dy, mu, ri, p1, vol1, p2, vol2, f;
  
    dx = data0[2 * map0idx + 0] - data0[2 * map1idx + 0];
    dy = data0[2 * map0idx + 1] - data0[2 * map1idx + 1];
  
    ri = 1.0f / data2[4 * map2idx + 0];
    p1 = gm1_ompkernel * (data2[4 * map2idx + 3] - 0.5f * ri * (data2[4 * map2idx + 1] * data2[4 * map2idx + 1] + data2[4 * map2idx + 2] * data2[4 * map2idx + 2]));
    vol1 = ri * (data2[4 * map2idx + 1] * dy - data2[4 * map2idx + 2] * dx);
  
    ri = 1.0f / data2[4 * map3idx + 0];
    p2 = gm1_ompkernel * (data2[4 * map3idx + 3] - 0.5f * ri * (data2[4 * map3idx + 1] * data2[4 * map3idx + 1] + data2[4 * map3idx + 2] * data2[4 * map3idx + 2]));
    vol2 = ri * (data2[4 * map3idx + 1] * dy - data2[4 * map3idx + 2] * dx);
  
    mu = 0.5f * ((data4[1 * map2idx + 0]) + (data4[1 * map3idx + 0])) * eps_ompkernel;
  
    f = 0.5f * (vol1 * data2[4 * map2idx + 0] + vol2 * data2[4 * map3idx + 0]) + mu * (data2[4 * map2idx + 0] - data2[4 * map3idx + 0]);
    data6[4 * map2idx + 0] += f;
    data6[4 * map3idx + 0] -= f;
    f = 0.5f * (vol1 * data2[4 * map2idx + 1] + p1 * dy + vol2 * data2[4 * map3idx + 1] + p2 * dy) +
        mu * (data2[4 * map2idx + 1] - data2[4 * map3idx + 1]);
    data6[4 * map2idx + 1] += f;
    data6[4 * map3idx + 1] -= f;
    f = 0.5f * (vol1 * data2[4 * map2idx + 2] - p1 * dx + vol2 * data2[4 * map3idx + 2] - p2 * dx) +
        mu * (data2[4 * map2idx + 2] - data2[4 * map3idx + 2]);
    data6[4 * map2idx + 2] += f;
    data6[4 * map3idx + 2] -= f;
    f = 0.5f * (vol1 * (data2[4 * map2idx + 3] + p1) + vol2 * (data2[4 * map3idx + 3] + p2)) + mu * (data2[4 * map2idx + 3] - data2[4 * map3idx + 3]);
    data6[4 * map2idx + 3] += f;
    data6[4 * map3idx + 3] -= f;
    //end inline func
  }

}
