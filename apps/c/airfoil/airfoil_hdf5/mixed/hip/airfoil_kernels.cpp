//
// auto-generated by op2.py
//

//header
#include "op_lib_cpp.h"
#include "op_hip_rt_support.h"
#include "op_hip_reduction.h"
//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

__constant__ double gam_hip;
__constant__ double gm1_hip;
__constant__ double cfl_hip;
__constant__ double eps_hip;
__constant__ double mach_hip;
__constant__ double alpha_hip;
__constant__ double qinf_hip[4];

//Dummy kernel to make sure constants are not optimized out
__global__ void op_internal_this_is_stupid() {
((int*)&gam_hip)[0]=0;
((int*)&gm1_hip)[0]=0;
((int*)&cfl_hip)[0]=0;
((int*)&eps_hip)[0]=0;
((int*)&mach_hip)[0]=0;
((int*)&alpha_hip)[0]=0;
((int*)&qinf_hip)[0]=0;
}


void op_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (!OP_hybrid_gpu) return;
  if (!strcmp(name,"gam")) {
    hipSafeCall(hipMemcpyToSymbol(HIP_SYMBOL(gam_hip), dat, dim*size));
  }
  else
  if (!strcmp(name,"gm1")) {
    hipSafeCall(hipMemcpyToSymbol(HIP_SYMBOL(gm1_hip), dat, dim*size));
  }
  else
  if (!strcmp(name,"cfl")) {
    hipSafeCall(hipMemcpyToSymbol(HIP_SYMBOL(cfl_hip), dat, dim*size));
  }
  else
  if (!strcmp(name,"eps")) {
    hipSafeCall(hipMemcpyToSymbol(HIP_SYMBOL(eps_hip), dat, dim*size));
  }
  else
  if (!strcmp(name,"mach")) {
    hipSafeCall(hipMemcpyToSymbol(HIP_SYMBOL(mach_hip), dat, dim*size));
  }
  else
  if (!strcmp(name,"alpha")) {
    hipSafeCall(hipMemcpyToSymbol(HIP_SYMBOL(alpha_hip), dat, dim*size));
  }
  else
  if (!strcmp(name,"qinf")) {
    if (!strcmp(name,"qinf") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    hipSafeCall(hipMemcpyToSymbol(HIP_SYMBOL(qinf_hip), dat, dim*size));
  }
  else
  {
    printf("error: unknown const name\n"); exit(1);
  }
}

//user kernel files
#include "save_soln_kernel.cpp"
#include "adt_calc_kernel.cpp"
#include "res_calc_kernel.cpp"
#include "bres_calc_kernel.cpp"
#include "update_kernel.cpp"
