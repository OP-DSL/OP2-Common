//
// auto-generated by op2.py
//

// global constants
double gam_ompkernel;
double gm1_ompkernel;
double cfl_ompkernel;
double eps_ompkernel;
double mach_ompkernel;
double alpha_ompkernel;
double qinf_ompkernel[4];

// header
#include "op_lib_cpp.h"

void op_decl_const_char(int dim, char const *type,
  int size, char *dat, char const *name){
  if(!strcmp(name, "gam")) {
    memcpy(&gam_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:gam_ompkernel)
  } else if(!strcmp(name, "gm1")) {
    memcpy(&gm1_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:gm1_ompkernel)
  } else if(!strcmp(name, "cfl")) {
    memcpy(&cfl_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:cfl_ompkernel)
  } else if(!strcmp(name, "eps")) {
    memcpy(&eps_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:eps_ompkernel)
  } else if(!strcmp(name, "mach")) {
    memcpy(&mach_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:mach_ompkernel)
  } else if(!strcmp(name, "alpha")) {
    memcpy(&alpha_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:alpha_ompkernel)
  } else if(!strcmp(name, "qinf")) {
    memcpy(qinf_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:qinf_ompkernel[:4])
  }
}
// user kernel files
#include "save_soln_omp4kernel_func.cpp"
#include "adt_calc_omp4kernel_func.cpp"
#include "res_calc_omp4kernel_func.cpp"
#include "bres_calc_omp4kernel_func.cpp"
#include "update_omp4kernel_func.cpp"
