//
// auto-generated by op2.py
//

void update_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *qold = &data0[4*n_op];
    double *q = &data1[4*n_op];
    double *res = &data2[4*n_op];
    const double *adt = &data3[1*n_op];

    //inline function
    
    double del[4], adti;

    adti = 1.0f / (*adt);

    #pragma omp simd
    for (int n = 0; n < 4; n++) {
      del[n] = adti * res[n];
      q[n] = qold[n] - del[n];
      res[n] = 0.0f;


    }
    //end inline func
  }

}
