//
// auto-generated by op2.py
//

/*
 * Open source copyright declaration based on BSD open source template:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * This file is part of the OP2 distribution.
 *
 * Copyright (c) 2011, Mike Giles and others. Please see the AUTHORS file in
 * the main source directory for a full list of copyright holders.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * The name of Mike Giles may not be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Mike Giles ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Mike Giles BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//
//     Nonlinear airfoil lift calculation
//
//     Written by Mike Giles, 2010-2011, based on FORTRAN code
//     by Devendra Ghate and Mike Giles, 2005
//

//
// standard headers
//

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// global constants

double gam, gm1, cfl, eps, mach, alpha, qinf[4];

//
// OP header file
//

#include  "op_lib_cpp.h"

#ifdef SLOPE
#include "executor.h"
#include "inspector.h"
#define TILE_SIZE 5000
#endif

//
// op_par_loop declarations
//
#ifdef OPENACC
#ifdef __cplusplus
extern "C" {
#endif
#endif

void op_par_loop_save_soln(char const *, op_set,
  op_arg,
  op_arg );

void op_par_loop_adt_calc(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_res_calc(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_bres_calc(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_update(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_update1(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );
#ifdef OPENACC
#ifdef __cplusplus
}
#endif
#endif


//
// kernel routines for parallel loops
//

#include "adt_calc.h"
#include "bres_calc.h"
#include "res_calc.h"
#include "save_soln.h"
#include "update.h"
#include "update1.h"

// main program

int main(int argc, char **argv) {
  // OP initialisation
  op_init(argc, argv, 2);

  int *becell, *ecell, *bound, *bedge, *edge, *cell;
  double *x, *q, *qold, *adt, *res;

  int nnode, ncell, nedge, nbedge, niter;
  double rms;

  // timer
  double cpu_t1, cpu_t2, wall_t1, wall_t2;

  // read in grid

  op_printf("reading in grid \n");

  FILE *fp;
  if ((fp = fopen("./new_grid.dat", "r")) == NULL) {
    op_printf("can't open file new_grid.dat\n");
    exit(-1);
  }

  if (fscanf(fp, "%d %d %d %d \n", &nnode, &ncell, &nedge, &nbedge) != 4) {
    op_printf("error reading from new_grid.dat\n");
    exit(-1);
  }

  cell = (int *)malloc(4 * ncell * sizeof(int));
  edge = (int *)malloc(2 * nedge * sizeof(int));
  ecell = (int *)malloc(2 * nedge * sizeof(int));
  bedge = (int *)malloc(2 * nbedge * sizeof(int));
  becell = (int *)malloc(nbedge * sizeof(int));
  bound = (int *)malloc(nbedge * sizeof(int));

  x = (double *)malloc(2 * nnode * sizeof(double));
  q = (double *)malloc(4 * ncell * sizeof(double));
  qold = (double *)malloc(4 * ncell * sizeof(double));
  res = (double *)malloc(4 * ncell * sizeof(double));
  adt = (double *)malloc(ncell * sizeof(double));

  for (int n = 0; n < nnode; n++) {
    if (fscanf(fp, "%lf %lf \n", &x[2 * n], &x[2 * n + 1]) != 2) {
      op_printf("error reading from new_grid.dat\n");
      exit(-1);
    }
  }

  for (int n = 0; n < ncell; n++) {
    if (fscanf(fp, "%d %d %d %d \n", &cell[4 * n], &cell[4 * n + 1],
               &cell[4 * n + 2], &cell[4 * n + 3]) != 4) {
      op_printf("error reading from new_grid.dat\n");
      exit(-1);
    }
  }

  for (int n = 0; n < nedge; n++) {
    if (fscanf(fp, "%d %d %d %d \n", &edge[2 * n], &edge[2 * n + 1],
               &ecell[2 * n], &ecell[2 * n + 1]) != 4) {
      op_printf("error reading from new_grid.dat\n");
      exit(-1);
    }
  }

  for (int n = 0; n < nbedge; n++) {
    if (fscanf(fp, "%d %d %d %d \n", &bedge[2 * n], &bedge[2 * n + 1],
               &becell[n], &bound[n]) != 4) {
      op_printf("error reading from new_grid.dat\n");
      exit(-1);
    }
  }

  fclose(fp);

  // set constants and initialise flow field and residual

  op_printf("initialising flow field \n");

  gam = 1.4f;
  gm1 = gam - 1.0f;
  cfl = 0.9f;
  eps = 0.05f;

  double mach = 0.4f;
  double alpha = 3.0f * atan(1.0f) / 45.0f;
  double p = 1.0f;
  double r = 1.0f;
  double u = sqrt(gam * p / r) * mach;
  double e = p / (r * gm1) + 0.5f * u * u;

  qinf[0] = r;
  qinf[1] = r * u;
  qinf[2] = 0.0f;
  qinf[3] = r * e;

  for (int n = 0; n < ncell; n++) {
    for (int m = 0; m < 4; m++) {
      q[4 * n + m] = qinf[m];
      res[4 * n + m] = 0.0f;
    }
  }

  // declare sets, pointers, datasets and global constants

  op_set nodes = op_decl_set(nnode, "nodes");
  op_set edges = op_decl_set(nedge, "edges");
  op_set bedges = op_decl_set(nbedge, "bedges");
  op_set cells = op_decl_set(ncell, "cells");

  op_map pedge = op_decl_map(edges, nodes, 2, edge, "pedge");
  op_map pecell = op_decl_map(edges, cells, 2, ecell, "pecell");
  op_map pbedge = op_decl_map(bedges, nodes, 2, bedge, "pbedge");
  op_map pbecell = op_decl_map(bedges, cells, 1, becell, "pbecell");
  op_map pcell = op_decl_map(cells, nodes, 4, cell, "pcell");

  op_dat p_bound = op_decl_dat(bedges, 1, "int", bound, "p_bound");
  op_dat p_x = op_decl_dat(nodes, 2, "double", x, "p_x");
  op_dat p_q = op_decl_dat(cells, 4, "double", q, "p_q");
  op_dat p_qold = op_decl_dat(cells, 4, "double", qold, "p_qold");
  op_dat p_adt = op_decl_dat(cells, 1, "double", adt, "p_adt");
  op_dat p_res = op_decl_dat(cells, 4, "double", res, "p_res");

  op_decl_const2("gam",1,"double",&gam);
  op_decl_const2("gm1",1,"double",&gm1);
  op_decl_const2("cfl",1,"double",&cfl);
  op_decl_const2("eps",1,"double",&eps);
  op_decl_const2("mach",1,"double",&mach);
  op_decl_const2("alpha",1,"double",&alpha);
  op_decl_const2("qinf",4,"double",qinf);

  op_diagnostic_output();

  #ifdef SLOPE
  int avgTileSize = 5000;
  int seedTilePoint = 0;

  // sets
  set_t* sl_nodes = set("nodes", nnode);
  set_t* sl_edges = set("edges", nedge);
  set_t* sl_bedges = set("bedges", nbedge, 0, 0, sl_edges);
  set_t* sl_cells = set("cells", ncell);

  // maps
  map_t* sl_pcell = map("c2n", sl_cells, sl_nodes, cell, ncell*4);
  map_t* sl_pedge = map("e2n", sl_edges, sl_nodes, edge, nedge*2);
  map_t* sl_pecell = map("e2c", sl_edges, sl_cells, ecell, nedge*2);
  map_t* sl_pbedge = map("be2n", sl_bedges, sl_nodes, bedge, nbedge*2);
  map_t* sl_pbecell = map("be2c", sl_bedges, sl_cells, becell, nbedge*1);

  // descriptors
  desc_list adtCalcDesc ({desc(sl_pcell, READ),
                          desc(DIRECT, WRITE)});
  desc_list resCalcDesc ({desc(sl_pedge, READ),
                          desc(sl_pecell, READ),
                          desc(sl_pecell, INC)});
  desc_list bresCalcDesc ({desc(sl_pbedge, READ),
                           desc(sl_pbecell, READ),
                           desc(sl_pbecell, INC)});
  desc_list updateDesc ({desc(DIRECT, READ),
                         desc(DIRECT, WRITE)});

  map_list meshMaps ({sl_pcell});

  inspector_t* insp = insp_init(avgTileSize, OMP, COL_DEFAULT, &meshMaps);

  insp_add_parloop (insp, "adtCalc", sl_cells, &adtCalcDesc);
  insp_add_parloop (insp, "resCalc", sl_edges, &resCalcDesc);
  insp_add_parloop (insp, "bresCalc", sl_bedges, &bresCalcDesc);
  insp_add_parloop (insp, "update", sl_cells, &updateDesc);

  insp_run (insp, seedTilePoint);

  insp_print (insp, LOW);

  printf("running executor\n");
  executor_t* exec = exec_init (insp);
  int nColors = exec_num_colors (exec);

  #endif

  // initialise timers for total execution wall time
  op_timers(&cpu_t1, &wall_t1);

  // main time-marching loop

  niter = 1000;

  for (int iter = 1; iter <= niter; iter++) {

    // save old flow solution

    op_par_loop_save_soln("save_soln",cells,
                op_arg_dat(p_q,-1,OP_ID,4,"double",OP_READ),
                op_arg_dat(p_qold,-1,OP_ID,4,"double",OP_WRITE));

    for (int k1 = 0; k1 < 2; k1++) {

      #ifdef SLOPE
      
      for (int i = 0; i < nColors; i++) {
        // for all tiles of this color
        const int nTilesPerColor = exec_tiles_per_color (exec, i);

        #pragma omp parallel for
        for (int j = 0; j < nTilesPerColor; j++) {
          // execute the tile
          tile_t* tile = exec_tile_at (exec, i, j);
          int tileLoopSize;

          // loop adt_calc (calculate area/timstep)
          iterations_list& lc2n_0 = tile_get_local_map (tile, 0, "c2n");
          iterations_list& iterations_0 = tile_get_iterations (tile, 0);
          tileLoopSize = tile_loop_size (tile, 0);

          for (int k = 0; k < tileLoopSize; k++) {
            adt_calc (x + lc2n_0[k*4 + 0]*2,
                      x + lc2n_0[k*4 + 1]*2,
                      x + lc2n_0[k*4 + 2]*2,
                      x + lc2n_0[k*4 + 3]*2,
                      q + iterations_0[k]*4,
                      adt + iterations_0[k]);
          }

          // loop res_calc
          iterations_list& le2n_1 = tile_get_local_map (tile, 1, "e2n");
          iterations_list& le2c_1 = tile_get_local_map (tile, 1, "e2c");
          iterations_list& iterations_1 = tile_get_iterations (tile, 1);
          tileLoopSize = tile_loop_size (tile, 1);

          for (int k = 0; k < tileLoopSize; k++) {
            res_calc (x + le2n_1[k*2 + 0]*2,
                      x + le2n_1[k*2 + 1]*2,
                      q + le2c_1[k*2 + 0]*4,
                      q + le2c_1[k*2 + 1]*4,
                      adt + le2c_1[k*2 + 0]*1,
                      adt + le2c_1[k*2 + 1]*1,
                      res + le2c_1[k*2 + 0]*4,
                      res + le2c_1[k*2 + 1]*4);
          }

          // loop bres_calc
          iterations_list& lbe2n_2 = tile_get_local_map (tile, 2, "be2n");
          iterations_list& lbe2c_2 = tile_get_local_map (tile, 2, "be2c");
          iterations_list& iterations_2 = tile_get_iterations (tile, 2);
          tileLoopSize = tile_loop_size (tile, 2);

          for (int k = 0; k < tileLoopSize; k++) {
            bres_calc (x + lbe2n_2[k*2 + 0]*2,
                       x + lbe2n_2[k*2 + 1]*2,
                       q + lbe2c_2[k + 0]*4,
                       adt + lbe2c_2[k + 0]*1,
                       res + lbe2c_2[k + 0]*4,
                       bound + iterations_2[k]);
          }

          // loop update
          iterations_list& iterations_3 = tile_get_iterations (tile, 3);
          tileLoopSize = tile_loop_size (tile, 3);

          for (int k = 0; k < tileLoopSize; k++) {
            update    (qold + iterations_3[k]*4,
                       q + iterations_3[k]*4,
                       res + iterations_3[k]*4,
                       adt + iterations_3[k]);
          }
        }
      }

      #else

      // calculate area/timstep

      op_par_loop_adt_calc("adt_calc",cells,
                  op_arg_dat(p_x,0,pcell,2,"double",OP_READ),
                  op_arg_dat(p_x,1,pcell,2,"double",OP_READ),
                  op_arg_dat(p_x,2,pcell,2,"double",OP_READ),
                  op_arg_dat(p_x,3,pcell,2,"double",OP_READ),
                  op_arg_dat(p_q,-1,OP_ID,4,"double",OP_READ),
                  op_arg_dat(p_adt,-1,OP_ID,1,"double",OP_WRITE));

      // calculate flux residual

      op_par_loop_res_calc("res_calc",edges,
                  op_arg_dat(p_x,0,pedge,2,"double",OP_READ),
                  op_arg_dat(p_x,1,pedge,2,"double",OP_READ),
                  op_arg_dat(p_q,0,pecell,4,"double",OP_READ),
                  op_arg_dat(p_q,1,pecell,4,"double",OP_READ),
                  op_arg_dat(p_adt,0,pecell,1,"double",OP_READ),
                  op_arg_dat(p_adt,1,pecell,1,"double",OP_READ),
                  op_arg_dat(p_res,0,pecell,4,"double",OP_INC),
                  op_arg_dat(p_res,1,pecell,4,"double",OP_INC));

      op_par_loop_bres_calc("bres_calc",bedges,
                  op_arg_dat(p_x,0,pbedge,2,"double",OP_READ),
                  op_arg_dat(p_x,1,pbedge,2,"double",OP_READ),
                  op_arg_dat(p_q,0,pbecell,4,"double",OP_READ),
                  op_arg_dat(p_adt,0,pbecell,1,"double",OP_READ),
                  op_arg_dat(p_res,0,pbecell,4,"double",OP_INC),
                  op_arg_dat(p_bound,-1,OP_ID,1,"int",OP_READ));

      // update flow field

      op_par_loop_update("update",cells,
                  op_arg_dat(p_qold,-1,OP_ID,4,"double",OP_READ),
                  op_arg_dat(p_q,-1,OP_ID,4,"double",OP_WRITE),
                  op_arg_dat(p_res,-1,OP_ID,4,"double",OP_RW),
                  op_arg_dat(p_adt,-1,OP_ID,1,"double",OP_READ));

      #endif
    }

    // print iteration history
    /*rms = sqrt(rms / (double)op_get_size(cells));
    if (iter % 100 == 0)
      op_printf(" %d  %10.5e \n", iter, rms);
    if (iter % 1000 == 0 &&
        ncell == 720000) { // defailt mesh -- for validation testing
      // op_printf(" %d  %3.16lf \n",iter,rms);
      float diff = fabs((100.0 * (rms / 0.0001060114637578)) - 100.0);
      op_printf("\n\nTest problem with %d cells is within %3.15E %% of the "
                "expected solution\n",
                720000, diff);
      if (diff < 0.00001) {
        op_printf("This test is considered PASSED\n");
      } else {
        op_printf("This test is considered FAILED\n");
      }
    }*/
  }

  op_timers(&cpu_t2, &wall_t2);
  rms = 0.0;
  op_par_loop_update1("update1",cells,
              op_arg_dat(p_qold,-1,OP_ID,4,"double",OP_READ),
              op_arg_dat(p_q,-1,OP_ID,4,"double",OP_WRITE),
              op_arg_dat(p_res,-1,OP_ID,4,"double",OP_RW),
              op_arg_dat(p_adt,-1,OP_ID,1,"double",OP_READ),
              op_arg_gbl(&rms,1,"double",OP_INC));

  rms = sqrt(rms / (double)op_get_size(cells));
  if (niter % 1000 == 0 &&
    ncell == 720000) { // defailt mesh -- for validation testing
    // op_printf(" %d  %3.16lf \n",iter,rms);
    float diff = fabs((100.0 * (rms / 0.0001060114637578)) - 100.0);
    op_printf("\n\nTest problem with %d cells is within %3.15E %% of the "
              "expected solution\n",
              720000, diff);
    if (diff < 0.00001) {
      op_printf("This test is considered PASSED\n");
    } else {
      op_printf("This test is considered FAILED\n");
    }
  }


  // output the result dat array to files
  op_print_dat_to_txtfile(p_q, "out_grid_seq.dat"); // ASCI
  op_print_dat_to_binfile(p_q, "out_grid_seq.bin"); // Binary

  // write given op_dat's indicated segment of data to a memory block in the
  // order it was originally
  // arranged (i.e. before partitioning and reordering)
  double *q_part = (double *)op_malloc(sizeof(double) * op_get_size(cells) * 4);
  op_fetch_data_idx(p_q, q_part, 0, op_get_size(cells) - 1);
  free(q_part);

  op_timing_output();
  op_printf("Max total runtime = %f\n", wall_t2 - wall_t1);

  op_exit();

  free(cell);
  free(edge);
  free(ecell);
  free(bedge);
  free(becell);
  free(bound);
  free(x);
  free(q);
  free(qold);
  free(res);
  free(adt);
}
