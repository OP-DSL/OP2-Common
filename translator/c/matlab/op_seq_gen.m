
function op_seq_gen()

%
% this sets the max number of arguments in op_par_loop
%

maxargs = 20;

%
% first the top bit
%

file = strvcat(...
'//',...
'// header',...
'//',...
' ',...
'#include "op_lib.h"',...
' ',...
'void op_arg_set(int n, op_arg arg, char **p_arg){',...
'  int n2;',...
'  if (arg.map==NULL)         // identity mapping, or global data',...
'    n2 = n;',...
'  else                       // standard pointers',...
'    n2 = arg.map->map[arg.idx+n*arg.map->dim];',...
' ',...
'  *p_arg = arg.data + n2*arg.size;',...
'}',...
' ');

%
% now for op_par_loop defns
%

for nargs = 1:maxargs

  file = strvcat(file,' ', ...
    '// ',...
   ['// op_par_loop routine for ' num2str(nargs) ' arguments '],...
    '// ',' ');

  n_per_line = 4;

  line = 'template < ';
  for n = 1:nargs
    line = [ line 'class T' num2str(n-1) ','];
    if (n==nargs)
      line = [line(1:end-1) ' >'];
    end
    if (mod(n,n_per_line)==0 || n==nargs)
      file = strvcat(file,line);
      line = '           ';
    elseif (n<=10)
      line = [line ' '];
    end
  end

  line = 'void op_par_loop(void (*kernel)( ';
  for n = 1:nargs
    line = [ line 'T' num2str(n-1) '*,'];
    if (n==nargs) 
      line = [line(1:end-1) ' ),'];
    end
    if (mod(n,n_per_line)==0 || n==nargs)
      file = strvcat(file,line);
      line = '                                 ';
    elseif (n<=10)
      line = [line ' '];
    end
  end

  file = strvcat(file,'  char const * name, op_set set,');

  line = '  ';
  for n = 1:nargs
    line = [ line 'op_arg arg' num2str(n-1) ','];
    if (n==nargs) 
      line = [line(1:end-1) ' ) {'];
    end
    if (mod(n,n_per_line)==0 || n==nargs)
      file = strvcat(file,line);
      line = '  ';
    elseif (n<=10)
      line = [line ' '];
    end
  end

  file = strvcat(file,' ');

  line = '  char ';
  for n = 1:nargs
    line = [ line '*p_arg' num2str(n-1) ',' ];
    if (n==nargs) 
      line = [line(1:end-1) ';'];
    end
    if (mod(n,n_per_line)==0 || n==nargs)
      file = strvcat(file,line);
      line = '       ';
    elseif (n<=10)
      line = [line ' '];
    end
  end

%
% diagnostics
%

  file = strvcat(file,' ',...
                      '  // consistency checks',' ',...
                      '  int ninds=0;',' ',...
                      '  if (OP_diags>0) {');

  for n = 1:nargs
    line = '   op_arg_check(set,0,arg0,&ninds,name);';
    num  = sprintf('%d ',n-1);
    file = strvcat(file,regexprep(line,'0',num(1:2)));
  end

  file = strvcat(file,...
    '  }',' ',...
    '  if (OP_diags>2) {',...
    '    if (ninds==0)',...
    '      printf(" kernel routine w/o indirection:  %s \n",name);',...
    '    else',...
    '      printf(" kernel routine with indirection: %s \n",name);',...
    '  }',' ');

%
% main loop
%

  file = strvcat(file,'  // loop over set elements',' ',...
                      '  for (int n=0; n<set->size; n++) {');
  for n = 1:nargs
    line = '    op_arg_set(n,arg0,&p_arg0);';
    num  = sprintf('%d ',n-1);
    file = strvcat(file,regexprep(line,'0',num(1:2)));
  end

%
% call to user's kernel
%

  file = strvcat(file,' ',...
    '    // call kernel function, passing in pointers to data',' ');

  line = ['    kernel( '];
  for n = 1:nargs
    line = [ line '(T' num2str(n-1) ' *)p_arg'  num2str(n-1) ','];
    if (n==nargs) 
      line = [line(1:end-1) ' );'];
    end
    if (mod(n,n_per_line)==0 || n==nargs)
      file = strvcat(file,line);
      line = '            ';
    elseif (n<=10)
      line = [line '  '];
    end
  end

  file = strvcat(file,'  }','}');

end


%
% print out into file
%


fid = fopen('op_seq.h','wt');
fprintf(fid,'// \n// auto-generated by op_seq_gen.m on %s \n//\n\n',datestr(now));
for n=1:size(file,1)
  fprintf(fid,'%s\n',file(n,:));
end
fclose(fid);

