{# Template imports #}
{% from 'fortran/macros.j2' import op_opt %}
{% from 'macros.j2' import comma %}

MODULE {{ parloop.name|upper }}_MODULE

  USE OP2_FORTRAN_DECLARATIONS
  USE OP2_FORTRAN_RT_SUPPORT
  USE ISO_C_BINDING
  USE OP2_CONSTANTS

  CONTAINS

  ! Include kernel function
#include "{{ parloop.kernel }}.inc"


  ! Wrapper for kernel function
  SUBROUTINE {{ parloop.name }}_wrap ( &
    {# Globals #}
    {% for arg in parloop.globals  %}
    & gblDat_{{ arg.var }}, &
    {% endfor %}
    {# Directs #}
    {% for arg in parloop.directs %}
    & dirDat_{{ arg.var }}, &
    {% endfor %}
    {# Indirects #}
    {% for arg in parloop.indirectVars %}
    & indDat_{{ arg.var }}, &
    {% endfor %}
    {# Maps #}
    {% for arg in parloop.indirectMaps  %}
    & map_{{ arg.map }}, &
    & mapDim_{{ arg.map }}, &
    {% endfor %}
    {#  #}
    & bottom, &
    & top &
    & )

    IMPLICIT NONE

    {% for arg in parloop.indirectVars %}
    {% if arg is without_dim %}
    {% set dim %}indDatDim_{{ arg.var }}{% endset %}
    INTEGER(kind=4) {{ dim }}
    {% else %}
    {% set dim = arg.dim %}
    {% endif %}
    {{ arg.typ }} indDat_{{ arg.var }}({{ dim }},*)
    {% endfor %}
    {#- -#}
    {% for arg in parloop.directs %}
    {% if arg is without_dim %}
    {% set dim %}dirDatDim_{{ arg.var }}{% endset %}
    INTEGER(kind=4) {{ dim }}
    {% else %}
    {% set dim = arg.dim %}
    {% endif %}
    {{ arg.typ }} dirDat_{{ arg.var }}({{ dim }},*)
    {% endfor %}
    {#- -#}
    {% for arg in parloop.globals %}
    {% if arg is without_dim %}
    {% set dim %}gblDatDim_{{ arg.var }}{% endset %}
    INTEGER(kind=4) {{ dim }}
    {% else %}
    {% set dim = arg.dim %}
    {% endif %}
    {{ arg.typ }} gblDat_{{ arg.var }}({{ dim }})
    {% endfor %}

    {% for arg in parloop.indirectMaps %}
    INTEGER(kind=4) map_{{ arg.map }}(*)
    INTEGER(kind=4) mapDim_{{ arg.map }}
    {% endfor %}
    {% for arg in parloop.indirectIdxs %}
    INTEGER(kind=4) mapIdx_{{ arg.map }}_{{ arg.idx-1 }}
    {% endfor %}
    INTEGER(kind=4) bottom,top,i

    DO i = bottom, top - 1, 1
      {% for arg in parloop.indirectIdxs %}
      mapIdx_{{ arg.map }}_{{ arg.idx-1 }} = map_{{ arg.map }}(1 + i * mapDim_{{ arg.map }} + {{ arg.idx-1 }})+1
      {% endfor %}

      ! Kernel call
      CALL {{ parloop.kernel }}( &
      {%  for arg in parloop.args %}
      {%    if arg is indirect %}
        & indDat_{{ arg.var }}(1,mapIdx_{{ arg.map }}_{{ arg.idx-1 }}){{ comma(loop) }} &
      {%    elif arg is direct %}
        & dirDat_{{ arg.var }}(1,i+1){{ comma(loop) }} &
      {%    elif arg is global %}
        & gblDat_{{ arg.var }}(1){{ comma(loop) }} &
      {%    endif %}
      {%  endfor %}
      & )

    END DO

  END SUBROUTINE



  ! Host function for kernel
  SUBROUTINE {{ parloop.name }}_host ( &
    & kernel, &
    & set, &
    {% for arg in parloop.args %}
    & opArg{{ arg.i+1 }}{{ comma(loop) }} &
    {% endfor %}
    & )

    IMPLICIT NONE
    character(kind=c_char,len=*), INTENT(IN) :: kernel
    type ( op_set ) , INTENT(IN) :: set

    {% for arg in parloop.args %}
    type ( op_arg ) , INTENT(IN) :: opArg{{ arg.i+1 }}
    {% endfor %}

    type ( op_arg ) , DIMENSION({{ parloop.args | length }}) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming
    INTEGER(kind=4) :: n_upper
    type ( op_set_core ) , POINTER :: opSetCore

    {# TODO: Opts #}

    {# Indirect dats #}
    {% for arg in parloop.indirectVars %}
    {{ arg.typ }}, POINTER, DIMENSION(:) :: indDat_{{ arg.var }}
    INTEGER(kind=4) :: indDatCard_{{ arg.var }}
    {% endfor %}
    {# Direct dats #}
    {% for arg in parloop.directs %}
    {{ arg.typ }}, POINTER, DIMENSION(:) :: dirDat_{{ arg.var }}
    INTEGER(kind=4) :: dirDatCard_{{ arg.var }}
    {% endfor %}
    {# Global dats #}
    {% for arg in parloop.globals %}
    {{ arg.typ }}, POINTER, DIMENSION(:) :: gblDat_{{ arg.var }}
    {% endfor %}
    {# Maps #}
    {% for arg in parloop.indirectMaps  %}
    INTEGER(kind=4), POINTER, DIMENSION(:) :: map_{{ arg.map }}
    INTEGER(kind=4) :: mapDim_{{ arg.map }}
    {% endfor %}

    INTEGER(kind=4) :: i
    REAL(kind=4) :: dataTransfer

    numberOfOpDats = {{ parloop.args | length }}

    {% for arg in parloop.args %}
    opArgArray({{ arg.i+1 }}) = opArg{{ arg.i+1 }}
    {% endfor %}

    returnSetKernelTiming = setKernelTime( &
      & {{ id }}, kernel//C_NULL_CHAR, &
      & 0.0_8, 0.00000_4,0.00000_4, 0 &
    & )
    CALL op_timers_core(startTime)

    n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

    opSetCore => set%setPtr

    {# Direct #}
    {% for arg in parloop.directs %}
    dirDatCard_{{ arg.var }} = opArg{{ arg.i+1 }}%dim * getSetSizeFromOpArg(opArg{{ arg.i+1 }})
    {% endfor %}
    {# Indirect #}
    {% for arg in parloop.indirectVars %}
    indDatCard_{{ arg.var }} = opArg{{ arg.i+1 }}%dim * getSetSizeFromOpArg(opArg{{ arg.i+1 }})
    {% endfor %}
    {# Maps #}
    {% for arg in parloop.indirectMaps  %}
    mapDim_{{ arg.map }} = getMapDimFromOpArg(opArg{{ arg.i+1 }})
    {% endfor %}

    {# Global #}
    {% for arg in parloop.globals %}
    CALL c_f_pointer(opArg{{ arg.i+1 }}%data, gblDat_{{ arg.var }}, (/opArg{{ arg.i+1 }}%dim/))
    {% endfor %}
    {# Direct #}
    {% for arg in parloop.directs %}
    CALL c_f_pointer(opArg{{ arg.i+1 }}%data, dirDat_{{ arg.var }}, (/dirDatCard_{{ arg.var }}/))
    {% endfor %}
    {# Indirect #}
    {% for arg in parloop.indirectVars %}
    CALL c_f_pointer(opArg{{ arg.i+1 }}%data, indDat_{{ arg.var }}, (/indDatCard_{{ arg.var }}/))
    CALL c_f_pointer(opArg{{ arg.i+1 }}%map_data, map_{{ arg.map }}, (/opSetCore%size*mapDim_{{ arg.map }}/))
    {% endfor %}

    CALL {{ parloop.name }}_wrap( &
      {# Globals #}
      {% for arg in parloop.globals  %}
      & gblDat_{{ arg.var }}, &
      {% endfor %}
      {# Directs #}
      {% for arg in parloop.directs %}
      & dirDat_{{ arg.var }}, &
      {% endfor %}
      {# Indirects #}
      {% for arg in parloop.indirectVars %}
      & indDat_{{ arg.var }}, &
      {% endfor %}
      {# Maps #}
      {% for arg in parloop.indirectMaps  %}
      & map_{{ arg.map }}, &
      & mapDim_{{ arg.map }}, &
      {% endfor %}
      {#  #}
      & 0, &
      & opSetCore%core_size &
    & )

    CALL op_mpi_wait_all(numberOfOpDats, opArgArray)

    CALL {{ parloop.name }}_wrap( &
      {# Globals #}
      {% for arg in parloop.globals  %}
      & gblDat_{{ arg.var }}, &
      {% endfor %}
      {# Directs #}
      {% for arg in parloop.directs %}
      & dirDat_{{ arg.var }}, &
      {% endfor %}
      {# Indirects #}
      {% for arg in parloop.indirectVars %}
      & indDat_{{ arg.var }}, &
      {% endfor %}
      {# Maps #}
      {% for arg in parloop.indirectMaps  %}
      & map_{{ arg.map }}, &
      & mapDim_{{ arg.map }}, &
      {% endfor %}
      {#  #}
      & opSetCore%core_size, &
      & n_upper &
    & )

    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    {% for arg in parloop.globals %}
    {%   if arg.acc != 'OP_READ' %}
    {%     call op_opt(arg) %}
    {%     if arg.typ in ['real(8)', 'REAL(kind=8)', 'real*8', 'r8'] %}
    CALL op_mpi_reduce_double(opArg{{ arg.i+1 }}, opArg{{ arg.i+1 }}%data)
    {%     elif arg.typ in ['real(4)', 'REAL(kind=4)', 'real*4', 'r4'] %}
    CALL op_mpi_reduce_float(opArg{{ arg.i+1 }}, opArg{{ arg.i+1 }}%data)
    {%     elif arg.typ in ['integer(4)', 'INTEGER(kind=4)', 'integer*4', 'i4'] %}
    {CALL op_mpi_reduce_int(opArg{{ arg.i+1 }}, opArg{{ arg.i+1 }}%data)
    {%     elif arg.typ in ['logical', 'logical*1'] %}
    CALL op_mpi_reduce_bool(opArg{{ arg.i+1 }}, opArg{{ arg.i+1 }}%data)
    {%     endif %}
    {%     endcall %}
    {%   endif %}
    {% endfor %}

    CALL op_timers_core(endTime)

    dataTransfer = 0.0
    {% if not parloop.indirection %}
    {# No indirection #}
    {%   for arg in parloop.args %}
    {%     call op_opt(arg) %}
    dataTransfer = dataTransfer + opArg{{ arg.i+1 }}%size
    {%-    if arg is not global %} * opSetCore%size{% endif %}
    {%-    if arg is not r_or_w_acc %} * 2.d0{% endif %}
    {%     endcall %}{{''}}
    {%   endfor %}
    {% else %}
    {# Indirection #}
    {%   for arg in parloop.uniqueVars %}
    {%     call op_opt(arg) %}
    dataTransfer = dataTransfer + opArg{{ arg.i+1 }}%size
    {%-    if arg is not global %} * MIN(n_upper,getSetSizeFromOpArg(opArg{{ arg.i+1 }})){% endif %}
    {%-    if arg is not r_or_w_acc %} * 2.d0{% endif %}
    {%     endcall %}{{''}}
    {%   endfor %}

    {%   for arg in parloop.indirectMaps %}
    dataTransfer = dataTransfer + n_upper * mapDim_{{ arg.map }} * 4.d0
    {%   endfor %}
    {% endif %}

    returnSetKernelTiming = setKernelTime( &
      & {{ id }}, kernel//C_NULL_CHAR, &
      & endTime-startTime, dataTransfer, 0.00000_4, 1 &
    & )
  END SUBROUTINE

END MODULE
