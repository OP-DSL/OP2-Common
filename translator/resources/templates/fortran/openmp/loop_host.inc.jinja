{%- macro arg_to_pointer(arg, idx) -%}
    {%- if arg is gbl and arg is reduction -%}
gbl_{{arg.ptr}}_temp((thread - 1) * {{arg.dim|round_up(64)}} + 1)
    {%- elif arg is gbl -%}
gbl_{{arg.ptr}}
    {%- elif arg is direct -%}
dat_{{arg.dat_ptr}}(1, n + 1)
    {%- else -%}
dat_{{arg.dat_ptr}}(1, map_{{arg.map_ptr}}({{arg.map_idx}}, n + 1) + 1)
    {%- endif -%}
{%- endmacro -%}

{%- macro type_c(arg) -%}
    {%- if arg.access_type is instance(OP.Int) -%}
        int
    {%- elif arg.access_type is instance(OP.Bool) -%}
        bool
    {%- elif arg.access_type.size == 32 -%}
        float
    {%- else -%}
        double
    {%- endif -%}
{%- endmacro -%}

{{lh.kernel_func}}

subroutine {{lh.kernel.name}}_wrapper( &
    name, &
{% for dat, idx in lh.dats.items() %}
    dat_{{dat.ptr}}, &
{% endfor %}
{% for map, idx in lh.maps.items() %}
    map_{{map.ptr}}, &
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    gbl_{{arg.ptr}}, &
{% endfor %}
    set, &
    args, &
    num_dats_indirect, &
    dats_indirect &
)
    implicit none

    ! parameters
    character(kind=c_char, len=*) :: name

{% for dat, idx in lh.dats.items() %}
    {{dat.typ}}, dimension({{dat.dim}}, *) :: dat_{{dat.ptr}}{{"\n" if loop.last}}
{% endfor %}
{% for map, idx in lh.maps.items() %}
    integer(4), dimension({{map.dim}}, *) :: map_{{map.ptr}}{{"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    {{arg.typ}}, dimension({{arg.dim}}) :: gbl_{{arg.ptr}}{{"\n" if loop.last}}
{% endfor %}
    type(op_set) :: set
    type(op_arg), dimension({{lh.args|length}}) :: args

    integer(4) :: num_dats_indirect
    integer(4), dimension({{lh.args|length}}) :: dats_indirect

    ! locals
    integer(4) :: thread, start, end, n
    integer(4) :: num_threads

{% if lh is indirect %}
    integer(4) :: part_size, col, block_idx, block_offset, num_blocks, block_id, num_elem, offset

    type(op_plan), pointer :: plan
    integer(4), dimension(:), pointer :: plan_ncolblk, plan_blkmap, plan_nelems, plan_offset
{% endif %}

{% for arg, idx in lh.args|gbl|reduction %}
    {{arg.typ}}, dimension(:), allocatable :: gbl_{{arg.ptr}}_temp{{"\n" if loop.last}}
{% endfor %}
{% if lh is indirect %}
#ifdef OP_PART_SIZE_{{lh.kernel_idx}}
    part_size = OP_PART_SIZE_{{lh.kernel_idx}}
#else
    part_size = 0
#endif

    plan => fortranplancaller( &
        name // c_null_char, &
        set%setcptr, &
        part_size, &
        size(args), &
        args, &
        num_dats_indirect, &
        dats_indirect, &
        2 &
    )

    call c_f_pointer(plan%ncolblk, plan_ncolblk, (/ plan%ncolors /))
    call c_f_pointer(plan%blkmap, plan_blkmap, (/ plan%nblocks /))
    call c_f_pointer(plan%nelems, plan_nelems, (/ plan%nblocks /))
    call c_f_pointer(plan%offset, plan_offset, (/ plan%nblocks /))

{% endif %}
{% if lh is direct or lh.args|gbl|reduction|length > 0 %}
    num_threads = omp_get_max_threads()

{% endif %}
{% for arg, idx in lh.args|gbl|reduction %}
    allocate(gbl_{{arg.ptr}}_temp(num_threads * {{arg.dim|round_up(64)}}))
    {% if arg is inc %}
    gbl_{{arg.ptr}}_temp = 0
    {% else %}

    do thread = 1, num_threads
        start = (thread - 1) * {{arg.dim|round_up(64)}} + 1
        gbl_{{arg.ptr}}_temp(start : start + {{arg.dim - 1}}) = gbl_{{arg.ptr}}
    end do
    {% endif %}

{% endfor %}
{% if lh is direct %}
    !$omp parallel do private(thread, start, end, n)
    do thread = 1, num_threads
        start = (set%setptr%size * (thread - 1)) / num_threads
        end = (set%setptr%size * thread) / num_threads - 1

        do n = start, end
            call {{lh.kernel.name}}_openmp( &
    {% for arg, idx in lh.args %}
                {{arg_to_pointer(arg, idx)}}{{"," if not loop.last}} &
    {% endfor %}
            )
        end do
    end do
{% for arg, idx in lh.args|gbl|reduction %}

    do thread = 1, num_threads
        start = (thread - 1) * {{arg.dim|round_up(64)}} + 1
    {% if arg is inc %}
        gbl_{{arg.ptr}} = gbl_{{arg.ptr}} + gbl_{{arg.ptr}}_temp(start : start + {{arg.dim - 1}})
    {% else %}
        gbl_{{arg.ptr}} = {{arg.access_type.name-}}
            (gbl_{{arg.ptr}}, gbl_{{arg.ptr}}_temp(start : start + {{arg.dim - 1}}))
    {% endif %}
    end do
{% endfor %}
{% else %}
    block_offset = 0
    do col = 1, plan%ncolors
        if (col == plan%ncolors_core + 1) then
            call op_mpi_wait_all(size(args), args)
        end if

        num_blocks = plan_ncolblk(col)

        !$omp parallel do private(thread, block_idx, block_id, num_elem, offset, n)
        do block_idx = 1, num_blocks
            thread = omp_get_thread_num() + 1

            block_id = plan_blkmap(block_idx + block_offset) + 1
            num_elem = plan_nelems(block_id)
            offset = plan_offset(block_id)

            do n = offset, offset + num_elem - 1
                call {{lh.kernel.name}}_openmp( &
    {% for arg, idx in lh.args %}
                    {{arg_to_pointer(arg, idx)}}{{"," if not loop.last}} &
    {% endfor %}
                )
            end do
        end do

        block_offset = block_offset + num_blocks
    {% if lh.args|gbl|reduction|length > 0 %}

        if (col /= plan%ncolors_owned) then
            cycle
        end if
    {% endif %}
    {% for arg, idx in lh.args|gbl|reduction %}

        do thread = 1, num_threads
            start = (thread - 1) * {{arg.dim|round_up(64)}} + 1
        {% if arg is inc %}
            gbl_{{arg.ptr}} = gbl_{{arg.ptr}} + gbl_{{arg.ptr}}_temp(start : start + {{arg.dim - 1}})
        {% else %}
            gbl_{{arg.ptr}} = {{arg.access_type.name-}}
                (gbl_{{arg.ptr}}, gbl_{{arg.ptr}}_temp(start : start + {{arg.dim - 1}}))
        {% endif %}
        end do
    {% endfor %}
    end do
{% endif %}
end subroutine

subroutine {{lh.kernel.name}}_host( &
    name, &
    set, &
{% for arg, idx in lh.args %}
    arg{{idx}}{{"," if not loop.last}} & ! {{lh.kernel.params[idx][0]}}
{% endfor %}
)
    implicit none

    ! parameters
    character(kind=c_char, len=*) :: name
    type(op_set) :: set

{% for arg, idx in lh.args %}
    type(op_arg) :: arg{{idx}}
{% endfor %}

    ! locals
    type(op_arg), dimension({{lh.args|length}}) :: args

    integer(4) :: num_dats_indirect
    integer(4), dimension({{lh.args|length}}) :: dats_indirect

    integer(4) :: set_size

{% for dat, idx in lh.dats.items() %}
    {{dat.typ}}, pointer, dimension(:) :: dat_{{dat.ptr}}{{"\n" if loop.last}}
{% endfor %}
{% for map, idx in lh.maps.items() %}
    integer(4), pointer, dimension(:) :: map_{{map.ptr}}{{"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    {{arg.typ}}, pointer, dimension(:) :: gbl_{{arg.ptr}}{{"\n" if loop.last}}
{% endfor %}
    real(8) :: start_time, end_time
    real(4) :: transfer

{% for arg, idx in lh.args %}
    {% set sarg = "arg%d" % idx %}
    args({{loop.index}}) = {{sarg}}
{% endfor %}

    num_dats_indirect = {{lh.dats|indirect(lh)|length}}
    dats_indirect = (/
    {%- for arg, idx in lh.args -%}
        {{lh.dats|indirect(lh)|index(lh.findDat(arg.dat_ptr)[0]) if arg is indirect else "-1"}}
        {{-", " if not loop.last}}
    {%- endfor -%}
    /)

    call op_timers_core(start_time)
    set_size = op_mpi_halo_exchanges(set%setcptr, size(args), args)

{% for dat, idx in lh.dats.items() %}
    call c_f_pointer(arg{{idx}}%data, dat_{{dat.ptr}}, (/arg{{idx}}%dim * getsetsizefromoparg(arg{{idx}})/))
        {{-"\n" if loop.last}}
{% endfor %}
{% for map, idx in lh.maps.items() %}
    call c_f_pointer(arg{{idx}}%map_data, map_{{map.ptr}}, (/set%setptr%size * {{map.dim}}/)){{"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    call c_f_pointer(arg{{idx}}%data, gbl_{{arg.ptr}}, (/{{arg.dim}}/)){{"\n" if loop.last}}
{% endfor %}
    call {{lh.kernel.name}}_wrapper( &
        name, &
{% for dat, idx in lh.dats.items() %}
        dat_{{dat.ptr}}, &
{% endfor %}
{% for map, idx in lh.maps.items() %}
        map_{{map.ptr}}, &
{% endfor %}
{% for arg, idx in lh.args|gbl %}
        gbl_{{arg.ptr}}, &
{% endfor %}
        set, &
        args, &
        num_dats_indirect, &
        dats_indirect &
    )

    if ((set_size .eq. 0) .or. (set_size .eq. set%setptr%core_size)) then
        call op_mpi_wait_all(size(args), args)
    end if

{% for arg, idx in lh.args|gbl|reduction %}
    call op_mpi_reduce_{{arg.typ.__repr__()}}(arg{{idx}}, arg{{idx}}%data){{"\n" if loop.last}}
{% endfor %}
    call op_mpi_set_dirtybit(size(args), args)
    call op_timers_core(end_time)

    ! todo: review kernel transfer calculation
    transfer = 0.0

    call setkerneltime({{lh.kernel_idx}}, name // c_null_char, end_time - start_time, transfer, 0.0, 1)
end subroutine
