{%- macro soa_flip(dat, i1, i2) -%}
    {%- if dat is not soa -%}
{{i1}}, {{i2}}
    {%- else -%}
{{i2}}, {{i1}}
    {%- endif -%}
{%- endmacro -%}

{%- macro map_idx(arg) -%}
    {%- if arg is runtime_map_idx -%}
arg{{arg.id}}_idx
    {%- else -%}
{{arg.map_idx}}
    {%- endif -%}
{%- endmacro -%}

{%- macro map_lookup(arg) -%}
map{{arg.map_id}}(n, {{map_idx(arg)}}) + 1
{%- endmacro -%}

{%- macro arg_slice(arg) -%}
    {%- if lh.dat(arg).dim == 1 -%}
1
    {%- else -%}
:
    {%- endif -%}
{%- endmacro -%}

{%- macro arg_to_pointer_cuda(arg) -%}
    {%- if arg is idx and arg is indirect -%}
{{map_lookup(arg)}}
    {%- elif arg is idx -%}
n
    {%- elif arg is gbl -%}
gbl{{arg.id}}{{"_local" if arg is reduction}}
    {%- elif arg is direct -%}
dat{{arg.dat_id}}({{soa_flip(lh.dat(arg), arg_slice(arg), "n")}})
    {%- elif arg is inc and target.config.atomics %}
arg{{arg.id}}_{{arg.map_idx}}_local
    {%- else -%}
dat{{arg.dat_id}}({{soa_flip(lh.dat(arg), arg_slice(arg), map_lookup(arg))}})
    {%- endif -%}
{%- endmacro -%}

{%- macro kernel_call() -%}
call {{lh.kernel}}_wrapper<<<num_blocks, block_size
{{-", shared_size" if lh.args|gbl|reduction|length > 0}}>>>( &
    {% for dat in lh.dats %}
    dat{{dat.id}}_d, &
    {% endfor %}
    {% for map in lh.maps %}
    map{{map.id}}_d, &
    {% endfor %}
    {% for arg in lh.args|runtime_map_idx %}
    arg{{arg.id}}%idx + 1, &
    {% endfor %}
    {% for arg in lh.args|gbl %}
    gbl{{arg.id}}_d, &
    {% endfor %}
    {% for extra_arg in varargs %}
    {{extra_arg}}{{"," if not loop.last}} &
    {% endfor %}
)
{%- endmacro -%}

{%- macro type_c(arg) -%}
    {%- if arg.access_type is instance(OP.Int) -%}
        int
    {%- elif arg.access_type is instance(OP.Bool) -%}
        bool
    {%- elif arg.access_type.size == 32 -%}
        float
    {%- else -%}
        double
    {%- endif -%}
{%- endmacro -%}

{%- macro dat_dim(dat) -%}
    {%- if dat.dim is not none -%}
{{dat.dim}}
    {%- else -%}
arg{{dat.arg_id}}%dim
    {%- endif -%}
{%- endmacro -%}

{%- macro gbl_dim(arg) -%}
    {%- if arg.dim is not none -%}
{{arg.dim}}
    {%- else -%}
arg{{arg.id}}%dim
    {%- endif -%}
{%- endmacro -%}

module op2_k{{kernel_idx}}

    use cudafor
    use iso_c_binding

    use op2_fortran_declarations
    use op2_fortran_rt_support
    use cudaconfigurationparams

    use op2_consts

    implicit none

    private
    public :: op2_k{{kernel_idx}}_{{lh.kernel}}

contains

{{kernel_func}}

attributes(global) &
subroutine {{lh.kernel}}_wrapper( &
{{"    optflags, &\n" if lh.args|opt|length > 0-}}
{% for dat in lh.dats %}
    dat{{dat.id}}, &
{% endfor %}
{% for map in lh.maps %}
    map{{map.id}}, &
{% endfor %}
{% for arg in lh.args|runtime_map_idx %}
    arg{{arg.id}}_idx, &
{% endfor %}
{% for arg in lh.args|gbl %}
    gbl{{arg.id}}, &
{% endfor %}
{% if lh is indirect %}
    {{"col_reord, &\n" if target.config.color2-}}
    start, &
    end, &
{% endif %}
    set_size &
)
    implicit none

    ! parameters
{% if lh.args|opt|length > 0 %}
    integer(4), value :: optflags

{% endif %}
{% for dat in lh.dats %}
    {{dat.typ}}, dimension(:, :) :: dat{{dat.id}}{{"\n" if loop.last}}
{% endfor %}
{% for map in lh.maps %}
    integer(4), dimension(:, :) :: map{{map.id}}{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|runtime_map_idx %}
    integer(4) :: arg{{arg.id}}_idx{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl %}
    {{arg.typ}}, dimension(:{{", :" if arg is reduction}}) :: gbl{{arg.id}}{{"\n" if loop.last}}
{% endfor %}
{% if lh is indirect %}
    {% if target.config.color2 %}
    integer(4), dimension(0:*) :: col_reord
    {% endif %}
    integer(4), value :: start, end
{% endif %}
    integer(4), value :: set_size

    ! locals
{% for arg in lh.args|gbl|reduction %}
    {{arg.typ}}, dimension(size(gbl{{arg.id}}, 1)) :: gbl{{arg.id}}_local{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|indirect|reduction if target.config.atomics %}
    {{lh.dat(arg).typ}}, dimension(size(dat{{arg.dat_id}}, {{"2" if lh.dat(arg) is soa else "1"-}}
        )) :: arg{{arg.id}}_{{arg.map_idx}}_local{{"\n" if loop.last}}
{% endfor %}
    integer(4) :: thread_id, d, n, ret

{% for arg in lh.args|gbl|reduction %}
    do d = 1, size(gbl{{arg.id}}_local)
        gbl{{arg.id}}_local(d) = {% if arg is inc -%}
            0
        {%- else -%}
            gbl{{arg.id}}(d, blockIdx%x)
        {%- endif +%}
    end do

{% endfor %}
    thread_id = threadIdx%x + (blockIdx%x - 1) * blockDim%x

{% if lh is direct %}
    do n = thread_id, set_size, blockDim%x * gridDim%x
        call {{lh.kernel}}( &
    {% for arg  in lh.args %}
            {{arg_to_pointer_cuda(arg)}}{{"," if not loop.last}} &
    {% endfor %}
        )
    end do
{% else %}
    if (thread_id + start <= end) then
        n = {{"thread_id + start" if target.config.atomics else "col_reord(thread_id + start)"}}

    {% for arg in lh.args|indirect|reduction if target.config.atomics %}
        arg{{arg.id}}_{{arg.map_idx}}_local = 0{{"\n" if loop.last}}
    {% endfor %}
        call {{lh.kernel}}( &
    {% for arg  in lh.args %}
            {{arg_to_pointer_cuda(arg)}}{{"," if not loop.last}} &
    {% endfor %}
        )
    {% for arg in lh.args|indirect|reduction if target.config.atomics %}

        do d = 1, size(arg{{arg.id}}_{{arg.map_idx}}_local)
            ret = atomicAdd(dat{{arg.dat_id}}({{soa_flip(lh.dat(arg), d, map_lookup(arg))}}), &
                arg{{arg.id}}_{{arg.map_idx}}_local(d))
        end do
    {% endfor %}
    end if
{% endif %}
{% for arg in lh.args|gbl|reduction %}

    do d = 1, size(gbl{{arg.id}}_local)
        ret = {%+ if arg is inc -%}
        atomicAdd
        {%- elif arg is min -%}
        atomicMin
        {%- elif arg is max -%}
        atomicMax
        {%- endif %}(gbl{{arg.id}}(d, blockIdx%x), gbl{{arg.id}}_local(d))
    end do
{% endfor %}
end subroutine

subroutine op2_k{{kernel_idx}}_{{lh.kernel}}( &
    name, &
    set, &
{% for arg in lh.args %}
    arg{{arg.id}}{{"," if not loop.last}} &
{% endfor %}
)
    implicit none

    ! parameters
    character(kind=c_char, len=*) :: name
    type(op_set) :: set

{% for arg in lh.args %}
    type(op_arg) :: arg{{arg.id}}
{% endfor %}

    ! locals
    type(op_arg), dimension({{lh.args|length}}) :: args

    integer(4) :: set_size, col, block, round, dim, err

{% for dat in lh.dats %}
    {{dat.typ}}, dimension(:, :), pointer, device :: dat{{dat.id}}_d{{"\n" if loop.last}}
{% endfor %}
{% for map in lh.maps %}
    integer(4), dimension(:, :), pointer, device :: map{{map.id}}_d{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl %}
    {{arg.typ}}, dimension(:), pointer :: gbl{{arg.id}}
    {% if arg is reduction %}
    {{arg.typ}}, dimension(:, :), allocatable, save :: gbl{{arg.id}}_reduct
    {% endif %}
    {{arg.typ}}, dimension(:{{", :" if arg is reduction}}), allocatable, save, device :: gbl{{arg.id}}_d

{% endfor %}
    real(8) :: start_time, end_time
    real(4) :: transfer

    integer(4) :: num_blocks, max_blocks, block_size
    integer(4) :: shared_size

{% if lh is indirect %}
    integer(4) :: start, end

{% endif %}
{% if lh is indirect and target.config.color2 %}
    integer(4) :: num_dats_indirect
    integer(4), dimension({{lh.args|length}}) :: dats_indirect

    integer(4) :: part_size

    type(op_plan), pointer :: plan
    integer(4), dimension(:), pointer :: plan_ncolblk, plan_color2_offsets
    integer(4), dimension(:), pointer, device :: plan_col_reord

{% endif %}
{% for arg in lh.args %}
    args({{loop.index}}) = arg{{arg.id}}
{% endfor %}

    call op_timers_core(start_time)
    set_size = op_mpi_halo_exchanges_grouped(set%setcptr, size(args), args, 2)

    if (set_size == 0) then
        call op_mpi_wait_all_grouped(size(args), args, 2)
{% for arg in lh.args|gbl|reduction %}
        call op_mpi_reduce_{{type_c(arg)}}(arg{{arg.id}}, arg{{arg.id}}%data)
{% endfor %}
        call op_mpi_set_dirtybit_cuda(size(args), args)
        err = cudaDeviceSynchronize()

        if (err .ne. 0) then
            print *, cudaGetErrorString(err)
        end if

        return
    end if

    block_size = getblocksize(name // c_null_char, set%setptr%size)

{% if lh is direct %}
    num_blocks = 200
    max_blocks = num_blocks
{% elif target.config.atomics %}
    max_blocks = (max(set%setptr%core_size, &
        set%setptr%size + set%setptr%exec_size - set%setptr%core_size) - 1) / block_size + 1
{% elif target.config.color2 %}
    num_dats_indirect = {{lh.dats|indirect(lh)|length}}
    dats_indirect = (/
    {%- for arg in lh.args -%}
        {{lh.dats|indirect(lh)|index(lh.dat(arg)) if arg is indirect else "-1"}}
        {{-", " if not loop.last}}
    {%- endfor -%}
    /)

    part_size = getpartitionsize(name // c_null_char, set%setptr%size)
    plan => fortranplancaller( &
        name // c_null_char, &
        set%setcptr, &
        part_size, &
        size(args), &
        args, &
        num_dats_indirect, &
        dats_indirect &
    )

    call c_f_pointer(plan%ncolblk, plan_ncolblk, (/ plan%ncolors /))
    call c_f_pointer(plan%color2_offsets, plan_color2_offsets, (/ plan%ncolors + 1 /))
    call c_f_pointer(plan%col_reord, plan_col_reord, (/ set%setptr%size + set%setptr%exec_size /))

    max_blocks = 0
    do col = 1, plan%ncolors
        max_blocks = max(max_blocks, plan_ncolblk(col))
    end do
{% endif %}

{% for dat in lh.dats %}
    call c_f_pointer(arg{{dat.arg_id}}%data_d, dat{{dat.id}}_d, (/{{soa_flip(dat, dat_dim(dat), "getsetsizefromoparg(arg%d)" % dat.arg_id)}}/))
        {{-"\n" if loop.last}}
{% endfor %}
{% for map in lh.maps %}
    call c_f_pointer(arg{{map.arg_id}}%map_data_d, map{{map.id}}_d, (/getmapdimfromoparg(arg{{map.arg_id}}), set%setptr%size/))
        {{-"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl %}
    call c_f_pointer(arg{{arg.id}}%data, gbl{{arg.id}}, (/{{gbl_dim(arg)}}/)){{-"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl|reject("reduction") %}
    if (.not. allocated(gbl{{arg.id}}_d)) then
        allocate(gbl{{arg.id}}_d({{gbl_dim(arg)}}))
    end if
    {% if arg is not write %}
    gbl{{arg.id}}_d = gbl{{arg.id}}
    {% endif %}

{% endfor %}
    shared_size = 0

{% for arg in lh.args|gbl|reduction %}
    shared_size = max(shared_size, block_size * sizeof(gbl{{arg.id}}(1)))

    if (.not. allocated(gbl{{arg.id}}_d)) then
        allocate(gbl{{arg.id}}_d({{gbl_dim(arg)}}, max_blocks))
    end if

    if (.not. allocated(gbl{{arg.id}}_reduct)) then
        allocate(gbl{{arg.id}}_reduct({{gbl_dim(arg)}}, max_blocks))
    end if

    {% if arg is inc %}
    gbl{{arg.id}}_d = 0
    {% else %}
    do block = 1, max_blocks
        gbl{{arg.id}}_d(:, block) = gbl{{arg.id}}
    end do
    {% endif %}

{% endfor %}
{% if lh is direct %}
    {{kernel_call("set%setptr%size")|indent}}
{% elif target.config.atomics %}
    do round = 1, {{"3" if lh.args|gbl|reduction|length > 0 else "2"}}
        if (round == 2) then
            call op_mpi_wait_all_grouped(size(args), args, 2)
        end if

    {% if lh.args|gbl|reduction|length > 0 %}
        start = merge(0, merge(set%setptr%core_size, set%setptr%size, round == 2), round == 1)
        end = merge(set%setptr%core_size, merge(set%setptr%size, set%setptr%size + set%setptr%exec_size, round == 2), round == 1)
    {% else %}
        start = merge(0, set%setptr%core_size, round == 1)
        end = merge(set%setptr%core_size, set%setptr%size + set%setptr%exec_size, round == 1)
    {% endif %}

        if (end - start > 0) then
            num_blocks = (end - start - 1) / block_size + 1
            {{kernel_call("start", "end", "set%setptr%size + set%setptr%exec_size")|indent(12)}}
        end if
    end do
{% else %}
    do col = 1, plan%ncolors
        if ((col - 1) == plan%ncolors_core) then
            call (size(args), args, 2)
        end if

        start = plan_color2_offsets(col)
        end = plan_color2_offsets(col + 1)

        num_blocks = (end - start - 1) / block_size + 1

        {{kernel_call("plan_col_reord", "start", "end", "set%setptr%size + set%setptr%exec_size")}}
    end do
{% endif %}

{% for arg in lh.args|gbl if arg is write or arg is read_write %}
    gbl{{arg.id}} = gbl{{arg.id}}_d{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl|reduction %}
    gbl{{arg.id}}_reduct = gbl{{arg.id}}_d

    do block = 1, max_blocks
        do dim = 1, {{gbl_dim(arg)}}
    {% if arg is inc %}
            gbl{{arg.id}}(dim) = gbl{{arg.id}}(dim) + gbl{{arg.id}}_reduct(dim, block)
    {% elif arg is reduction %}
            gbl{{arg.id}}(dim) = {{arg.access_type.name}}(gbl{{arg.id}}(dim), gbl{{arg.id}}_reduct(dim, block))
    {% endif %}
        end do
    end do

    call op_mpi_reduce_{{type_c(arg)}}(arg{{arg.id}}, arg{{arg.id}}%data)

{% endfor %}
    call op_mpi_set_dirtybit_cuda(size(args), args)

    err = cudaDeviceSynchronize()

    if (err .ne. 0) then
        print *, cudaGetErrorString(err)
    end if

    call op_timers_core(end_time)

    ! todo: review kernel transfer calculation
    transfer = 0.0

    call setkerneltime({{kernel_idx}}, name // c_null_char, end_time - start_time, transfer, 0.0, 1)
end subroutine

end module
