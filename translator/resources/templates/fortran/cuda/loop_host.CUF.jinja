{%- macro map_lookup(arg) -%}
map_{{arg.map_ptr}}({{arg.map_idx - 1}} * set_size + n)
    {{-(" * %d" % arg.dat_dim) if lh.findDat(arg.dat_ptr)[0] is not soa}}
{%- endmacro -%}

{%- macro arg_to_pointer_cuda(arg, idx) -%}
    {%- if arg is gbl -%}
gbl_{{arg.ptr}}{{"_local" if arg is reduction}}
    {%- elif arg is direct -%}
dat_{{arg.dat_ptr}}((n - 1) * {{arg.dat_dim}} + 1)
    {%- elif arg is inc and target.config.atomics %}
arg{{idx}}_{{arg.map_idx}}_local
    {%- else -%}
dat_{{arg.dat_ptr}}({{map_lookup(arg)}} + 1)
    {%- endif -%}
{%- endmacro -%}

{%- macro kernel_call() -%}
call op_cuda_{{lh.kernel.name}}<<<num_blocks, block_size
{{-", shared_size" if lh.args|gbl|reduction|length > 0}}>>>( &
    {% for dat, idx in lh.dats.items() %}
    dat_{{dat.ptr}}_d, &
    {% endfor %}
    {% for map, idx in lh.maps.items() %}
    map_{{map.ptr}}_d, &
    {% endfor %}
    {% for arg, idx in lh.args|gbl %}
    gbl_{{arg.ptr}}_d, &
    {% endfor %}
    {% for extra_arg in varargs %}
    {{extra_arg}}{{"," if not loop.last}} &
    {% endfor %}
)
{%- endmacro -%}

{%- macro type_c(arg) -%}
    {%- if arg.access_type is instance(OP.Int) -%}
        int
    {%- elif arg.access_type is instance(OP.Bool) -%}
        bool
    {%- elif arg.access_type.size == 32 -%}
        float
    {%- else -%}
        double
    {%- endif -%}
{%- endmacro -%}

module {{lh.kernel.name|upper}}_module

use ISO_C_BINDING
use CUDAFOR

use OP2_FORTRAN_DECLARATIONS
use OP2_FORTRAN_RT_SUPPORT
use OP2_CONSTANTS

use CUDACONFIGURATIONPARAMS

implicit none

{% for dat, idx in lh.dats.items()|soa %}
integer(4) :: op2_dat_{{dat.ptr}}_stride
integer(4), constant :: op2_dat_{{dat.ptr}}_stride_d

{% endfor %}
contains

attributes(device) &
{{lh.kernel_func}}

attributes(global) &
subroutine op_cuda_{{lh.kernel.name}}( &
{{"    optflags, &\n" if lh.args|opt|length > 0-}}
{% for dat, idx in lh.dats.items() %}
    dat_{{dat.ptr}}, &
{% endfor %}
{% for map, idx in lh.maps.items() %}
    map_{{map.ptr}}, &
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    gbl_{{arg.ptr}}, &
{% endfor %}
{% if lh is indirect %}
    {{"col_reord, &\n" if target.config.color2-}}
    start, &
    end, &
{% endif %}
    set_size &
)
    implicit none

    ! parameters
{% if lh.args|opt|length > 0 %}
    integer(4), value :: optflags

{% endif %}
{% for dat, idx in lh.dats.items() %}
    {{dat.typ}}, dimension(*) :: dat_{{dat.ptr}}{{"\n" if loop.last}}
{% endfor %}
{% for map, idx in lh.maps.items() %}
    integer(4), dimension(*) :: map_{{map.ptr}}{{"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    {{arg.typ}}, dimension({{arg.dim}}{{", *" if arg is reduction}}) :: gbl_{{arg.ptr}}{{"\n" if loop.last}}
{% endfor %}
{% if lh is indirect %}
    {% if target.config.color2 %}
    integer(4), dimension(0:*) :: col_reord
    {% endif %}
    integer(4), value :: start, end
{% endif %}
    integer(4), value :: set_size

    ! locals
{% for arg, idx in lh.args|gbl|reduction %}
    {{arg.typ}}, dimension({{arg.dim}}) :: gbl_{{arg.ptr}}_local{{"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|indirect|reduction if target.config.atomics %}
    {{arg.dat_typ}}, dimension({{arg.dat_dim}}) :: arg{{idx}}_{{arg.map_idx}}_local{{"\n" if loop.last}}
{% endfor %}
    integer(4) :: thread_id, d, n, ret

{% for arg, idx in lh.args|gbl|reduction %}
    do d = 1, {{arg.dim}}
        gbl_{{arg.ptr}}_local(d) = {% if arg is inc -%}
            0
        {%- else -%}
            gbl_{{arg.ptr}}(d, blockIdx%x)
        {%- endif +%}
    end do

{% endfor %}
    thread_id = threadIdx%x + (blockIdx%x - 1) * blockDim%x

{% if lh is direct %}
    do n = thread_id, set_size, blockdim%x * griddim%x
        call {{lh.kernel.name}}_gpu( &
    {% for arg, idx  in lh.args %}
            {{arg_to_pointer_cuda(arg, idx)}}{{"," if not loop.last}} &
    {% endfor %}
        )
    end do
{% else %}
    if (thread_id + start <= end) then
        n = {{"thread_id + start" if target.config.atomics else "col_reord(thread_id + start)"}}

    {% for arg, idx in lh.args|indirect|reduction if target.config.atomics %}
        arg{{idx}}_{{arg.map_idx}}_local = 0{{"\n" if loop.last}}
    {% endfor %}
        call {{lh.kernel.name}}_gpu( &
    {% for arg, idx  in lh.args %}
            {{arg_to_pointer_cuda(arg, idx)}}{{"," if not loop.last}} &
    {% endfor %}
        )
    {% for arg, idx in lh.args|indirect|reduction if target.config.atomics %}

        do d = 1, {{arg.dat_dim}}
            ret = atomicAdd(dat_{{arg.dat_ptr}}({{map_lookup(arg)}} + d), &
                arg{{idx}}_{{arg.map_idx}}_local(d))
        end do
    {% endfor %}
    end if
{% endif %}
{% for arg, idx in lh.args|gbl|reduction %}

    do d = 1, {{arg.dim}}
        ret = {%+ if arg is inc -%}
        atomicAdd
        {%- elif arg is min -%}
        atomicMin
        {%- elif arg is max -%}
        AtomicMax
        {%- endif %}(gbl_{{arg.ptr}}(d, blockIdx%x), gbl_{{arg.ptr}}_local(d))
    end do
{% endfor %}
end subroutine

subroutine {{lh.kernel.name}}_host( &
    name, &
    set, &
{% for arg, idx in lh.args %}
    arg{{idx}}{{"," if not loop.last}} & ! {{lh.kernel.params[idx][0]}}
{% endfor %}
)
    implicit none

    ! parameters
    character(kind=c_char, len=*) :: name
    type(op_set) :: set

{% for arg, idx in lh.args %}
    type(op_arg) :: arg{{idx}}
{% endfor %}

    ! locals
    type(op_arg), dimension({{lh.args|length}}) :: args

    integer(4) :: set_size, col, block, round, dim, err

{% for dat, idx in lh.dats.items() %}
    {{dat.typ}}, dimension(:), pointer, device :: dat_{{dat.ptr}}_d{{"\n" if loop.last}}
{% endfor %}
{% for map, idx in lh.maps.items() %}
    integer(4), dimension(:), pointer, device :: map_{{map.ptr}}_d{{"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    {{arg.typ}}, dimension(:), pointer :: gbl_{{arg.ptr}}
    {% if arg is reduction %}
    {{arg.typ}}, dimension(:, :), allocatable, save :: gbl_{{arg.ptr}}_h
    {% endif %}
    {{arg.typ}}, dimension(:{{", :" if arg is not read}}), allocatable, save, device :: gbl_{{arg.ptr}}_d

{% endfor %}
    real(8) :: start_time, end_time
    real(4) :: transfer

    integer(4) :: num_blocks, max_blocks, block_size
    integer(4) :: shared_size

{% if lh is indirect %}
    integer(4) :: start, end

{% endif %}
{% if lh is indirect and target.config.color2 %}
    integer(4) :: num_dats_indirect
    integer(4), dimension({{lh.args|length}}) :: dats_indirect

    integer(4) :: part_size

    type(op_plan), pointer :: plan
    integer(4), dimension(:), pointer :: plan_ncolblk, plan_color2_offsets
    integer(4), dimension(:), pointer, device :: plan_col_reord

{% endif %}
{% for arg, idx in lh.args %}
    args({{loop.index}}) = arg{{idx}}
{% endfor %}

    call op_timers_core(start_time)

    set_size = op_mpi_halo_exchanges_grouped(set%setcptr, size(args), args, 2)

    if (set_size == 0) then
        call op_mpi_wait_all_grouped(size(args), args, 2)
        call op_mpi_set_dirtybit_cuda(size(args), args)
        err = cudaDeviceSynchronize()

        if (err .ne. 0) then
            print *, cudaGetErrorString(err)
        end if

        return
    end if

    block_size = getblocksize(name // c_null_char, set%setptr%size)

{% if lh is direct %}
    num_blocks = 200
    max_blocks = num_blocks
{% elif target.config.atomics %}
    max_blocks = (max(set%setptr%core_size, &
        set%setptr%size + set%setptr%exec_size - set%setptr%core_size) - 1) / block_size + 1
{% elif target.config.color2 %}
    num_dats_indirect = {{lh.dats|indirect(lh)|length}}
    dats_indirect = (/
    {%- for arg, idx in lh.args -%}
        {{lh.dats|indirect(lh)|index(lh.findDat(arg.dat_ptr)[0]) if arg is indirect else "-1"}}
        {{-", " if not loop.last}}
    {%- endfor -%}
    /)

    part_size = getpartitionsize(name // c_null_char, set%setptr%size)
    plan = fortranplancaller( &
        name // c_null_char, &
        set%setcptr, &
        part_size, &
        size(args), &
        args, &
        num_dats_indirect, &
        dats_indirect &
    )

    call c_f_pointer(plan%ncolblk, plan_ncolblk, (/ plan%ncolors /))
    call c_f_pointer(plan%color2_offsets, plan_color2_offsets, (/ plan%ncolors + 1 /))
    call c_f_pointer(plan%col_reord, plan_col_reord, (/ set%setptr%size + set%setptr%exec_size /))

    max_blocks = 0
    do col = 1, plan%ncolors
        max_blocks = max(max_blocks, plan_ncolblk(col))
    end do
{% endif %}

{% for dat, idx in lh.dats.items() %}
    call c_f_pointer(arg{{idx}}%data_d, dat_{{dat.ptr}}_d, (/arg{{idx}}%dim * getsetsizefromoparg(arg{{idx}})/))
        {{-"\n" if loop.last}}
{% endfor %}
{% for map, idx in lh.maps.items() %}
    call c_f_pointer(arg{{idx}}%map_data_d, map_{{map.ptr}}_d, (/set%setptr%size * {{map.dim}}/)){{-"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|gbl %}
    call c_f_pointer(arg{{idx}}%data, gbl_{{arg.ptr}}, (/{{arg.dim}}/)){{-"\n" if loop.last}}
{% endfor %}
{% for arg, idx in lh.args|gbl|read %}
    if (.not. allocated(gbl_{{arg.ptr}}_d)) then
        allocate(gbl_{{arg.ptr}}_d({{arg.dim}}))
    end if

    gbl_{{arg.ptr}}_d = gbl_{{arg.ptr}}

{% endfor %}
    shared_size = 0

{% for arg, idx in lh.args|gbl|reduction %}
    shared_size = max(shared_size, block_size * sizeof(gbl_{{arg.ptr}}(1)))

    if (.not. allocated(gbl_{{arg.ptr}}_d)) then
        allocate(gbl_{{arg.ptr}}_d({{arg.dim}}, max_blocks))
    end if

    {% if arg is reduction %}
    if (.not. allocated(gbl_{{arg.ptr}}_h)) then
        allocate(gbl_{{arg.ptr}}_h({{arg.dim}}, max_blocks))
    end if

    {% endif %}
    {% if arg is inc %}
    gbl_{{arg.ptr}}_d = 0
    {% else %}
    do block = 1, max_blocks
        gbl_{{arg.ptr}}_d(:, block) = gbl_{{arg.ptr}}
    end do
    {% endif %}

{% endfor %}
{% if lh is direct %}
    {{kernel_call("set%setptr%size")|indent}}
{% elif target.config.atomics %}
    do round = 1, {{"3" if lh.args|gbl|reduction|length > 0 else "2"}}
        if (round == 2) then
            call op_mpi_wait_all_grouped(size(args), args, 2)
        end if

    {% if lh.args|gbl|reduction|length > 0 %}
        start = merge(0, merge(set%setptr%core_size, set%setptr%size, round == 2), round == 1)
        end = merge(set%setptr%core_size, merge(set%setptr%size, set%setptr%size + set%setptr%exec_size, round == 2), round == 1)
    {% else %}
        start = merge(0, set%setptr%core_size, round == 1)
        end = merge(set%setptr%core_size, set%setptr%size + set%setptr%exec_size, round == 1)
    {% endif %}

        if (end - start > 0) then
            num_blocks = (end - start - 1) / block_size + 1
            {{kernel_call("start", "end", "set%setptr%size + set%setptr%exec_size")|indent(12)}}
        end if
    end do
{% else %}
    do col = 1, plan%ncolors
        if ((col - 1) == plan%ncolors_core) then
            call (size(args), args, 2)
        end if

        start = plan_color2_offsets(col)
        end = plan_color2_offsets(col + 1)

        num_blocks = (end - start - 1) / block_size + 1

        {{kernel_call("plan_col_reord", "start", "end", "set%setptr%size + set%setptr%exec_size")}}
    end do
{% endif %}

{% for arg, idx in lh.args|gbl|reduction %}
    gbl_{{arg.ptr}}_h = gbl_{{arg.ptr}}_d

    do block = 1, max_blocks
        do dim = 1, {{arg.dim}}
    {% if arg is inc %}
            gbl_{{arg.ptr}}(dim) = gbl_{{arg.ptr}}(dim) + gbl_{{arg.ptr}}_h(dim, block)
    {% elif arg is reduction %}
            gbl_{{arg.ptr}}(dim) = {{arg.access_type.name}}(gbl_{{arg.ptr}}(dim), gbl_{{arg.ptr}}_h(dim, block))
    {% endif %}
        end do
    end do

    call op_mpi_reduce_{{type_c(arg)}}(arg{{idx}}, arg{{idx}}%data)

{% endfor %}
    call op_mpi_set_dirtybit_cuda(size(args), args)

    err = cudaDeviceSynchronize()

    if (err .ne. 0) then
        print *, cudaGetErrorString(err)
    end if

    call op_timers_core(end_time)

    ! todo: review kernel transfer calculation
    transfer = 0.0

    call setkerneltime({{lh.kernel_idx}}, name // c_null_char, end_time - start_time, transfer, 0.0, 1)
end subroutine

end module
