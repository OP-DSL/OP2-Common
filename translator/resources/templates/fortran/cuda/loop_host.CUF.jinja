{%- macro dat_dim(dat) -%}
    {%- if dat.dim is not none -%}
{{dat.dim}}
    {%- else -%}
arg{{dat.arg_id}}%dim
    {%- endif -%}
{%- endmacro -%}

{%- macro dat_dim_w(dat) -%}
    {%- if dat.dim is not none -%}
{{dat.dim}}
    {%- else -%}
dat{{dat.id}}_dim
    {%- endif -%}
{%- endmacro -%}

{%- macro gbl_dim(arg) -%}
    {%- if arg.dim is not none -%}
{{arg.dim}}
    {%- else -%}
arg{{arg.id}}%dim
    {%- endif -%}
{%- endmacro -%}

{%- macro gbl_dim_w(arg) -%}
    {%- if arg.dim is not none -%}
{{arg.dim}}
    {%- else -%}
arg{{arg.id}}_dim
    {%- endif -%}
{%- endmacro -%}

{%- macro map_idx(arg) -%}
    {%- if arg is runtime_map_idx -%}
arg{{arg.id}}_idx
    {%- else -%}
{{arg.map_idx - 1}}
    {%- endif -%}
{%- endmacro -%}

{%- macro map_lookup(arg) -%}
map{{arg.map_id}}({{map_idx(arg)}} * set_size + n)
{%- endmacro -%}

{%- macro arg_to_pointer_cuda(arg) -%}
    {%- if arg is idx and arg is indirect -%}
{{map_lookup(arg)}} + 1
    {%- elif arg is idx -%}
n
    {%- elif arg is info -%}
info{{arg.id}}(thread_id)
    {%- elif arg is gbl and arg is reduction -%}
gbl{{arg.id}}(thread_id)
    {%- elif arg is gbl -%}
gbl{{arg.id}}{{"(1)" if arg.dim == 1}}
    {%- elif arg is direct and lh.dat(arg) is soa -%}
dat{{arg.dat_id}}(n)
    {%- elif arg is direct -%}
dat{{arg.dat_id}}((n - 1) * {{dat_dim_w(lh.dat(arg))}} + 1)
    {%- elif lh.dat(arg) is soa -%}
dat{{arg.dat_id}}({{map_lookup(arg)}} + 1)
    {%- else -%}
dat{{arg.dat_id}}({{map_lookup(arg)}} * {{dat_dim_w(lh.dat(arg))}} + 1)
    {%- endif -%}
{%- endmacro -%}

{%- macro kernel_call() -%}
call op2_k_{{lh.name}}_wrapper<<<num_blocks, block_size>>>( &
    {% for dat in lh.dats %}
    dat{{dat.id}}_d, &
    {% endfor %}
    {% for map in lh.maps %}
    map{{map.id}}_d, &
    {% endfor %}
    {% for arg in lh.args|gbl %}
    gbl{{arg.id}}_d, &
    {% endfor %}
    {% for arg in lh.args|gbl|min_or_max %}
    gbl{{arg.id}}_ref_d, &
    {% endfor %}
    {% for arg in lh.args|info %}
    info{{arg.id}}_d, &
    {% endfor %}
    {% for dat in lh.dats if dat.dim is none %}
    {{dat_dim(dat)}}, &
    {% endfor %}
    {% for arg in lh.args|runtime_map_idx %}
    arg{{arg.id}}%idx, &
    {% endfor %}
    {% for arg in lh.args|gbl if arg.dim is none %}
    arg{{arg.id}}%dim, &
    {% endfor %}
    {% for extra_arg in varargs %}
    {{extra_arg}}, &
    {% endfor %}
    set%setptr%size &
)
{%- endmacro -%}

{%- macro process_gbls() -%}
call processDeviceGbls(args, size(args), block_size * num_blocks, block_size * max_blocks)
{%- endmacro -%}

{%- macro type_c(arg) -%}
    {%- if arg.typ is instance(OP.Int) -%}
        int
    {%- elif arg.typ is instance(OP.Bool) -%}
        bool
    {%- elif arg.typ.size == 32 -%}
        float
    {%- else -%}
        double
    {%- endif -%}
{%- endmacro -%}

#define op2_s(idx, stride) 1 + ((idx) - 1) * op2_stride_##stride##_d

module op2_m_{{lh.name}}{{variant}}

    use cudafor
    use iso_c_binding

    use op2_fortran_declarations
    use op2_fortran_rt_support
    use cudaconfigurationparams

    use {{"op2_consts" if lang.user_consts_module is none else lang.user_consts_module}}

    implicit none

    private
    public :: op2_k_{{lh.name}}{{variant}}
{% if lh.dats|direct(lh)|soa|length > 0 %}

    integer(4) :: op2_stride_direct = 0
    integer(4), constant :: op2_stride_direct_d = 0
{% endif %}
{% for dat in lh.dats|indirect(lh)|soa %}

    integer(4) :: op2_stride_dat{{dat.id}} = 0
    integer(4), constant :: op2_stride_dat{{dat.id}}_d = 0
{% endfor %}
{% if lh.args|gbl|reduction|length > 0 %}

    integer(4) :: op2_stride_gbl = 0
    integer(4), constant :: op2_stride_gbl_d = 0
{% endif %}

contains

{{kernel_func}}

attributes(global) &
subroutine op2_k_{{lh.name}}_wrapper( &
{% for dat in lh.dats %}
    dat{{dat.id}}, &
{% endfor %}
{% for map in lh.maps %}
    map{{map.id}}, &
{% endfor %}
{% for arg in lh.args|gbl %}
    gbl{{arg.id}}, &
{% endfor %}
{% for arg in lh.args|gbl|min_or_max %}
    gbl{{arg.id}}_ref, &
{% endfor %}
{% for arg in lh.args|info %}
    info{{arg.id}}, &
{% endfor %}
{% for dat in lh.dats if dat.dim is none %}
    dat{{dat.id}}_dim, &
{% endfor %}
{% for arg in lh.args|runtime_map_idx %}
    arg{{arg.id}}_idx, &
{% endfor %}
{% for arg in lh.args|gbl if arg.dim is none %}
    arg{{arg.id}}_dim, &
{% endfor %}
{% if lh is indirect %}
    {{"col_reord, &\n" if target.config.color2-}}
    start, &
    end, &
{% endif %}
    set_size, &
    n_exec &
)
    implicit none

    ! parameters
{% for dat in lh.dats %}
    {{dat.typ}}, dimension(*) :: dat{{dat.id}}{{"\n" if loop.last}}
{% endfor %}
{% for map in lh.maps %}
    integer(4), dimension(*) :: map{{map.id}}{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl %}
    {{arg.typ}}, dimension(*) :: gbl{{arg.id}}{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl|min_or_max %}
    {{arg.typ}}, dimension(*) :: gbl{{arg.id}}_ref{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|info %}
    {{arg.typ}}, dimension(*) :: info{{arg.id}}{{"\n" if loop.last}}
{% endfor %}
{% for dat in lh.dats if dat.dim is none %}
    integer(4), value :: dat{{dat.id}}_dim{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|runtime_map_idx %}
    integer(4), value :: arg{{arg.id}}_idx{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl if arg.dim is none %}
    integer(4), value :: arg{{arg.id}}_dim{{"\n" if loop.last}}
{% endfor %}
{% if lh is indirect %}
    {% if target.config.color2 %}
    integer(4), dimension(0:*) :: col_reord
    {% endif %}
    integer(4), value :: start, end
{% endif %}
    integer(4), value :: set_size, n_exec

    ! locals
    integer(4) :: thread_id, d, n, ret

    thread_id = threadIdx%x + (blockIdx%x - 1) * blockDim%x

{% for arg in lh.args|gbl|reduction %}
    do d = 1, {{gbl_dim_w(arg)}}
        gbl{{arg.id}}(thread_id + (d - 1) * op2_stride_gbl_d) = {% if arg is inc -%}
            0
    {%- else -%}
            gbl{{arg.id}}_ref(d)
    {%- endif +%}
    end do

{% endfor %}
{% if lh is direct %}
    do n = thread_id, n_exec, blockDim%x * gridDim%x
        call {{lh.kernel}}( &
    {% for arg  in lh.args %}
            {{arg_to_pointer_cuda(arg)}}{{"," if not loop.last}} &
    {% endfor %}
        )
    end do
{% else %}
    if (thread_id + start <= end) then
        n = {{"thread_id + start" if target.config.atomics else "col_reord(thread_id + start)"}}

        call {{lh.kernel}}( &
    {% for arg in lh.args %}
            {{arg_to_pointer_cuda(arg)}}{{"," if not loop.last}} &
    {% endfor %}
        )
    end if
{% endif %}
end subroutine

subroutine op2_k_{{lh.name}}{{variant}}( &
    name, &
    set, &
{% for arg in lh.args %}
    arg{{arg.id}}{{"," if not loop.last}} &
{% endfor %}
)
    implicit none

    ! parameters
    character(kind=c_char, len=*) :: name
    type(op_set) :: set

{% for arg in lh.args %}
    type(op_arg) :: arg{{arg.id}}
{% endfor %}

    ! locals
    type(op_arg), dimension({{lh.args|length}}) :: args

    integer(4) :: n_exec, col, block, round, dim, err, d

{% for dat in lh.dats %}
    {{dat.typ}}, dimension(:), pointer, device :: dat{{dat.id}}_d{{"\n" if loop.last}}
{% endfor %}
{% for map in lh.maps %}
    integer(4), dimension(:, :), pointer, device :: map{{map.id}}_d{{"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl %}
    {{arg.typ}}, dimension(:), pointer :: gbl{{arg.id}}
    {{arg.typ}}, dimension(:), pointer, device :: gbl{{arg.id}}_d
    {% if arg is min_or_max %}
    {{arg.typ}}, dimension(:), allocatable, device, save :: gbl{{arg.id}}_ref_d
    {% endif %}

{% endfor %}
{% for arg in lh.args|info %}
    {{arg.typ}}, dimension(:), pointer :: info{{arg.id}}
    {{arg.typ}}, dimension(:), pointer, device :: info{{arg.id}}_d{{"\n" if loop.last}}
{% endfor %}
    real(8) :: start_time, end_time
    real(4) :: transfer

    integer(4) :: num_blocks, max_blocks, block_size

{% if lh is indirect %}
    integer(4) :: start, end
{% endif %}
{% if lh is indirect and target.config.atomics %}
    integer(4), dimension(4) :: sections
{% endif %}
{% if lh is indirect and target.config.color2 %}

    integer(4) :: num_dats_indirect
    integer(4), dimension({{lh.args|length}}) :: dats_indirect

    integer(4) :: part_size

    type(op_plan), pointer :: plan
    integer(4), dimension(:), pointer :: plan_ncolblk, plan_color2_offsets
    integer(4), dimension(:), pointer, device :: plan_col_reord
{% endif %}

{% for arg in lh.args %}
    args({{loop.index}}) = arg{{arg.id}}
{% endfor %}

    call op_timers_core(start_time)
    n_exec = op_mpi_halo_exchanges_grouped(set%setcptr, size(args), args, 2)

    if (n_exec == 0) then
        call op_mpi_wait_all_grouped(size(args), args, 2)
{% for arg in lh.args|gbl|reduction %}
        call op_mpi_reduce_{{type_c(arg)}}(arg{{arg.id}}, arg{{arg.id}}%data)
{% endfor %}
        call op_mpi_set_dirtybit_cuda(size(args), args)
        err = cudaDeviceSynchronize()

        if (err /= 0) then
            print *, cudaGetErrorString(err)
        end if

        return
    end if

    block_size = getblocksize(name // c_null_char, set%setptr%size)

{% if lh is direct %}
    num_blocks = 200
    max_blocks = num_blocks
{% elif target.config.atomics %}
    max_blocks = (max(set%setptr%core_size, &
        set%setptr%size + set%setptr%exec_size - set%setptr%core_size) - 1) / block_size + 1
{% elif target.config.color2 %}
    num_dats_indirect = {{lh.dats|indirect(lh)|length}}
    dats_indirect = (/
    {%- for arg in lh.args -%}
        {{lh.dats|indirect(lh)|index(lh.dat(arg)) if arg is indirect else "-1"}}
        {{-", " if not loop.last}}
    {%- endfor -%}
    /)

    part_size = getpartitionsize(name // c_null_char, set%setptr%size)
    plan => fortranplancaller( &
        name // c_null_char, &
        set%setcptr, &
        part_size, &
        size(args), &
        args, &
        num_dats_indirect, &
        dats_indirect, &
        4 &
    )

    call c_f_pointer(plan%ncolblk, plan_ncolblk, (/ plan%ncolors /))
    call c_f_pointer(plan%color2_offsets, plan_color2_offsets, (/ plan%ncolors + 1 /))
    call c_f_pointer(plan%col_reord, plan_col_reord, (/ set%setptr%size + set%setptr%exec_size /))

    max_blocks = 0
    do col = 1, plan%ncolors
        max_blocks = max(max_blocks, plan_ncolblk(col))
    end do
{% endif %}

    call prepareDeviceGbls(args, size(args), block_size * max_blocks)

{% for arg in lh.args %}
    arg{{arg.id}} = args({{loop.index}})
{% endfor %}

{% for dat in lh.dats %}
    call c_f_pointer(arg{{dat.arg_id}}%data_d, dat{{dat.id}}_d, (/{{dat_dim(dat)}} * getsetsizefromoparg(arg{{dat.arg_id}})/))
        {{-"\n" if loop.last}}
{% endfor %}
{% for map in lh.maps %}
    call c_f_pointer(arg{{map.arg_id}}%map_data_d, map{{map.id}}_d, (/set%setptr%size, getmapdimfromoparg(arg{{map.arg_id}})/))
        {{-"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|gbl %}
    call c_f_pointer(arg{{arg.id}}%data, gbl{{arg.id}}, (/{{gbl_dim(arg)}}/))
    call c_f_pointer(arg{{arg.id}}%data_d, gbl{{arg.id}}_d, (/{{gbl_dim(arg)}}
                     {{-" * block_size * max_blocks" if arg is reduction}}/)){{-"\n" if loop.last}}
{% endfor %}
{% for arg in lh.args|info %}
    call c_f_pointer(arg{{arg.id}}%data, info{{arg.id}}, (/{{gbl_dim(arg)}}/))
    call c_f_pointer(arg{{arg.id}}%data_d, info{{arg.id}}_d, (/{{gbl_dim(arg)}} * block_size * max_blocks/))
                     {{-"\n" if loop.last}}
{% endfor %}
{% if lh.dats|direct(lh)|soa|length > 0 %}
    if (op2_stride_direct /= getsetsizefromoparg(arg{{lh.args|direct(lh)|soa(lh)|first|attr("id")}})) then
        op2_stride_direct = getsetsizefromoparg(arg{{lh.args|direct(lh)|soa(lh)|first|attr("id")}})
        op2_stride_direct_d = op2_stride_direct
    end if

{% endif %}
{% for dat in lh.dats|indirect(lh)|soa %}
    if (op2_stride_dat{{dat.id}} /= getsetsizefromoparg(arg{{dat.arg_id}})) then
        op2_stride_dat{{dat.id}} = getsetsizefromoparg(arg{{dat.arg_id}})
        op2_stride_dat{{dat.id}}_d = op2_stride_dat{{dat.id}}
    end if{{"\n" if loop.last}}
{% endfor %}
{% if lh.args|gbl|reduction|length > 0 %}
    if (op2_stride_gbl /= block_size * max_blocks) then
        op2_stride_gbl = block_size * max_blocks
        op2_stride_gbl_d = op2_stride_gbl
    end if

{% endif %}
{% for arg in lh.args|gbl|min_or_max %}
    if (.not. allocated(gbl{{arg.id}}_ref_d)) then
        allocate(gbl{{arg.id}}_d({{gbl_dim(arg)}}))
    end if

    gbl{{arg.id}}_ref_d = gbl{{arg.id}}

{% endfor %}
{% if lh is direct %}
    {{kernel_call("set%setptr%size")|indent}}{{"\n" if lh.args|gbl|reject("read")|list|length > 0}}
    {{process_gbls()|indent}}
{% elif target.config.atomics %}
    {% if lh.args|gbl|reduction|length == 0 %}
    sections = (/0, set%setptr%core_size, set%setptr%size + set%setptr%exec_size, 0/)
    {% else %}
    sections = (/0, set%setptr%core_size, set%setptr%size, set%setptr%size + set%setptr%exec_size/)
    {% endif %}

    do round = 1, {{"3" if lh.args|gbl|reduction|length > 0 else "2"}}
        if (round == 2) then
            call op_mpi_wait_all_grouped(size(args), args, 2)
        end if

        start = sections(round)
        end = sections(round + 1)

        if (end - start > 0) then
            num_blocks = (end - start - 1) / block_size + 1
            {{kernel_call("start", "end", "set%setptr%size + set%setptr%exec_size")|indent(12)}}
        end if
    {% if lh.args|gbl|reject("read")|list|length > 0 %}

        if (round == 2) then
            {{process_gbls()|indent(12)}}
        end if
    {% endif %}
    end do
{% else %}
    do col = 1, plan%ncolors
        if (col == plan%ncolors_core + 1) then
            call op_mpi_wait_all_grouped(size(args), args, 2)
        end if

        start = plan_color2_offsets(col)
        end = plan_color2_offsets(col + 1)

        num_blocks = (end - start - 1) / block_size + 1

        {{kernel_call("plan_col_reord", "start", "end", "set%setptr%size + set%setptr%exec_size")|indent(8)}}
    {% if lh.args|gbl|reject("read")|list|length > 0 %}

        if (col == plan%ncolors_owned) then
            {{process_gbls()|indent(12)}}
        end if
    {% endif %}
    end do
{% endif %}

{% for arg in lh.args|gbl|reduction %}
    call op_mpi_reduce_{{type_c(arg)}}(arg{{arg.id}}, arg{{arg.id}}%data)
{% endfor %}
    call op_mpi_set_dirtybit_cuda(size(args), args)

    err = cudaDeviceSynchronize()

    if (err /= 0) then
        print *, cudaGetErrorString(err)
    end if

    call op_timers_core(end_time)

    ! todo: review kernel transfer calculation
    transfer = 0.0

    call setkerneltime({{kernel_idx}}, name // c_null_char, end_time - start_time, transfer, 0.0, 1)
end subroutine

end module
