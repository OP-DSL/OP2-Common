{% extends "cpp/loop_host.hpp.jinja" %}

{%- macro arg_to_pointer(arg) %}
    {%- if arg is gbl %}
        {%- set cast = arg.typ -%}
    {%- else -%}
        {%- set cast = lh.dat(arg).typ -%}
    {%- endif -%}

    {%- if arg is direct -%}
        {%- set offset = " + n" -%}
    {%- elif arg is indirect -%}
        {%- set offset = " + map%s[%d]" % (arg.map_id, arg.map_idx) -%}
    {%- endif -%}

    {%- if arg is not gbl and lh.dat(arg) is not soa %}
        {%- set offset = "%s * %d" % (offset, lh.dat(arg).dim) %}
    {%- endif -%}

    {%- if lh is indirect and arg is gbl and arg is reduction %}
arg{{arg.id}}_local
    {%- else -%}
({{cast}} *)arg{{arg.id}}.data{{offset}}
    {%- endif -%}
{%- endmacro -%}

{% block host_prologue %}
{{super()}}
    {% for arg in lh.args|gbl|reduction if lh is indirect %}
    {{arg.typ}} arg{{arg.id}}_local[{{arg.dim}}] = {0};{{"\n" if loop.last}}
    {% endfor %}
    {% for arg in lh.args|gbl|reduction if lh is indirect and arg is not inc %}
    memcpy(arg{{arg.id}}_local, arg{{idx}}.data, {{arg.dim}} * sizeof({{arg.typ}}));{{"\n" if loop.last}}
    {% endfor %}
{% endblock %}

{% block host_loop %}
    for (int n = 0; n < set_size; ++n) {
    {% if lh is indirect %}
        if (n < set->core_size && n > 0 && n % OP_mpi_test_frequency == 0)
            op_mpi_test_all(num_args_expanded, args_expanded);

        if (n == set->core_size)
            op_mpi_wait_all{{"_grouped" if target.config.grouped-}}
                (num_args_expanded, args_expanded{{", 1" if target.config.grouped}});

        {% for map in lh.maps %}
        int *map{{map.id}} = arg{{map.arg_id}}.map_data + n * arg{{map.arg_id}}.map->dim;
        {% endfor %}

    {% endif %}
    {% for arg in lh.args|vec %}
        {{"const " if arg.access_type == OP.AccessType.READ}}{{lh.dat(arg).typ}} *arg{{arg.id}}_vec[] = {
        {% for arg_expanded in lh.args_expanded if arg_expanded.id == arg.id %}
            {{arg_to_pointer(arg_expanded)}}{{"," if not loop.last}}
        {% endfor %}
        };

    {% endfor %}
    {% if lh is indirect and lh.args|gbl|reduction|length > 0 %}
        if (n == set->size) {
        {% for arg in lh.args|gbl|reduction %}
            memcpy(arg{{arg.id}}.data, arg{{arg.id}}_local, {{arg.dim}} * sizeof({{arg.typ}}));
        {% endfor %}
        }

    {% endif %}
        op2_k{{kernel_idx}}::{{lh.kernel}}(
    {% for arg in lh.args %}
        {% if arg is not vec %}
            {{arg_to_pointer(arg)}}{{"," if not loop.last}}
        {% else %}
            arg{{arg.id}}_vec{{"," if not loop.last}}
        {% endif %}
    {% endfor %}
        );
    }
{% endblock %}

{% block host_epilogue %}
    {% if lh is indirect -%} {# TODO: is this indirect check necessary? #}
    if (set_size == 0 || set_size == set->core_size)
        op_mpi_wait_all(num_args_expanded, args_expanded);

    {% endif %}
    {% for arg in lh.args|gbl|reduction %}
    op_mpi_reduce(&arg{{arg.id}}, ({{arg.typ}} *)arg{{arg.id}}.data);
    {% endfor %}
    op_mpi_set_dirtybit(num_args_expanded, args_expanded);

{{super()}}
{% endblock %}
