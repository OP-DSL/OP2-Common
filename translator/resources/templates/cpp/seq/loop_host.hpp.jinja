{% extends "cpp/loop_host.hpp.jinja" %}

{%- macro arg_to_pointer(arg, idx) %}
    {%- if arg is gbl %}
        {%- set cast = arg.typ -%}
    {%- else -%}
        {%- set cast = arg.dat_typ -%}
    {%- endif -%}

    {%- if arg is direct -%}
        {%- set offset = " + n" -%}
    {%- elif arg is indirect -%}
        {%- set offset = " + map_%s[%d]" % (arg.map_ptr, arg.map_idx) -%}
    {%- endif -%}

    {%- if arg is not gbl and lh.findDat(arg.dat_ptr)[0] is not soa %}
        {%- set offset = "%s * %d" % (offset, arg.dat_dim) %}
    {%- endif -%}

    {%- if lh is indirect and arg is gbl and arg is reduction %}
gbl_{{arg.ptr}}
    {%- else -%}
({{cast}} *)arg{{idx}}.data{{offset}}
    {%- endif -%}
{%- endmacro -%}

{% block host_prologue %}
{{super()}}
    {% for dat, idx in lh.dats.items()|soa %}
    op2_dat_{{dat.ptr}}_stride = getSetSizeFromOpArg(&arg{{idx}});{{"\n" if loop.last}}
    {% endfor %}
    {% for arg, idx in lh.args|gbl|reduction if lh is indirect %}
    {{arg.typ}} gbl_{{arg.ptr}}[{{arg.dim}}] = {0};{{"\n" if loop.last}}
    {% endfor %}
    {% for arg, idx in lh.args|gbl|reduction if lh is indirect and arg is not inc %}
    memcpy(gbl_{{arg.ptr}}, arg{{idx}}.data, {{arg.dim}} * sizeof({{arg.typ}}));{{"\n" if loop.last}}
    {% endfor %}
{% endblock %}

{% block host_prologue_early_exit_cleanup %}
    {% for arg, idx in lh.args|gbl|reduction %}
        op_mpi_reduce(&arg{{idx}}, ({{arg.typ}} *)arg{{idx}}.data);
    {% endfor %}
    {% if lh is indirect %}
        op_mpi_wait_all(num_args_expanded, args_expanded);
    {% endif %}
        op_mpi_set_dirtybit(num_args_expanded, args_expanded);
{% endblock %}

{% block host_loop %}
    for (int n = 0; n < set_size; ++n) {
    {% if lh is indirect %}
        if (n < set->core_size && n > 0 && n % OP_mpi_test_frequency == 0)
            op_mpi_test_all(num_args_expanded, args_expanded);

        if (n == set->core_size)
            op_mpi_wait_all{{"_grouped" if target.config.grouped-}}
                (num_args_expanded, args_expanded{{", 1" if target.config.grouped}});

    {% for map, idx in lh.maps.items() %}
        int *map_{{map.ptr}} = arg{{idx}}.map_data + n * arg{{idx}}.map->dim;
    {% endfor %}

    {% endif %}
    {% for arg, idx in lh.args|vec %}
        {{"const " if arg.access_type == OP.AccessType.READ}}{{arg.dat_typ}} *arg{{idx}}_vec[] = {
        {% for arg_expanded, idx2 in lh.args_expanded if idx2 == idx %}
            {{arg_to_pointer(arg_expanded, idx)}}{{"," if not loop.last}}
        {% endfor %}
        };

    {% endfor %}
    {% if lh is indirect and lh.args|gbl|reduction|length > 0 %}
        if (n == set->size) {
        {% for arg, idx in lh.args|gbl|reduction %}
            memcpy(arg{{idx}}.data, gbl_{{arg.ptr}}, {{arg.dim}} * sizeof({{arg.typ}}));
        {% endfor %}
        }

    {% endif %}
        {{lh.kernel.name}}(
    {% for arg, idx in lh.args %}
        {% if arg is not vec %}
            {{arg_to_pointer(arg, idx)}}{{"," if not loop.last}}
        {% else %}
            arg{{idx}}_vec{{"," if not loop.last}}
        {% endif %}
    {% endfor %}
        );
    }
{% endblock %}

{% block host_epilogue %}
    {% if lh is indirect -%} {# TODO: is this indirect check necessary? #}
    if (set_size == 0 || set_size == set->core_size)
        op_mpi_wait_all(num_args_expanded, args_expanded);

    {% endif %}
    {% for arg, idx in lh.args|gbl|reduction %}
    op_mpi_reduce(&arg{{idx}}, ({{arg.typ}} *)arg{{idx}}.data);
    {% endfor %}
    op_mpi_set_dirtybit(num_args_expanded, args_expanded);

{{super()}}
{% endblock %}
