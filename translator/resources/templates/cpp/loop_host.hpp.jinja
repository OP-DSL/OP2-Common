{% macro arg_dat_redef(arg, sarg) %}
    {% set params -%}
{{sarg}}.dat, {{arg.map_idx}}, {{sarg}}.map, {{arg.dat_dim}}, "{{arg.dat_typ}}", {{arg.access_type.value}}
    {%- endset %}

    {%- if arg is opt -%}
op_opt_arg_dat(sarg.opt, {{params}})
    {%- else -%}
op_arg_dat({{params}})
    {%- endif %}
{% endmacro -%}

{%- macro arg_to_pointer(arg, idx) %}
    {% set cast = arg.typ if arg is gbl else arg.dat_typ %}
    {% set offset = " + n * %d" % arg.dat_dim if arg is direct %}
    {% set offset = " + map_%s[%d] * %d" % (arg.map_ptr, arg.map_idx, arg.dat_dim) if arg is indirect %}
({{cast}} *)arg{{idx}}.data{{offset}}
{%- endmacro -%}

{% block kernel %}
{{lh.kernel_func}}
{% endblock %}

{%- block kernel_wrapper %}
{% endblock -%}

{% block host_prologue %}
void op_par_loop_{{lh.kernel.name}}(
    const char *name,
    op_set set,
    {% for arg, idx in lh.args %}
    op_arg arg{{idx}}{{"," if not loop.last else " "}} // {{lh.kernel.params[idx][0]}}
    {% endfor %}
) {
    int num_args_expanded = {{lh.args_expanded|length}};
    op_arg args_expanded[{{lh.args_expanded|length}}];

    {% for arg, idx in lh.args_expanded %}
        {% set sarg = "arg%d" % idx %}
    args_expanded[{{loop.index0}}] = {{arg_dat_redef(arg, sarg) if lh.args[idx][0] is vec else sarg}};
    {% endfor %}

    double cpu_start, cpu_end, wall_start, wall_end;
    op_timing_realloc({{lh.kernel_idx}});
    op_timers_core(&cpu_start, &wall_start);

    if (OP_diags > 2)
        printf(" kernel routine ({{"direct" if lh is direct else "indirect"}}): {{lh.kernel.name}}\n");

    int set_size = op_mpi_halo_exchanges{{"_grouped" if opt.config.grouped-}}
        (set, num_args_expanded, args_expanded{{(", %d" % opt.config.device) if opt.config.grouped}});

    if (set_size == 0) {
        {% block host_prologue_early_exit_cleanup %}
        {% endblock %}

        return;
    }
{% endblock %}

{% block host_loop required %}
{% endblock %}

{% block host_epilogue %}
    op_timers_core(&cpu_end, &wall_end);

    OP_kernels[{{lh.kernel_idx}}].name = name;
    OP_kernels[{{lh.kernel_idx}}].count += 1;
    OP_kernels[{{lh.kernel_idx}}].time += wall_end - wall_start;
{% endblock %}
}

