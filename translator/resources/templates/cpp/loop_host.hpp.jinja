{% macro arg_dat_redef(arg, id) %}
    {% set params -%}
arg{{id}}.dat, {{arg.map_idx}}, arg{{id}}.map, {{lh.dat(arg).dim}}, "{{lh.dat(arg).typ}}", {{arg.access_type.value}}
    {%- endset %}

    {%- if arg is opt -%}
op_opt_arg_dat(arg{{id}}.opt, {{params}})
    {%- else -%}
op_arg_dat({{params}})
    {%- endif %}
{% endmacro -%}

{% macro indirect_dat_descriptor_def() %}
    {% if lh is indirect %}
int num_dats_indirect = {{lh.dats|indirect|length}};
int dats_indirect[{{lh.args_expanded|length}}] = {
        {%- for arg, id in lh.args_expanded -%}
    {{lh.dats|indirect|index(lh.dat(arg)) if arg is indirect else "-1"}}{{", " if not loop.last}}
        {%- endfor -%}
};
    {% endif %}
{% endmacro %}

{% block kernel %}
{{kernel_func}}
{% endblock %}

{%- block kernel_wrapper %}
{% endblock -%}

{% block host_prologue %}
void op_par_loop_{{lh.kernel}}(
    const char *name,
    op_set set,
    {% for arg in lh.args %}
    op_arg arg{{arg.id}}{{"," if not loop.last}}
    {% endfor %}
) {
    int num_args_expanded = {{lh.args_expanded|length}};
    op_arg args_expanded[{{lh.args_expanded|length}}];

    {% for arg, id in lh.args_expanded %}
    args_expanded[{{arg.id}}] = {{arg_dat_redef(arg, id) if lh.args[id] is vec else "arg%d" % id}};
    {% endfor %}

    double cpu_start, cpu_end, wall_start, wall_end;
    op_timing_realloc({{kernel_idx}});

    OP_kernels[{{kernel_idx}}].name = name;
    OP_kernels[{{kernel_idx}}].count += 1;

    op_timers_core(&cpu_start, &wall_start);

    if (OP_diags > 2)
        printf(" kernel routine ({{"direct" if lh is direct else "indirect"}}): {{lh.kernel}}\n");

    int set_size = op_mpi_halo_exchanges{{"_grouped" if target.config.grouped-}}
        (set, num_args_expanded, args_expanded{{(", %d" % target.config.device) if target.config.grouped}});
{% endblock %}

{% block host_loop required %}
{% endblock %}

{% block host_epilogue %}
    op_timers_core(&cpu_end, &wall_end);
    OP_kernels[{{kernel_idx}}].time += wall_end - wall_start;
{% endblock %}
}

