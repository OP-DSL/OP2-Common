{# Template imports #}
{% from 'cpp/macros.j2' import op_opt %}
{% from 'macros.j2' import comma %}

// global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

{% for constant in app.consts %}
{% if constant.dim == 1 %}
__constant__ {{ constant.typ }} {{ constant.ptr }}_cuda;
{% else %}
__constant__ {{ constant.typ }} {{ constant.ptr }}_cuda[{{ constant.dim }}];
{# TODO: currently constant dim has to be an int literal (from how it is
   parsed), in future need to use MAX_CONST_SIZE if it isn't an int literal #}
{% endif %}
{% endfor %}

// header
{# TODO: user_types #}
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

void op_decl_const_char(int dim, char const *type, int size, char *dat,
                        char const *name){
  if (!OP_hybrid_gpu) return;

    {% for constant in app.consts %}{% if loop.first %} {% endif %} if(!strcmp(name,"{{ constant.ptr }}")) {
    {% if constant.dim > 1 %}
    if(!strcmp(name,"{{ constant.ptr }}") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    {% endif %}
    cutilSafeCall(cudaMemcpyToSymbol({{ constant.ptr }}_cuda, dat, dim*size));
  } else{% endfor %} {
    printf("error: unknown const name\n"); exit(1);
  }
}

// user kernel files
{% for parloop in app.loops %}
#include "{{ parloop.name }}_{{ opt.name }}kernel.cu"
{% endfor %}
