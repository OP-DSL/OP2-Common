diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openacc/adt_calc_acckernel.c b/apps/c/airfoil/airfoil_hdf5/dp/openacc/adt_calc_acckernel.c
index e9ee835..0b3f6c6 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openacc/adt_calc_acckernel.c
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openacc/adt_calc_acckernel.c
@@ -109,8 +109,14 @@ void op_par_loop_adt_calc(char const *name, op_set set,
         int map2idx = map0[n + set_size1 * 2];
         int map3idx = map0[n + set_size1 * 3];
 
-        adt_calc(&data0[2 * map0idx], &data0[2 * map1idx], &data0[2 * map2idx],
-                 &data0[2 * map3idx], &data4[4 * n], &data5[1 * n]);
+
+        adt_calc(
+          &data0[2 * map0idx],
+          &data0[2 * map1idx],
+          &data0[2 * map2idx],
+          &data0[2 * map3idx],
+          &data4[4 * n],
+          &data5[1 * n]);
       }
 
     }
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openacc/bres_calc_acckernel.c b/apps/c/airfoil/airfoil_hdf5/dp/openacc/bres_calc_acckernel.c
index 6d8e2a1..344f45d 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openacc/bres_calc_acckernel.c
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openacc/bres_calc_acckernel.c
@@ -119,8 +119,14 @@ void op_par_loop_bres_calc(char const *name, op_set set,
         int map1idx = map0[n + set_size1 * 1];
         int map2idx = map2[n + set_size1 * 0];
 
-        bres_calc(&data0[2 * map0idx], &data0[2 * map1idx], &data2[4 * map2idx],
-                  &data3[1 * map2idx], &data4[4 * map2idx], &data5[1 * n]);
+
+        bres_calc(
+          &data0[2 * map0idx],
+          &data0[2 * map1idx],
+          &data2[4 * map2idx],
+          &data3[1 * map2idx],
+          &data4[4 * map2idx],
+          &data5[1 * n]);
       }
 
     }
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openacc/res_calc_acckernel.c b/apps/c/airfoil/airfoil_hdf5/dp/openacc/res_calc_acckernel.c
index 62f7dca..f905f2c 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openacc/res_calc_acckernel.c
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openacc/res_calc_acckernel.c
@@ -121,9 +121,16 @@ void op_par_loop_res_calc(char const *name, op_set set,
         int map2idx = map2[n + set_size1 * 0];
         int map3idx = map2[n + set_size1 * 1];
 
-        res_calc(&data0[2 * map0idx], &data0[2 * map1idx], &data2[4 * map2idx],
-                 &data2[4 * map3idx], &data4[1 * map2idx], &data4[1 * map3idx],
-                 &data6[4 * map2idx], &data6[4 * map3idx]);
+
+        res_calc(
+          &data0[2 * map0idx],
+          &data0[2 * map1idx],
+          &data2[4 * map2idx],
+          &data2[4 * map3idx],
+          &data4[1 * map2idx],
+          &data4[1 * map3idx],
+          &data6[4 * map2idx],
+          &data6[4 * map3idx]);
       }
 
     }
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openacc/save_soln_acckernel.c b/apps/c/airfoil/airfoil_hdf5/dp/openacc/save_soln_acckernel.c
index c9ebe50..2548d56 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openacc/save_soln_acckernel.c
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openacc/save_soln_acckernel.c
@@ -45,7 +45,9 @@ void op_par_loop_save_soln(char const *name, op_set set,
     double* data1 = (double*)arg1.data_d;
     #pragma acc parallel loop independent deviceptr(data0,data1)
     for ( int n=0; n<set->size; n++ ){
-      save_soln(&data0[4 * n], &data1[4 * n]);
+      save_soln(
+        &data0[4*n],
+        &data1[4*n]);
     }
   }
 
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openacc/update_acckernel.c b/apps/c/airfoil/airfoil_hdf5/dp/openacc/update_acckernel.c
index f5918d6..97596d1 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openacc/update_acckernel.c
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openacc/update_acckernel.c
@@ -66,8 +66,12 @@ void op_par_loop_update(char const *name, op_set set,
     double* data3 = (double*)arg3.data_d;
     #pragma acc parallel loop independent deviceptr(data0,data1,data2,data3) reduction(+:arg4_l)
     for ( int n=0; n<set->size; n++ ){
-      update(&data0[4 * n], &data1[4 * n], &data2[4 * n], &data3[1 * n],
-             &arg4_l);
+      update(
+        &data0[4*n],
+        &data1[4*n],
+        &data2[4*n],
+        &data3[1*n],
+        &arg4_l);
     }
   }
 
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel.cpp
index 68b4941..2a3d0a7 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel.cpp
@@ -5,10 +5,21 @@
 //user function
 //user function
 
-void adt_calc_omp4_kernel(int *map0, int map0size, double *data4, int dat4size,
-                          double *data5, int dat5size, double *data0,
-                          int dat0size, int *col_reord, int set_size1,
-                          int start, int end, int num_teams, int nthread);
+void adt_calc_omp4_kernel(
+  int *map0,
+  int map0size,
+  double *data4,
+  int dat4size,
+  double *data5,
+  int dat5size,
+  double *data0,
+  int dat0size,
+  int *col_reord,
+  int set_size1,
+  int start,
+  int end,
+  int num_teams,
+  int nthread);
 
 // host stub function
 void op_par_loop_adt_calc(char const *name, op_set set,
@@ -86,11 +97,22 @@ void op_par_loop_adt_calc(char const *name, op_set set,
       int start = Plan->col_offsets[0][col];
       int end = Plan->col_offsets[0][col+1];
 
-      adt_calc_omp4_kernel(map0, map0size, data4, dat4size, data5, dat5size,
-                           data0, dat0size, col_reord, set_size1, start, end,
-                           part_size != 0 ? (end - start - 1) / part_size + 1
-                                          : (end - start - 1) / nthread,
-                           nthread);
+      adt_calc_omp4_kernel(
+        map0,
+        map0size,
+        data4,
+        dat4size,
+        data5,
+        dat5size,
+        data0,
+        dat0size,
+        col_reord,
+        set_size1,
+        start,
+        end,
+        part_size!=0?(end-start-1)/part_size+1:(end-start-1)/nthread,
+        nthread);
+
     }
     OP_kernels[1].transfer  += Plan->transfer;
     OP_kernels[1].transfer2 += Plan->transfer2;
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel_func.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel_func.cpp
index 9869dc7..25cb2fa 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel_func.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/adt_calc_omp4kernel_func.cpp
@@ -2,17 +2,26 @@
 // auto-generated by op2.py
 //
 
-void adt_calc_omp4_kernel(int *map0, int map0size, double *data4, int dat4size,
-                          double *data5, int dat5size, double *data0,
-                          int dat0size, int *col_reord, int set_size1,
-                          int start, int end, int num_teams, int nthread) {
-
-#pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(       \
-    to : data4[0 : dat4size], data5[0 : dat5size])                             \
-        map(to : gam_ompkernel, gm1_ompkernel, cfl_ompkernel)                  \
-                map(to : col_reord[0 : set_size1], map0[0 : map0size],         \
-                                                        data0[0 : dat0size])
-#pragma omp distribute parallel for schedule(static, 1)
+void adt_calc_omp4_kernel(
+  int *map0,
+  int map0size,
+  double *data4,
+  int dat4size,
+  double *data5,
+  int dat5size,
+  double *data0,
+  int dat0size,
+  int *col_reord,
+  int set_size1,
+  int start,
+  int end,
+  int num_teams,
+  int nthread){
+
+  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data4[0:dat4size],data5[0:dat5size]) \
+    map(to: gam_ompkernel, gm1_ompkernel, cfl_ompkernel)\
+    map(to:col_reord[0:set_size1],map0[0:map0size],data0[0:dat0size])
+  #pragma omp distribute parallel for schedule(static,1)
   for ( int e=start; e<end; e++ ){
     int n_op = col_reord[e];
     int map0idx = map0[n_op + set_size1 * 0];
@@ -25,7 +34,7 @@ void adt_calc_omp4_kernel(int *map0, int map0size, double *data4, int dat4size,
     const double *x2 = &data0[2 * map1idx];
     const double *x3 = &data0[2 * map2idx];
     const double *x4 = &data0[2 * map3idx];
-    const double *q = &data4[4 * n_op];
+    const double *q = &data4[4*n_op];
     double *adt = &data5[1*n_op];
 
     //inline function
@@ -35,8 +44,7 @@ void adt_calc_omp4_kernel(int *map0, int map0size, double *data4, int dat4size,
     ri = 1.0f / q[0];
     u = ri * q[1];
     v = ri * q[2];
-    c = sqrt(gam_ompkernel * gm1_ompkernel *
-             (ri * q[3] - 0.5f * (u * u + v * v)));
+    c = sqrt(gam_ompkernel * gm1_ompkernel * (ri * q[3] - 0.5f * (u * u + v * v)));
 
     dx = x2[0] - x1[0];
     dy = x2[1] - x1[1];
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel.cpp
index f1272b2..69872d6 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel.cpp
@@ -5,12 +5,27 @@
 //user function
 //user function
 
-void bres_calc_omp4_kernel(int *map0, int map0size, int *map2, int map2size,
-                           int *data5, int dat5size, double *data0,
-                           int dat0size, double *data2, int dat2size,
-                           double *data3, int dat3size, double *data4,
-                           int dat4size, int *col_reord, int set_size1,
-                           int start, int end, int num_teams, int nthread);
+void bres_calc_omp4_kernel(
+  int *map0,
+  int map0size,
+  int *map2,
+  int map2size,
+  int *data5,
+  int dat5size,
+  double *data0,
+  int dat0size,
+  double *data2,
+  int dat2size,
+  double *data3,
+  int dat3size,
+  double *data4,
+  int dat4size,
+  int *col_reord,
+  int set_size1,
+  int start,
+  int end,
+  int num_teams,
+  int nthread);
 
 // host stub function
 void op_par_loop_bres_calc(char const *name, op_set set,
@@ -94,12 +109,28 @@ void op_par_loop_bres_calc(char const *name, op_set set,
       int start = Plan->col_offsets[0][col];
       int end = Plan->col_offsets[0][col+1];
 
-      bres_calc_omp4_kernel(map0, map0size, map2, map2size, data5, dat5size,
-                            data0, dat0size, data2, dat2size, data3, dat3size,
-                            data4, dat4size, col_reord, set_size1, start, end,
-                            part_size != 0 ? (end - start - 1) / part_size + 1
-                                           : (end - start - 1) / nthread,
-                            nthread);
+      bres_calc_omp4_kernel(
+        map0,
+        map0size,
+        map2,
+        map2size,
+        data5,
+        dat5size,
+        data0,
+        dat0size,
+        data2,
+        dat2size,
+        data3,
+        dat3size,
+        data4,
+        dat4size,
+        col_reord,
+        set_size1,
+        start,
+        end,
+        part_size!=0?(end-start-1)/part_size+1:(end-start-1)/nthread,
+        nthread);
+
     }
     OP_kernels[3].transfer  += Plan->transfer;
     OP_kernels[3].transfer2 += Plan->transfer2;
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel_func.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel_func.cpp
index 0e88dfe..7c9c5ce 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel_func.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/bres_calc_omp4kernel_func.cpp
@@ -2,24 +2,32 @@
 // auto-generated by op2.py
 //
 
-void bres_calc_omp4_kernel(int *map0, int map0size, int *map2, int map2size,
-                           int *data5, int dat5size, double *data0,
-                           int dat0size, double *data2, int dat2size,
-                           double *data3, int dat3size, double *data4,
-                           int dat4size, int *col_reord, int set_size1,
-                           int start, int end, int num_teams, int nthread) {
+void bres_calc_omp4_kernel(
+  int *map0,
+  int map0size,
+  int *map2,
+  int map2size,
+  int *data5,
+  int dat5size,
+  double *data0,
+  int dat0size,
+  double *data2,
+  int dat2size,
+  double *data3,
+  int dat3size,
+  double *data4,
+  int dat4size,
+  int *col_reord,
+  int set_size1,
+  int start,
+  int end,
+  int num_teams,
+  int nthread){
 
-#pragma omp target teams num_teams(num_teams) thread_limit(nthread)            \
-    map(to : data5[0 : dat5size])                                              \
-        map(to : gm1_ompkernel, eps_ompkernel, qinf_ompkernel[ : 4]) map(      \
-            to : col_reord[0 : set_size1],                                     \
-                           map0[0 : map0size],                                 \
-                                map2[0 : map2size],                            \
-                                     data0[0 : dat0size],                      \
-                                           data2[0 : dat2size],                \
-                                                 data3[0 : dat3size],          \
-                                                       data4[0 : dat4size])
-#pragma omp distribute parallel for schedule(static, 1)
+  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data5[0:dat5size]) \
+    map(to: gm1_ompkernel, eps_ompkernel, qinf_ompkernel[:4])\
+    map(to:col_reord[0:set_size1],map0[0:map0size],map2[0:map2size],data0[0:dat0size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size])
+  #pragma omp distribute parallel for schedule(static,1)
   for ( int e=start; e<end; e++ ){
     int n_op = col_reord[e];
     int map0idx = map0[n_op + set_size1 * 0];
@@ -56,8 +64,7 @@ void bres_calc_omp4_kernel(int *map0, int map0size, int *map2, int map2size,
 
       mu = (*adt1) * eps_ompkernel;
 
-      f = 0.5f * (vol1 * q1[0] + vol2 * qinf_ompkernel[0]) +
-          mu * (q1[0] - qinf_ompkernel[0]);
+      f = 0.5f * (vol1 * q1[0] + vol2 * qinf_ompkernel[0]) + mu * (q1[0] - qinf_ompkernel[0]);
       res1[0] += f;
       f = 0.5f * (vol1 * q1[1] + p1 * dy + vol2 * qinf_ompkernel[1] + p2 * dy) +
           mu * (q1[1] - qinf_ompkernel[1]);
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel.cpp
index 5bfafcd..ccba34a 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel.cpp
@@ -5,12 +5,25 @@
 //user function
 //user function
 
-void res_calc_omp4_kernel(int *map0, int map0size, int *map2, int map2size,
-                          double *data0, int dat0size, double *data2,
-                          int dat2size, double *data4, int dat4size,
-                          double *data6, int dat6size, int *col_reord,
-                          int set_size1, int start, int end, int num_teams,
-                          int nthread);
+void res_calc_omp4_kernel(
+  int *map0,
+  int map0size,
+  int *map2,
+  int map2size,
+  double *data0,
+  int dat0size,
+  double *data2,
+  int dat2size,
+  double *data4,
+  int dat4size,
+  double *data6,
+  int dat6size,
+  int *col_reord,
+  int set_size1,
+  int start,
+  int end,
+  int num_teams,
+  int nthread);
 
 // host stub function
 void op_par_loop_res_calc(char const *name, op_set set,
@@ -96,12 +109,26 @@ void op_par_loop_res_calc(char const *name, op_set set,
       int start = Plan->col_offsets[0][col];
       int end = Plan->col_offsets[0][col+1];
 
-      res_calc_omp4_kernel(map0, map0size, map2, map2size, data0, dat0size,
-                           data2, dat2size, data4, dat4size, data6, dat6size,
-                           col_reord, set_size1, start, end,
-                           part_size != 0 ? (end - start - 1) / part_size + 1
-                                          : (end - start - 1) / nthread,
-                           nthread);
+      res_calc_omp4_kernel(
+        map0,
+        map0size,
+        map2,
+        map2size,
+        data0,
+        dat0size,
+        data2,
+        dat2size,
+        data4,
+        dat4size,
+        data6,
+        dat6size,
+        col_reord,
+        set_size1,
+        start,
+        end,
+        part_size!=0?(end-start-1)/part_size+1:(end-start-1)/nthread,
+        nthread);
+
     }
     OP_kernels[2].transfer  += Plan->transfer;
     OP_kernels[2].transfer2 += Plan->transfer2;
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel_func.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel_func.cpp
index d805688..8edab20 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel_func.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/res_calc_omp4kernel_func.cpp
@@ -2,23 +2,30 @@
 // auto-generated by op2.py
 //
 
-void res_calc_omp4_kernel(int *map0, int map0size, int *map2, int map2size,
-                          double *data0, int dat0size, double *data2,
-                          int dat2size, double *data4, int dat4size,
-                          double *data6, int dat6size, int *col_reord,
-                          int set_size1, int start, int end, int num_teams,
-                          int nthread) {
+void res_calc_omp4_kernel(
+  int *map0,
+  int map0size,
+  int *map2,
+  int map2size,
+  double *data0,
+  int dat0size,
+  double *data2,
+  int dat2size,
+  double *data4,
+  int dat4size,
+  double *data6,
+  int dat6size,
+  int *col_reord,
+  int set_size1,
+  int start,
+  int end,
+  int num_teams,
+  int nthread){
 
-#pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(       \
-    to : gm1_ompkernel, eps_ompkernel)                                         \
-        map(to : col_reord[0 : set_size1],                                     \
-                           map0[0 : map0size],                                 \
-                                map2[0 : map2size],                            \
-                                     data0[0 : dat0size],                      \
-                                           data2[0 : dat2size],                \
-                                                 data4[0 : dat4size],          \
-                                                       data6[0 : dat6size])
-#pragma omp distribute parallel for schedule(static, 1)
+  #pragma omp target teams num_teams(num_teams) thread_limit(nthread)  \
+    map(to: gm1_ompkernel, eps_ompkernel)\
+    map(to:col_reord[0:set_size1],map0[0:map0size],map2[0:map2size],data0[0:dat0size],data2[0:dat2size],data4[0:dat4size],data6[0:dat6size])
+  #pragma omp distribute parallel for schedule(static,1)
   for ( int e=start; e<end; e++ ){
     int n_op = col_reord[e];
     int map0idx = map0[n_op + set_size1 * 0];
@@ -64,8 +71,7 @@ void res_calc_omp4_kernel(int *map0, int map0size, int *map2, int map2size,
         mu * (q1[2] - q2[2]);
     res1[2] += f;
     res2[2] -= f;
-    f = 0.5f * (vol1 * (q1[3] + p1) + vol2 * (q2[3] + p2)) +
-        mu * (q1[3] - q2[3]);
+    f = 0.5f * (vol1 * (q1[3] + p1) + vol2 * (q2[3] + p2)) + mu * (q1[3] - q2[3]);
     res1[3] += f;
     res2[3] -= f;
     //end inline func
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel.cpp
index c52f9c0..be3c6b1 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel.cpp
@@ -5,8 +5,14 @@
 //user function
 //user function
 
-void save_soln_omp4_kernel(double *data0, int dat0size, double *data1,
-                           int dat1size, int count, int num_teams, int nthread);
+void save_soln_omp4_kernel(
+  double *data0,
+  int dat0size,
+  double *data1,
+  int dat1size,
+  int count,
+  int num_teams,
+  int nthread);
 
 // host stub function
 void op_par_loop_save_soln(char const *name, op_set set,
@@ -53,10 +59,15 @@ void op_par_loop_save_soln(char const *name, op_set set,
     int dat0size = getSetSizeFromOpArg(&arg0) * arg0.dat->dim;
     double* data1 = (double*)arg1.data_d;
     int dat1size = getSetSizeFromOpArg(&arg1) * arg1.dat->dim;
-    save_soln_omp4_kernel(data0, dat0size, data1, dat1size, set->size,
-                          part_size != 0 ? (set->size - 1) / part_size + 1
-                                         : (set->size - 1) / nthread,
-                          nthread);
+    save_soln_omp4_kernel(
+      data0,
+      dat0size,
+      data1,
+      dat1size,
+      set->size,
+      part_size!=0?(set->size-1)/part_size+1:(set->size-1)/nthread,
+      nthread);
+
   }
 
   // combine reduction data
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel_func.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel_func.cpp
index c0bb053..9e8e799 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel_func.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/save_soln_omp4kernel_func.cpp
@@ -2,17 +2,21 @@
 // auto-generated by op2.py
 //
 
-void save_soln_omp4_kernel(double *data0, int dat0size, double *data1,
-                           int dat1size, int count, int num_teams,
-                           int nthread) {
+void save_soln_omp4_kernel(
+  double *data0,
+  int dat0size,
+  double *data1,
+  int dat1size,
+  int count,
+  int num_teams,
+  int nthread){
 
-#pragma omp target teams num_teams(num_teams) thread_limit(nthread)            \
-    map(to : data0[0 : dat0size], data1[0 : dat1size])
-#pragma omp distribute parallel for schedule(static, 1)
+  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size])
+  #pragma omp distribute parallel for schedule(static,1)
   for ( int n_op=0; n_op<count; n_op++ ){
     //variable mapping
-    const double *q = &data0[4 * n_op];
-    double *qold = &data1[4 * n_op];
+    const double *q = &data0[4*n_op];
+    double *qold = &data1[4*n_op];
 
     //inline function
     
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel.cpp
index d0513e9..1786c8c 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel.cpp
@@ -5,10 +5,19 @@
 //user function
 //user function
 
-void update_omp4_kernel(double *data0, int dat0size, double *data1,
-                        int dat1size, double *data2, int dat2size,
-                        double *data3, int dat3size, double *arg4, int count,
-                        int num_teams, int nthread);
+void update_omp4_kernel(
+  double *data0,
+  int dat0size,
+  double *data1,
+  int dat1size,
+  double *data2,
+  int dat2size,
+  double *data3,
+  int dat3size,
+  double *arg4,
+  int count,
+  int num_teams,
+  int nthread);
 
 // host stub function
 void op_par_loop_update(char const *name, op_set set,
@@ -67,11 +76,20 @@ void op_par_loop_update(char const *name, op_set set,
     int dat2size = getSetSizeFromOpArg(&arg2) * arg2.dat->dim;
     double* data3 = (double*)arg3.data_d;
     int dat3size = getSetSizeFromOpArg(&arg3) * arg3.dat->dim;
-    update_omp4_kernel(data0, dat0size, data1, dat1size, data2, dat2size, data3,
-                       dat3size, &arg4_l, set->size,
-                       part_size != 0 ? (set->size - 1) / part_size + 1
-                                      : (set->size - 1) / nthread,
-                       nthread);
+    update_omp4_kernel(
+      data0,
+      dat0size,
+      data1,
+      dat1size,
+      data2,
+      dat2size,
+      data3,
+      dat3size,
+      &arg4_l,
+      set->size,
+      part_size!=0?(set->size-1)/part_size+1:(set->size-1)/nthread,
+      nthread);
+
   }
 
   // combine reduction data
diff --git a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel_func.cpp b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel_func.cpp
index ac8c83d..1c3d86d 100644
--- a/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel_func.cpp
+++ b/apps/c/airfoil/airfoil_hdf5/dp/openmp4/update_omp4kernel_func.cpp
@@ -2,10 +2,19 @@
 // auto-generated by op2.py
 //
 
-void update_omp4_kernel(double *data0, int dat0size, double *data1,
-                        int dat1size, double *data2, int dat2size,
-                        double *data3, int dat3size, double *arg4, int count,
-                        int num_teams, int nthread) {
+void update_omp4_kernel(
+  double *data0,
+  int dat0size,
+  double *data1,
+  int dat1size,
+  double *data2,
+  int dat2size,
+  double *data3,
+  int dat3size,
+  double *arg4,
+  int count,
+  int num_teams,
+  int nthread){
 
   double arg4_l = *arg4;
   #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size])\
@@ -13,9 +22,9 @@ void update_omp4_kernel(double *data0, int dat0size, double *data1,
   #pragma omp distribute parallel for schedule(static,1) reduction(+:arg4_l)
   for ( int n_op=0; n_op<count; n_op++ ){
     //variable mapping
-    const double *qold = &data0[4 * n_op];
-    double *q = &data1[4 * n_op];
-    double *res = &data2[4 * n_op];
+    const double *qold = &data0[4*n_op];
+    double *q = &data1[4*n_op];
+    double *res = &data2[4*n_op];
     const double *adt = &data3[1*n_op];
     double *rms = &arg4_l;
 
diff --git a/translator/c/python/op2.py b/translator/c/python/op2.py
index 9436d36..8eedad5 100755
--- a/translator/c/python/op2.py
+++ b/translator/c/python/op2.py
@@ -821,7 +821,7 @@ def main(srcFilesAndDirs=sys.argv[1:]):
   for nk in xrange(0, len(kernels)):
     if not "decl_filepath" in kernels[nk].keys():
       fail = True
-      print("Declaration not found for kernel " + kernels[nk]["name"])
+      print("Declaration not found for kernel " + kernels[nk]["name"] + "\t\t\t" + src_file)
   if fail:
     exit(2)
 
@@ -857,18 +857,18 @@ def main(srcFilesAndDirs=sys.argv[1:]):
 
   #code generators for OpenMP parallelisation with MPI
   #op2_gen_openmp(masterFile, date, consts, kernels) # Initial OpenMP code generator
-  op2_gen_openmp_simple(masterFile, date, consts, kernels) # Simplified and Optimized OpenMP code generator
-  op2_gen_openacc(masterFile, date, consts, kernels) # Simplified and Optimized OpenMP code generator
+  ##op2_gen_openmp_simple(masterFile, date, consts, kernels) # Simplified and Optimized OpenMP code generator
+  ##op2_gen_openacc(masterFile, date, consts, kernels) # Simplified and Optimized OpenMP code generator
 
   #code generators for NVIDIA GPUs with CUDA
   #op2_gen_cuda(masterFile, date, consts, kernels,sets) # Optimized for Fermi GPUs
-  op2_gen_cuda_simple(masterFile, date, consts, kernels, sets, macro_defs) # Optimized for Kepler GPUs
+  ##op2_gen_cuda_simple(masterFile, date, consts, kernels, sets, macro_defs) # Optimized for Kepler GPUs
 
   # generates openmp code as well as cuda code into the same file
-  op2_gen_cuda_simple_hyb(masterFile, date, consts, kernels, sets) # CPU and GPU will then do comutations as a hybrid application
+  ##op2_gen_cuda_simple_hyb(masterFile, date, consts, kernels, sets) # CPU and GPU will then do comutations as a hybrid application
 
   #code generator for GPUs with OpenMP4.5
-  op2_gen_openmp4(masterFile, date, consts, kernels)
+  ##op2_gen_openmp4(masterFile, date, consts, kernels)
 
   # import subprocess
   # retcode = subprocess.call("which clang-format > /dev/null", shell=True)
