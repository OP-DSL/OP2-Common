//
// auto-generated by op_seq_gen.m on 24-Oct-2011 15:36:23
//

//
// header
//

#include "op_lib_core.h"

void op_arg_set(int n, op_arg arg, char **p_arg){
  int n2;
  if (arg.map==NULL)         // identity mapping, or global data
    n2 = n;
  else                       // standard pointers
    n2 = arg.map->map[arg.idx+n*arg.map->dim];

  *p_arg = arg.data + n2*arg.size;
}


//
// op_par_loop routine for 1 arguments
//

template < class T0 >
void op_par_loop(void (*kernel)( T0* ),
  char const * name, op_set set,
  op_arg arg0 ) {

  char *p_arg0;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0 );
  }
}

//
// op_par_loop routine for 2 arguments
//

template < class T0, class T1 >
void op_par_loop(void (*kernel)( T0*, T1* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1 ) {

  char *p_arg0, *p_arg1;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1 );
  }
}

//
// op_par_loop routine for 3 arguments
//

template < class T0, class T1, class T2 >
void op_par_loop(void (*kernel)( T0*, T1*, T2* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2 ) {

  char *p_arg0, *p_arg1, *p_arg2;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2 );
  }
}

//
// op_par_loop routine for 4 arguments
//

template < class T0, class T1, class T2, class T3 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3 );
  }
}

//
// op_par_loop routine for 5 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4 );
  }
}

//
// op_par_loop routine for 6 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5 );
  }
}

//
// op_par_loop routine for 7 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6 );
  }
}

//
// op_par_loop routine for 8 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7 );
  }
}

//
// op_par_loop routine for 9 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8 );
  }
}

//
// op_par_loop routine for 10 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9 );
  }
}

//
// op_par_loop routine for 11 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10 );
  }
}

//
// op_par_loop routine for 12 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11 );
  }
}

//
// op_par_loop routine for 13 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12 );
  }
}

//
// op_par_loop routine for 14 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13 );
  }
}

//
// op_par_loop routine for 15 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14 );
  }
}

//
// op_par_loop routine for 16 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15 );
  }
}

//
// op_par_loop routine for 17 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16 );
  }
}

//
// op_par_loop routine for 18 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17 );
  }
}

//
// op_par_loop routine for 19 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18 );
  }
}

//
// op_par_loop routine for 20 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19 );
  }
}

//
// op_par_loop routine for 21 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20 );
  }
}

//
// op_par_loop routine for 22 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21 );
  }
}

//
// op_par_loop routine for 23 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22 );
  }
}

//
// op_par_loop routine for 24 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23 );
  }
}

//
// op_par_loop routine for 25 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24 );
  }
}

//
// op_par_loop routine for 26 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25 );
  }
}

//
// op_par_loop routine for 27 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26 );
  }
}

//
// op_par_loop routine for 28 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27 );
  }
}

//
// op_par_loop routine for 29 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28 );
  }
}

//
// op_par_loop routine for 30 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29 );
  }
}

//
// op_par_loop routine for 31 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30 );
  }
}

//
// op_par_loop routine for 32 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31 );
  }
}

//
// op_par_loop routine for 33 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32 );
  }
}

//
// op_par_loop routine for 34 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33 );
  }
}

//
// op_par_loop routine for 35 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34 );
  }
}

//
// op_par_loop routine for 36 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35 );
  }
}

//
// op_par_loop routine for 37 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36 );
  }
}

//
// op_par_loop routine for 38 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37 );
  }
}

//
// op_par_loop routine for 39 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38 );
  }
}

//
// op_par_loop routine for 40 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39 );
  }
}

//
// op_par_loop routine for 41 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40 );
  }
}

//
// op_par_loop routine for 42 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41 );
  }
}

//
// op_par_loop routine for 43 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42 );
  }
}

//
// op_par_loop routine for 44 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43 );
  }
}

//
// op_par_loop routine for 45 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44 );
  }
}

//
// op_par_loop routine for 46 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45 );
  }
}

//
// op_par_loop routine for 47 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46 );
  }
}

//
// op_par_loop routine for 48 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47 );
  }
}

//
// op_par_loop routine for 49 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48 );
  }
}

//
// op_par_loop routine for 50 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49 );
  }
}

//
// op_par_loop routine for 51 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50 );
  }
}

//
// op_par_loop routine for 52 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51 );
  }
}

//
// op_par_loop routine for 53 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52 );
  }
}

//
// op_par_loop routine for 54 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53 );
  }
}

//
// op_par_loop routine for 55 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54 );
  }
}

//
// op_par_loop routine for 56 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55 );
  }
}

//
// op_par_loop routine for 57 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56 );
  }
}

//
// op_par_loop routine for 58 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57 );
  }
}

//
// op_par_loop routine for 59 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58 );
  }
}

//
// op_par_loop routine for 60 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59 );
  }
}

//
// op_par_loop routine for 61 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60 );
  }
}

//
// op_par_loop routine for 62 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61 );
  }
}

//
// op_par_loop routine for 63 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62 );
  }
}

//
// op_par_loop routine for 64 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63 );
  }
}

//
// op_par_loop routine for 65 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64 );
  }
}

//
// op_par_loop routine for 66 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65 );
  }
}

//
// op_par_loop routine for 67 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66 );
  }
}

//
// op_par_loop routine for 68 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67 );
  }
}

//
// op_par_loop routine for 69 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68 );
  }
}

//
// op_par_loop routine for 70 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69 );
  }
}

//
// op_par_loop routine for 71 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70 );
  }
}

//
// op_par_loop routine for 72 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71 );
  }
}

//
// op_par_loop routine for 73 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72 );
  }
}

//
// op_par_loop routine for 74 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73 );
  }
}

//
// op_par_loop routine for 75 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74 );
  }
}

//
// op_par_loop routine for 76 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75 );
  }
}

//
// op_par_loop routine for 77 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76 );
  }
}

//
// op_par_loop routine for 78 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77 );
  }
}

//
// op_par_loop routine for 79 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78 );
  }
}

//
// op_par_loop routine for 80 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79 );
  }
}

//
// op_par_loop routine for 81 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80 );
  }
}

//
// op_par_loop routine for 82 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81 );
  }
}

//
// op_par_loop routine for 83 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82 );
  }
}

//
// op_par_loop routine for 84 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83 );
  }
}

//
// op_par_loop routine for 85 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84 );
  }
}

//
// op_par_loop routine for 86 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85 );
  }
}

//
// op_par_loop routine for 87 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86 );
  }
}

//
// op_par_loop routine for 88 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87 );
  }
}

//
// op_par_loop routine for 89 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88 );
  }
}

//
// op_par_loop routine for 90 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89 );
  }
}

//
// op_par_loop routine for 91 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90 );
  }
}

//
// op_par_loop routine for 92 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91 );
  }
}

//
// op_par_loop routine for 93 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92 );
  }
}

//
// op_par_loop routine for 94 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92,class T93 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92*,T93* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92,op_arg arg93 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92,*p_arg93;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
   op_arg_check(set,93,arg93,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);
    op_arg_set(n,arg93,&p_arg93);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92,(T93 *)p_arg93 );
  }
}

//
// op_par_loop routine for 95 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92,class T93,class T94 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92*,T93*,T94* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92,op_arg arg93,op_arg arg94 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92,*p_arg93,*p_arg94;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
   op_arg_check(set,93,arg93,&ninds,name);
   op_arg_check(set,94,arg94,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);
    op_arg_set(n,arg93,&p_arg93);
    op_arg_set(n,arg94,&p_arg94);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92,(T93 *)p_arg93,(T94 *)p_arg94 );
  }
}

//
// op_par_loop routine for 96 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92,class T93,class T94,class T95 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92*,T93*,T94*,T95* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92,op_arg arg93,op_arg arg94,op_arg arg95 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92,*p_arg93,*p_arg94,*p_arg95;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
   op_arg_check(set,93,arg93,&ninds,name);
   op_arg_check(set,94,arg94,&ninds,name);
   op_arg_check(set,95,arg95,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);
    op_arg_set(n,arg93,&p_arg93);
    op_arg_set(n,arg94,&p_arg94);
    op_arg_set(n,arg95,&p_arg95);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92,(T93 *)p_arg93,(T94 *)p_arg94,(T95 *)p_arg95 );
  }
}

//
// op_par_loop routine for 97 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92,class T93,class T94,class T95,
           class T96 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92*,T93*,T94*,T95*,
                                 T96* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92,op_arg arg93,op_arg arg94,op_arg arg95,
  op_arg arg96 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92,*p_arg93,*p_arg94,*p_arg95,
       *p_arg96;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
   op_arg_check(set,93,arg93,&ninds,name);
   op_arg_check(set,94,arg94,&ninds,name);
   op_arg_check(set,95,arg95,&ninds,name);
   op_arg_check(set,96,arg96,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);
    op_arg_set(n,arg93,&p_arg93);
    op_arg_set(n,arg94,&p_arg94);
    op_arg_set(n,arg95,&p_arg95);
    op_arg_set(n,arg96,&p_arg96);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92,(T93 *)p_arg93,(T94 *)p_arg94,(T95 *)p_arg95,
            (T96 *)p_arg96 );
  }
}

//
// op_par_loop routine for 98 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92,class T93,class T94,class T95,
           class T96,class T97 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92*,T93*,T94*,T95*,
                                 T96*,T97* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92,op_arg arg93,op_arg arg94,op_arg arg95,
  op_arg arg96,op_arg arg97 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92,*p_arg93,*p_arg94,*p_arg95,
       *p_arg96,*p_arg97;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
   op_arg_check(set,93,arg93,&ninds,name);
   op_arg_check(set,94,arg94,&ninds,name);
   op_arg_check(set,95,arg95,&ninds,name);
   op_arg_check(set,96,arg96,&ninds,name);
   op_arg_check(set,97,arg97,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);
    op_arg_set(n,arg93,&p_arg93);
    op_arg_set(n,arg94,&p_arg94);
    op_arg_set(n,arg95,&p_arg95);
    op_arg_set(n,arg96,&p_arg96);
    op_arg_set(n,arg97,&p_arg97);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92,(T93 *)p_arg93,(T94 *)p_arg94,(T95 *)p_arg95,
            (T96 *)p_arg96,(T97 *)p_arg97 );
  }
}

//
// op_par_loop routine for 99 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92,class T93,class T94,class T95,
           class T96,class T97,class T98 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92*,T93*,T94*,T95*,
                                 T96*,T97*,T98* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92,op_arg arg93,op_arg arg94,op_arg arg95,
  op_arg arg96,op_arg arg97,op_arg arg98 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92,*p_arg93,*p_arg94,*p_arg95,
       *p_arg96,*p_arg97,*p_arg98;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
   op_arg_check(set,93,arg93,&ninds,name);
   op_arg_check(set,94,arg94,&ninds,name);
   op_arg_check(set,95,arg95,&ninds,name);
   op_arg_check(set,96,arg96,&ninds,name);
   op_arg_check(set,97,arg97,&ninds,name);
   op_arg_check(set,98,arg98,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);
    op_arg_set(n,arg93,&p_arg93);
    op_arg_set(n,arg94,&p_arg94);
    op_arg_set(n,arg95,&p_arg95);
    op_arg_set(n,arg96,&p_arg96);
    op_arg_set(n,arg97,&p_arg97);
    op_arg_set(n,arg98,&p_arg98);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92,(T93 *)p_arg93,(T94 *)p_arg94,(T95 *)p_arg95,
            (T96 *)p_arg96,(T97 *)p_arg97,(T98 *)p_arg98 );
  }
}

//
// op_par_loop routine for 100 arguments
//

template < class T0, class T1, class T2, class T3,
           class T4, class T5, class T6, class T7,
           class T8, class T9, class T10,class T11,
           class T12,class T13,class T14,class T15,
           class T16,class T17,class T18,class T19,
           class T20,class T21,class T22,class T23,
           class T24,class T25,class T26,class T27,
           class T28,class T29,class T30,class T31,
           class T32,class T33,class T34,class T35,
           class T36,class T37,class T38,class T39,
           class T40,class T41,class T42,class T43,
           class T44,class T45,class T46,class T47,
           class T48,class T49,class T50,class T51,
           class T52,class T53,class T54,class T55,
           class T56,class T57,class T58,class T59,
           class T60,class T61,class T62,class T63,
           class T64,class T65,class T66,class T67,
           class T68,class T69,class T70,class T71,
           class T72,class T73,class T74,class T75,
           class T76,class T77,class T78,class T79,
           class T80,class T81,class T82,class T83,
           class T84,class T85,class T86,class T87,
           class T88,class T89,class T90,class T91,
           class T92,class T93,class T94,class T95,
           class T96,class T97,class T98,class T99 >
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*,
                                 T4*, T5*, T6*, T7*,
                                 T8*, T9*, T10*,T11*,
                                 T12*,T13*,T14*,T15*,
                                 T16*,T17*,T18*,T19*,
                                 T20*,T21*,T22*,T23*,
                                 T24*,T25*,T26*,T27*,
                                 T28*,T29*,T30*,T31*,
                                 T32*,T33*,T34*,T35*,
                                 T36*,T37*,T38*,T39*,
                                 T40*,T41*,T42*,T43*,
                                 T44*,T45*,T46*,T47*,
                                 T48*,T49*,T50*,T51*,
                                 T52*,T53*,T54*,T55*,
                                 T56*,T57*,T58*,T59*,
                                 T60*,T61*,T62*,T63*,
                                 T64*,T65*,T66*,T67*,
                                 T68*,T69*,T70*,T71*,
                                 T72*,T73*,T74*,T75*,
                                 T76*,T77*,T78*,T79*,
                                 T80*,T81*,T82*,T83*,
                                 T84*,T85*,T86*,T87*,
                                 T88*,T89*,T90*,T91*,
                                 T92*,T93*,T94*,T95*,
                                 T96*,T97*,T98*,T99* ),
  char const * name, op_set set,
  op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3,
  op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7,
  op_arg arg8, op_arg arg9, op_arg arg10,op_arg arg11,
  op_arg arg12,op_arg arg13,op_arg arg14,op_arg arg15,
  op_arg arg16,op_arg arg17,op_arg arg18,op_arg arg19,
  op_arg arg20,op_arg arg21,op_arg arg22,op_arg arg23,
  op_arg arg24,op_arg arg25,op_arg arg26,op_arg arg27,
  op_arg arg28,op_arg arg29,op_arg arg30,op_arg arg31,
  op_arg arg32,op_arg arg33,op_arg arg34,op_arg arg35,
  op_arg arg36,op_arg arg37,op_arg arg38,op_arg arg39,
  op_arg arg40,op_arg arg41,op_arg arg42,op_arg arg43,
  op_arg arg44,op_arg arg45,op_arg arg46,op_arg arg47,
  op_arg arg48,op_arg arg49,op_arg arg50,op_arg arg51,
  op_arg arg52,op_arg arg53,op_arg arg54,op_arg arg55,
  op_arg arg56,op_arg arg57,op_arg arg58,op_arg arg59,
  op_arg arg60,op_arg arg61,op_arg arg62,op_arg arg63,
  op_arg arg64,op_arg arg65,op_arg arg66,op_arg arg67,
  op_arg arg68,op_arg arg69,op_arg arg70,op_arg arg71,
  op_arg arg72,op_arg arg73,op_arg arg74,op_arg arg75,
  op_arg arg76,op_arg arg77,op_arg arg78,op_arg arg79,
  op_arg arg80,op_arg arg81,op_arg arg82,op_arg arg83,
  op_arg arg84,op_arg arg85,op_arg arg86,op_arg arg87,
  op_arg arg88,op_arg arg89,op_arg arg90,op_arg arg91,
  op_arg arg92,op_arg arg93,op_arg arg94,op_arg arg95,
  op_arg arg96,op_arg arg97,op_arg arg98,op_arg arg99 ) {

  char *p_arg0, *p_arg1, *p_arg2, *p_arg3,
       *p_arg4, *p_arg5, *p_arg6, *p_arg7,
       *p_arg8, *p_arg9, *p_arg10,*p_arg11,
       *p_arg12,*p_arg13,*p_arg14,*p_arg15,
       *p_arg16,*p_arg17,*p_arg18,*p_arg19,
       *p_arg20,*p_arg21,*p_arg22,*p_arg23,
       *p_arg24,*p_arg25,*p_arg26,*p_arg27,
       *p_arg28,*p_arg29,*p_arg30,*p_arg31,
       *p_arg32,*p_arg33,*p_arg34,*p_arg35,
       *p_arg36,*p_arg37,*p_arg38,*p_arg39,
       *p_arg40,*p_arg41,*p_arg42,*p_arg43,
       *p_arg44,*p_arg45,*p_arg46,*p_arg47,
       *p_arg48,*p_arg49,*p_arg50,*p_arg51,
       *p_arg52,*p_arg53,*p_arg54,*p_arg55,
       *p_arg56,*p_arg57,*p_arg58,*p_arg59,
       *p_arg60,*p_arg61,*p_arg62,*p_arg63,
       *p_arg64,*p_arg65,*p_arg66,*p_arg67,
       *p_arg68,*p_arg69,*p_arg70,*p_arg71,
       *p_arg72,*p_arg73,*p_arg74,*p_arg75,
       *p_arg76,*p_arg77,*p_arg78,*p_arg79,
       *p_arg80,*p_arg81,*p_arg82,*p_arg83,
       *p_arg84,*p_arg85,*p_arg86,*p_arg87,
       *p_arg88,*p_arg89,*p_arg90,*p_arg91,
       *p_arg92,*p_arg93,*p_arg94,*p_arg95,
       *p_arg96,*p_arg97,*p_arg98,*p_arg99;

  // consistency checks

  int ninds=0;

  if (OP_diags>0) {
   op_arg_check(set,0 ,arg0 ,&ninds,name);
   op_arg_check(set,1 ,arg1 ,&ninds,name);
   op_arg_check(set,2 ,arg2 ,&ninds,name);
   op_arg_check(set,3 ,arg3 ,&ninds,name);
   op_arg_check(set,4 ,arg4 ,&ninds,name);
   op_arg_check(set,5 ,arg5 ,&ninds,name);
   op_arg_check(set,6 ,arg6 ,&ninds,name);
   op_arg_check(set,7 ,arg7 ,&ninds,name);
   op_arg_check(set,8 ,arg8 ,&ninds,name);
   op_arg_check(set,9 ,arg9 ,&ninds,name);
   op_arg_check(set,10,arg10,&ninds,name);
   op_arg_check(set,11,arg11,&ninds,name);
   op_arg_check(set,12,arg12,&ninds,name);
   op_arg_check(set,13,arg13,&ninds,name);
   op_arg_check(set,14,arg14,&ninds,name);
   op_arg_check(set,15,arg15,&ninds,name);
   op_arg_check(set,16,arg16,&ninds,name);
   op_arg_check(set,17,arg17,&ninds,name);
   op_arg_check(set,18,arg18,&ninds,name);
   op_arg_check(set,19,arg19,&ninds,name);
   op_arg_check(set,20,arg20,&ninds,name);
   op_arg_check(set,21,arg21,&ninds,name);
   op_arg_check(set,22,arg22,&ninds,name);
   op_arg_check(set,23,arg23,&ninds,name);
   op_arg_check(set,24,arg24,&ninds,name);
   op_arg_check(set,25,arg25,&ninds,name);
   op_arg_check(set,26,arg26,&ninds,name);
   op_arg_check(set,27,arg27,&ninds,name);
   op_arg_check(set,28,arg28,&ninds,name);
   op_arg_check(set,29,arg29,&ninds,name);
   op_arg_check(set,30,arg30,&ninds,name);
   op_arg_check(set,31,arg31,&ninds,name);
   op_arg_check(set,32,arg32,&ninds,name);
   op_arg_check(set,33,arg33,&ninds,name);
   op_arg_check(set,34,arg34,&ninds,name);
   op_arg_check(set,35,arg35,&ninds,name);
   op_arg_check(set,36,arg36,&ninds,name);
   op_arg_check(set,37,arg37,&ninds,name);
   op_arg_check(set,38,arg38,&ninds,name);
   op_arg_check(set,39,arg39,&ninds,name);
   op_arg_check(set,40,arg40,&ninds,name);
   op_arg_check(set,41,arg41,&ninds,name);
   op_arg_check(set,42,arg42,&ninds,name);
   op_arg_check(set,43,arg43,&ninds,name);
   op_arg_check(set,44,arg44,&ninds,name);
   op_arg_check(set,45,arg45,&ninds,name);
   op_arg_check(set,46,arg46,&ninds,name);
   op_arg_check(set,47,arg47,&ninds,name);
   op_arg_check(set,48,arg48,&ninds,name);
   op_arg_check(set,49,arg49,&ninds,name);
   op_arg_check(set,50,arg50,&ninds,name);
   op_arg_check(set,51,arg51,&ninds,name);
   op_arg_check(set,52,arg52,&ninds,name);
   op_arg_check(set,53,arg53,&ninds,name);
   op_arg_check(set,54,arg54,&ninds,name);
   op_arg_check(set,55,arg55,&ninds,name);
   op_arg_check(set,56,arg56,&ninds,name);
   op_arg_check(set,57,arg57,&ninds,name);
   op_arg_check(set,58,arg58,&ninds,name);
   op_arg_check(set,59,arg59,&ninds,name);
   op_arg_check(set,60,arg60,&ninds,name);
   op_arg_check(set,61,arg61,&ninds,name);
   op_arg_check(set,62,arg62,&ninds,name);
   op_arg_check(set,63,arg63,&ninds,name);
   op_arg_check(set,64,arg64,&ninds,name);
   op_arg_check(set,65,arg65,&ninds,name);
   op_arg_check(set,66,arg66,&ninds,name);
   op_arg_check(set,67,arg67,&ninds,name);
   op_arg_check(set,68,arg68,&ninds,name);
   op_arg_check(set,69,arg69,&ninds,name);
   op_arg_check(set,70,arg70,&ninds,name);
   op_arg_check(set,71,arg71,&ninds,name);
   op_arg_check(set,72,arg72,&ninds,name);
   op_arg_check(set,73,arg73,&ninds,name);
   op_arg_check(set,74,arg74,&ninds,name);
   op_arg_check(set,75,arg75,&ninds,name);
   op_arg_check(set,76,arg76,&ninds,name);
   op_arg_check(set,77,arg77,&ninds,name);
   op_arg_check(set,78,arg78,&ninds,name);
   op_arg_check(set,79,arg79,&ninds,name);
   op_arg_check(set,80,arg80,&ninds,name);
   op_arg_check(set,81,arg81,&ninds,name);
   op_arg_check(set,82,arg82,&ninds,name);
   op_arg_check(set,83,arg83,&ninds,name);
   op_arg_check(set,84,arg84,&ninds,name);
   op_arg_check(set,85,arg85,&ninds,name);
   op_arg_check(set,86,arg86,&ninds,name);
   op_arg_check(set,87,arg87,&ninds,name);
   op_arg_check(set,88,arg88,&ninds,name);
   op_arg_check(set,89,arg89,&ninds,name);
   op_arg_check(set,90,arg90,&ninds,name);
   op_arg_check(set,91,arg91,&ninds,name);
   op_arg_check(set,92,arg92,&ninds,name);
   op_arg_check(set,93,arg93,&ninds,name);
   op_arg_check(set,94,arg94,&ninds,name);
   op_arg_check(set,95,arg95,&ninds,name);
   op_arg_check(set,96,arg96,&ninds,name);
   op_arg_check(set,97,arg97,&ninds,name);
   op_arg_check(set,98,arg98,&ninds,name);
   op_arg_check(set,99,arg99,&ninds,name);
  }

  if (OP_diags>2) {
    if (ninds==0)
      printf(" kernel routine w/o indirection:  %s \n",name);
    else
      printf(" kernel routine with indirection: %s \n",name);
  }

  // loop over set elements

  for (int n=0; n<set->size; n++) {
    op_arg_set(n,arg0 ,&p_arg0 );
    op_arg_set(n,arg1 ,&p_arg1 );
    op_arg_set(n,arg2 ,&p_arg2 );
    op_arg_set(n,arg3 ,&p_arg3 );
    op_arg_set(n,arg4 ,&p_arg4 );
    op_arg_set(n,arg5 ,&p_arg5 );
    op_arg_set(n,arg6 ,&p_arg6 );
    op_arg_set(n,arg7 ,&p_arg7 );
    op_arg_set(n,arg8 ,&p_arg8 );
    op_arg_set(n,arg9 ,&p_arg9 );
    op_arg_set(n,arg10,&p_arg10);
    op_arg_set(n,arg11,&p_arg11);
    op_arg_set(n,arg12,&p_arg12);
    op_arg_set(n,arg13,&p_arg13);
    op_arg_set(n,arg14,&p_arg14);
    op_arg_set(n,arg15,&p_arg15);
    op_arg_set(n,arg16,&p_arg16);
    op_arg_set(n,arg17,&p_arg17);
    op_arg_set(n,arg18,&p_arg18);
    op_arg_set(n,arg19,&p_arg19);
    op_arg_set(n,arg20,&p_arg20);
    op_arg_set(n,arg21,&p_arg21);
    op_arg_set(n,arg22,&p_arg22);
    op_arg_set(n,arg23,&p_arg23);
    op_arg_set(n,arg24,&p_arg24);
    op_arg_set(n,arg25,&p_arg25);
    op_arg_set(n,arg26,&p_arg26);
    op_arg_set(n,arg27,&p_arg27);
    op_arg_set(n,arg28,&p_arg28);
    op_arg_set(n,arg29,&p_arg29);
    op_arg_set(n,arg30,&p_arg30);
    op_arg_set(n,arg31,&p_arg31);
    op_arg_set(n,arg32,&p_arg32);
    op_arg_set(n,arg33,&p_arg33);
    op_arg_set(n,arg34,&p_arg34);
    op_arg_set(n,arg35,&p_arg35);
    op_arg_set(n,arg36,&p_arg36);
    op_arg_set(n,arg37,&p_arg37);
    op_arg_set(n,arg38,&p_arg38);
    op_arg_set(n,arg39,&p_arg39);
    op_arg_set(n,arg40,&p_arg40);
    op_arg_set(n,arg41,&p_arg41);
    op_arg_set(n,arg42,&p_arg42);
    op_arg_set(n,arg43,&p_arg43);
    op_arg_set(n,arg44,&p_arg44);
    op_arg_set(n,arg45,&p_arg45);
    op_arg_set(n,arg46,&p_arg46);
    op_arg_set(n,arg47,&p_arg47);
    op_arg_set(n,arg48,&p_arg48);
    op_arg_set(n,arg49,&p_arg49);
    op_arg_set(n,arg50,&p_arg50);
    op_arg_set(n,arg51,&p_arg51);
    op_arg_set(n,arg52,&p_arg52);
    op_arg_set(n,arg53,&p_arg53);
    op_arg_set(n,arg54,&p_arg54);
    op_arg_set(n,arg55,&p_arg55);
    op_arg_set(n,arg56,&p_arg56);
    op_arg_set(n,arg57,&p_arg57);
    op_arg_set(n,arg58,&p_arg58);
    op_arg_set(n,arg59,&p_arg59);
    op_arg_set(n,arg60,&p_arg60);
    op_arg_set(n,arg61,&p_arg61);
    op_arg_set(n,arg62,&p_arg62);
    op_arg_set(n,arg63,&p_arg63);
    op_arg_set(n,arg64,&p_arg64);
    op_arg_set(n,arg65,&p_arg65);
    op_arg_set(n,arg66,&p_arg66);
    op_arg_set(n,arg67,&p_arg67);
    op_arg_set(n,arg68,&p_arg68);
    op_arg_set(n,arg69,&p_arg69);
    op_arg_set(n,arg70,&p_arg70);
    op_arg_set(n,arg71,&p_arg71);
    op_arg_set(n,arg72,&p_arg72);
    op_arg_set(n,arg73,&p_arg73);
    op_arg_set(n,arg74,&p_arg74);
    op_arg_set(n,arg75,&p_arg75);
    op_arg_set(n,arg76,&p_arg76);
    op_arg_set(n,arg77,&p_arg77);
    op_arg_set(n,arg78,&p_arg78);
    op_arg_set(n,arg79,&p_arg79);
    op_arg_set(n,arg80,&p_arg80);
    op_arg_set(n,arg81,&p_arg81);
    op_arg_set(n,arg82,&p_arg82);
    op_arg_set(n,arg83,&p_arg83);
    op_arg_set(n,arg84,&p_arg84);
    op_arg_set(n,arg85,&p_arg85);
    op_arg_set(n,arg86,&p_arg86);
    op_arg_set(n,arg87,&p_arg87);
    op_arg_set(n,arg88,&p_arg88);
    op_arg_set(n,arg89,&p_arg89);
    op_arg_set(n,arg90,&p_arg90);
    op_arg_set(n,arg91,&p_arg91);
    op_arg_set(n,arg92,&p_arg92);
    op_arg_set(n,arg93,&p_arg93);
    op_arg_set(n,arg94,&p_arg94);
    op_arg_set(n,arg95,&p_arg95);
    op_arg_set(n,arg96,&p_arg96);
    op_arg_set(n,arg97,&p_arg97);
    op_arg_set(n,arg98,&p_arg98);
    op_arg_set(n,arg99,&p_arg99);

    // call kernel function, passing in pointers to data

    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,
            (T4 *)p_arg4,  (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,
            (T8 *)p_arg8,  (T9 *)p_arg9,  (T10 *)p_arg10,(T11 *)p_arg11,
            (T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,(T15 *)p_arg15,
            (T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19,
            (T20 *)p_arg20,(T21 *)p_arg21,(T22 *)p_arg22,(T23 *)p_arg23,
            (T24 *)p_arg24,(T25 *)p_arg25,(T26 *)p_arg26,(T27 *)p_arg27,
            (T28 *)p_arg28,(T29 *)p_arg29,(T30 *)p_arg30,(T31 *)p_arg31,
            (T32 *)p_arg32,(T33 *)p_arg33,(T34 *)p_arg34,(T35 *)p_arg35,
            (T36 *)p_arg36,(T37 *)p_arg37,(T38 *)p_arg38,(T39 *)p_arg39,
            (T40 *)p_arg40,(T41 *)p_arg41,(T42 *)p_arg42,(T43 *)p_arg43,
            (T44 *)p_arg44,(T45 *)p_arg45,(T46 *)p_arg46,(T47 *)p_arg47,
            (T48 *)p_arg48,(T49 *)p_arg49,(T50 *)p_arg50,(T51 *)p_arg51,
            (T52 *)p_arg52,(T53 *)p_arg53,(T54 *)p_arg54,(T55 *)p_arg55,
            (T56 *)p_arg56,(T57 *)p_arg57,(T58 *)p_arg58,(T59 *)p_arg59,
            (T60 *)p_arg60,(T61 *)p_arg61,(T62 *)p_arg62,(T63 *)p_arg63,
            (T64 *)p_arg64,(T65 *)p_arg65,(T66 *)p_arg66,(T67 *)p_arg67,
            (T68 *)p_arg68,(T69 *)p_arg69,(T70 *)p_arg70,(T71 *)p_arg71,
            (T72 *)p_arg72,(T73 *)p_arg73,(T74 *)p_arg74,(T75 *)p_arg75,
            (T76 *)p_arg76,(T77 *)p_arg77,(T78 *)p_arg78,(T79 *)p_arg79,
            (T80 *)p_arg80,(T81 *)p_arg81,(T82 *)p_arg82,(T83 *)p_arg83,
            (T84 *)p_arg84,(T85 *)p_arg85,(T86 *)p_arg86,(T87 *)p_arg87,
            (T88 *)p_arg88,(T89 *)p_arg89,(T90 *)p_arg90,(T91 *)p_arg91,
            (T92 *)p_arg92,(T93 *)p_arg93,(T94 *)p_arg94,(T95 *)p_arg95,
            (T96 *)p_arg96,(T97 *)p_arg97,(T98 *)p_arg98,(T99 *)p_arg99 );
  }
}
