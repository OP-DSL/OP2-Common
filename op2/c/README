This directory provides an implementation of the C and C++ OP2 interface.

CMake build
-----------

The recommended way of building the library is using CMake (http://cmake.org).

For a standard developer build with debugging symbols and all features enabled
run (the installation prefix is the current directory):

  ./cmake.local

CMake will automatically detect which dependencies are installed and build the
libraries for which dependencies are satisfied, automatically skipping others.

The build is highly customisable:
* Select which libraries variants to build (sequential, cuda, hdf5, mpi, openmp)
* Choose the installation prefix
* Change compiler flags
* Set paths to non-standard installations of dependencies
* etc.

Since CMake builds are out-of-source, you can have as many builds as you want
wherever you want from the same source with different options.

For custom builds, there are several options:

1. Write your own build script based on cmake.local and customise it to your
   needs.

2. Use a cmake GUI (ccmake or cmake-gui) to set custom build options:

     mkdir build && cd build && ccmake ..

   will generate Makefiles in the subdirectory 'build'.

3. Edit the cache file build/CMakeCache.txt with a text editor and re-run
   cmake.

If CMake does not automatically detect installation paths of dependencies, set
them as follows:

* CUDA: set CUDA_TOOLKIT_ROOT_DIR if CUDA was not found and CUDA_BIN_PATH to
  override

* HDF5: set HDF5_ROOT if HDF5 was not FOUND

* MPI: CMake tries to extract the MPI library and include directories from the
  MPI compiler it finds in the path. If detection fails or you want to
  override what CMake found, set both MPI_INCLUDE_PATH and MPI_LIBRARY to
  disable auto detection.

* ParMETIS: set PARMETIS_DIR if not found. If you have a non-standard layout
  for your ParMETIS installation, i.e. the libraries are not in lib and
  headers in include, specify PARMETIS_LIB_DIR and/or PARMETIS_INCLUDE_DIR

* SCOTCH: set SCOTCH_DIR if not found

Regular Makefile build
----------------------

To compile using the regular Makefiles provided, it is required to:

1. Set the environment variable CUDA_INSTALL_PATH to the appropriate path.
   For instance, on CX1 under bash, if we want to use cuda 4.0.11,
   we will have to set it as following:

      export CUDA_INSTALL_PATH=/apps/cuda/4.0.11

2. Set the environment variable OP2_COMPILER to either 'intel' or 'gnu' to
   select building with either icc or gcc compilers.

3. Set the environment variables MPI_INSTALL_PATH, PARMETIS_INSTALL_PATH and /
   or PTSCOTCH_INSTALL_PATH to the installation directories of these libraries.
   For instance:

      export PARMETIS_INSTALL_PATH=/home/gihan/ParMetis-3.1.1
      
      and / or 
      
      export PTSCOTCH_INSTALL_PATH=/home/gihan/PT-Scotch
